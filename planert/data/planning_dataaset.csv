Task,Domain,Problem,Plan
airport,"(define (domain airport_fixed_structure)

(:requirements :typing)

(:types airplane segment direction airplanetype)

(:constants
                north
                south - direction

                light
                medium
                heavy - airplanetype

                seg_pp_0_60
                seg_ppdoor_0_40
                seg_tww1_0_200
                seg_twe1_0_200
                seg_tww2_0_50
                seg_tww3_0_50
                seg_tww4_0_50
                seg_rww_0_50
                seg_rwtw1_0_10
                seg_rw_0_400
                seg_rwe_0_50
                seg_twe4_0_50
                seg_rwte1_0_10
                seg_twe3_0_50
                seg_twe2_0_50
                seg_rwte2_0_10
                seg_rwtw2_0_10 - segment

                airplane_CFBEG - airplane
)

(:predicates
                ;; airport information
                (has-type ?a - airplane ?t - airplanetype)
                ;; plane a has type t
                (at-segment ?a - airplane ?s - segment)
                ;; planes are at segments, ie at their end in driving direction
                (facing ?a - airplane ?d - direction)
                ;; planes face into their driving direction

                ;; how the planes affect the airport
                (occupied ?s - segment)
                ;; a plane is in here
                (not_occupied ?s - segment)
                (blocked ?s - segment ?a - airplane)
                ;; segment s is blocked if it is endangered by plane p
                (not_blocked ?s - segment ?a - airplane)

                ;; an airplane may lineup on segment s when facing d
                (is-start-runway ?s - segment ?d - direction)

                ;; airplane a is starting from runway s
                (airborne ?a - airplane ?s - segment)

                (is-moving ?a - airplane)
                (is-pushing ?a - airplane)
                (is-parked ?a - airplane ?s - segment)

)

(:action move_seg_pp_0_60_seg_ppdoor_0_40_north_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_pp_0_60)
                 (not_occupied seg_ppdoor_0_40)
                 (not_blocked seg_ppdoor_0_40 airplane_CFBEG)

              )

 :effect        (and
                 (not (occupied seg_pp_0_60))
                 (not_occupied seg_pp_0_60)
                 (not (at-segment ?a seg_pp_0_60))

                 (occupied seg_ppdoor_0_40)
                 (not (not_occupied seg_ppdoor_0_40))
                 (blocked seg_ppdoor_0_40 ?a)
                 (not (not_blocked seg_ppdoor_0_40 ?a))
                 (at-segment ?a seg_ppdoor_0_40)


                )
)

(:action move_seg_ppdoor_0_40_seg_tww1_0_200_north_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_ppdoor_0_40)
                 (not_occupied seg_tww1_0_200)
                 (not_blocked seg_tww1_0_200 airplane_CFBEG)

                 (not_occupied seg_twe1_0_200)
              )

 :effect        (and
                 (not (occupied seg_ppdoor_0_40))
                 (not_occupied seg_ppdoor_0_40)
                 (not (at-segment ?a seg_ppdoor_0_40))

                 (occupied seg_tww1_0_200)
                 (not (not_occupied seg_tww1_0_200))
                 (blocked seg_tww1_0_200 ?a)
                 (not (not_blocked seg_tww1_0_200 ?a))
                 (at-segment ?a seg_tww1_0_200)
                 (not (facing ?a north))
                 (facing ?a south)

                 (not (blocked seg_pp_0_60 ?a))
                 (not_blocked seg_pp_0_60 ?a)

                 (blocked seg_twe1_0_200 ?a)
                 (not (not_blocked seg_twe1_0_200 ?a))
                )
)

(:action move_seg_tww1_0_200_seg_twe1_0_200_north_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww1_0_200)
                 (not_occupied seg_twe1_0_200)
                 (not_blocked seg_twe1_0_200 airplane_CFBEG)

                 (not_occupied seg_ppdoor_0_40)
              )

 :effect        (and
                 (not (occupied seg_tww1_0_200))
                 (not_occupied seg_tww1_0_200)
                 (not (at-segment ?a seg_tww1_0_200))

                 (occupied seg_twe1_0_200)
                 (not (not_occupied seg_twe1_0_200))
                 (blocked seg_twe1_0_200 ?a)
                 (not (not_blocked seg_twe1_0_200 ?a))
                 (at-segment ?a seg_twe1_0_200)
                 (not (facing ?a north))
                 (facing ?a south)

                 (not (blocked seg_tww2_0_50 ?a))
                 (not_blocked seg_tww2_0_50 ?a)

                 (blocked seg_ppdoor_0_40 ?a)
                 (not (not_blocked seg_ppdoor_0_40 ?a))
                )
)

(:action move_seg_twe1_0_200_seg_twe2_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_twe1_0_200)
                 (not_occupied seg_twe2_0_50)
                 (not_blocked seg_twe2_0_50 airplane_CFBEG)

              )

 :effect        (and
                 (not (occupied seg_twe1_0_200))
                 (not_occupied seg_twe1_0_200)
                 (not (at-segment ?a seg_twe1_0_200))

                 (occupied seg_twe2_0_50)
                 (not (not_occupied seg_twe2_0_50))
                 (blocked seg_twe2_0_50 ?a)
                 (not (not_blocked seg_twe2_0_50 ?a))
                 (at-segment ?a seg_twe2_0_50)

                 (not (blocked seg_ppdoor_0_40 ?a))
                 (not_blocked seg_ppdoor_0_40 ?a)
                 (not (blocked seg_tww1_0_200 ?a))
                 (not_blocked seg_tww1_0_200 ?a)

                )
)

(:action move_seg_twe2_0_50_seg_twe3_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_twe2_0_50)
                 (not_occupied seg_twe3_0_50)
                 (not_blocked seg_twe3_0_50 airplane_CFBEG)

              )

 :effect        (and
                 (not (occupied seg_twe2_0_50))
                 (not_occupied seg_twe2_0_50)
                 (not (at-segment ?a seg_twe2_0_50))

                 (occupied seg_twe3_0_50)
                 (not (not_occupied seg_twe3_0_50))
                 (blocked seg_twe3_0_50 ?a)
                 (not (not_blocked seg_twe3_0_50 ?a))
                 (at-segment ?a seg_twe3_0_50)

                 (not (blocked seg_twe1_0_200 ?a))
                 (not_blocked seg_twe1_0_200 ?a)

                )
)

(:action move_seg_twe3_0_50_seg_twe4_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_twe3_0_50)
                 (not_occupied seg_twe4_0_50)
                 (not_blocked seg_twe4_0_50 airplane_CFBEG)

              )

 :effect        (and
                 (not (occupied seg_twe3_0_50))
                 (not_occupied seg_twe3_0_50)
                 (not (at-segment ?a seg_twe3_0_50))

                 (occupied seg_twe4_0_50)
                 (not (not_occupied seg_twe4_0_50))
                 (blocked seg_twe4_0_50 ?a)
                 (not (not_blocked seg_twe4_0_50 ?a))
                 (at-segment ?a seg_twe4_0_50)

                 (not (blocked seg_twe2_0_50 ?a))
                 (not_blocked seg_twe2_0_50 ?a)

                )
)

(:action move_seg_twe4_0_50_seg_rwe_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_twe4_0_50)
                 (not_occupied seg_rwe_0_50)
                 (not_blocked seg_rwe_0_50 airplane_CFBEG)

              )

 :effect        (and
                 (not (occupied seg_twe4_0_50))
                 (not_occupied seg_twe4_0_50)
                 (not (at-segment ?a seg_twe4_0_50))

                 (occupied seg_rwe_0_50)
                 (not (not_occupied seg_rwe_0_50))
                 (blocked seg_rwe_0_50 ?a)
                 (not (not_blocked seg_rwe_0_50 ?a))
                 (at-segment ?a seg_rwe_0_50)

                 (not (blocked seg_twe3_0_50 ?a))
                 (not_blocked seg_twe3_0_50 ?a)

                )
)

(:action move_seg_rwe_0_50_seg_rw_0_400_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_rwe_0_50)
                 (not_occupied seg_rw_0_400)
                 (not_blocked seg_rw_0_400 airplane_CFBEG)

              )

 :effect        (and
                 (not (occupied seg_rwe_0_50))
                 (not_occupied seg_rwe_0_50)
                 (not (at-segment ?a seg_rwe_0_50))

                 (occupied seg_rw_0_400)
                 (not (not_occupied seg_rw_0_400))
                 (blocked seg_rw_0_400 ?a)
                 (not (not_blocked seg_rw_0_400 ?a))
                 (at-segment ?a seg_rw_0_400)

                 (not (blocked seg_twe4_0_50 ?a))
                 (not_blocked seg_twe4_0_50 ?a)

                )
)

(:action move_seg_rw_0_400_seg_rww_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_rw_0_400)
                 (not_occupied seg_rww_0_50)
                 (not_blocked seg_rww_0_50 airplane_CFBEG)

                 (not_occupied seg_rwe_0_50)
              )

 :effect        (and
                 (not (occupied seg_rw_0_400))
                 (not_occupied seg_rw_0_400)
                 (not (at-segment ?a seg_rw_0_400))

                 (occupied seg_rww_0_50)
                 (not (not_occupied seg_rww_0_50))
                 (blocked seg_rww_0_50 ?a)
                 (not (not_blocked seg_rww_0_50 ?a))
                 (at-segment ?a seg_rww_0_50)


                )
)

(:action move_seg_rww_0_50_seg_tww4_0_50_south_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_rww_0_50)
                 (not_occupied seg_tww4_0_50)
                 (not_blocked seg_tww4_0_50 airplane_CFBEG)

                 (not_occupied seg_rwtw1_0_10)
              )

 :effect        (and
                 (not (occupied seg_rww_0_50))
                 (not_occupied seg_rww_0_50)
                 (not (at-segment ?a seg_rww_0_50))

                 (occupied seg_tww4_0_50)
                 (not (not_occupied seg_tww4_0_50))
                 (blocked seg_tww4_0_50 ?a)
                 (not (not_blocked seg_tww4_0_50 ?a))
                 (at-segment ?a seg_tww4_0_50)
                 (not (facing ?a south))
                 (facing ?a north)

                 (not (blocked seg_rwe_0_50 ?a))
                 (not_blocked seg_rwe_0_50 ?a)
                 (not (blocked seg_rw_0_400 ?a))
                 (not_blocked seg_rw_0_400 ?a)

                 (blocked seg_rwtw1_0_10 ?a)
                 (not (not_blocked seg_rwtw1_0_10 ?a))
                )
)

(:action move_seg_tww4_0_50_seg_tww3_0_50_north_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww4_0_50)
                 (not_occupied seg_tww3_0_50)
                 (not_blocked seg_tww3_0_50 airplane_CFBEG)

              )

 :effect        (and
                 (not (occupied seg_tww4_0_50))
                 (not_occupied seg_tww4_0_50)
                 (not (at-segment ?a seg_tww4_0_50))

                 (occupied seg_tww3_0_50)
                 (not (not_occupied seg_tww3_0_50))
                 (blocked seg_tww3_0_50 ?a)
                 (not (not_blocked seg_tww3_0_50 ?a))
                 (at-segment ?a seg_tww3_0_50)

                 (not (blocked seg_rww_0_50 ?a))
                 (not_blocked seg_rww_0_50 ?a)
                 (not (blocked seg_rwtw1_0_10 ?a))
                 (not_blocked seg_rwtw1_0_10 ?a)

                )
)

(:action move_seg_tww3_0_50_seg_tww2_0_50_north_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww3_0_50)
                 (not_occupied seg_tww2_0_50)
                 (not_blocked seg_tww2_0_50 airplane_CFBEG)

              )

 :effect        (and
                 (not (occupied seg_tww3_0_50))
                 (not_occupied seg_tww3_0_50)
                 (not (at-segment ?a seg_tww3_0_50))

                 (occupied seg_tww2_0_50)
                 (not (not_occupied seg_tww2_0_50))
                 (blocked seg_tww2_0_50 ?a)
                 (not (not_blocked seg_tww2_0_50 ?a))
                 (at-segment ?a seg_tww2_0_50)

                 (not (blocked seg_tww4_0_50 ?a))
                 (not_blocked seg_tww4_0_50 ?a)

                )
)

(:action move_seg_tww2_0_50_seg_tww1_0_200_north_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww2_0_50)
                 (not_occupied seg_tww1_0_200)
                 (not_blocked seg_tww1_0_200 airplane_CFBEG)

              )

 :effect        (and
                 (not (occupied seg_tww2_0_50))
                 (not_occupied seg_tww2_0_50)
                 (not (at-segment ?a seg_tww2_0_50))

                 (occupied seg_tww1_0_200)
                 (not (not_occupied seg_tww1_0_200))
                 (blocked seg_tww1_0_200 ?a)
                 (not (not_blocked seg_tww1_0_200 ?a))
                 (at-segment ?a seg_tww1_0_200)

                 (not (blocked seg_tww3_0_50 ?a))
                 (not_blocked seg_tww3_0_50 ?a)

                )
)

(:action move_seg_tww1_0_200_seg_ppdoor_0_40_north_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww1_0_200)
                 (not_occupied seg_ppdoor_0_40)
                 (not_blocked seg_ppdoor_0_40 airplane_CFBEG)

                 (not_occupied seg_twe1_0_200)
              )

 :effect        (and
                 (not (occupied seg_tww1_0_200))
                 (not_occupied seg_tww1_0_200)
                 (not (at-segment ?a seg_tww1_0_200))

                 (occupied seg_ppdoor_0_40)
                 (not (not_occupied seg_ppdoor_0_40))
                 (blocked seg_ppdoor_0_40 ?a)
                 (not (not_blocked seg_ppdoor_0_40 ?a))
                 (at-segment ?a seg_ppdoor_0_40)
                 (not (facing ?a north))
                 (facing ?a south)

                 (not (blocked seg_tww2_0_50 ?a))
                 (not_blocked seg_tww2_0_50 ?a)

                 (blocked seg_twe1_0_200 ?a)
                 (not (not_blocked seg_twe1_0_200 ?a))
                )
)

(:action move_seg_ppdoor_0_40_seg_pp_0_60_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_ppdoor_0_40)
                 (not_occupied seg_pp_0_60)
                 (not_blocked seg_pp_0_60 airplane_CFBEG)

              )

 :effect        (and
                 (not (occupied seg_ppdoor_0_40))
                 (not_occupied seg_ppdoor_0_40)
                 (not (at-segment ?a seg_ppdoor_0_40))

                 (occupied seg_pp_0_60)
                 (not (not_occupied seg_pp_0_60))
                 (blocked seg_pp_0_60 ?a)
                 (not (not_blocked seg_pp_0_60 ?a))
                 (at-segment ?a seg_pp_0_60)

                 (not (blocked seg_tww1_0_200 ?a))
                 (not_blocked seg_tww1_0_200 ?a)
                 (not (blocked seg_twe1_0_200 ?a))
                 (not_blocked seg_twe1_0_200 ?a)

                )
)


(:action takeoff_seg_rww_0_50_north

 :parameters (?a - airplane)

 :precondition (and (at-segment ?a seg_rww_0_50)
                    (facing ?a north)
                    (is-moving ?a)
               )

 :effect (and (not (occupied seg_rww_0_50))
              (not_occupied seg_rww_0_50)
              (not (blocked seg_rww_0_50 ?a))
              (not_blocked seg_rww_0_50 ?a)
              (not (at-segment ?a seg_rww_0_50))
              (airborne ?a seg_rww_0_50)
              (not (is-moving ?a ))
              (not (blocked seg_tww4_0_50 ?a))
              (not_blocked seg_tww4_0_50 ?a)
         )
)

(:action takeoff_seg_rwe_0_50_south

 :parameters (?a - airplane)

 :precondition (and (at-segment ?a seg_rwe_0_50)
                    (facing ?a south)
                    (is-moving ?a)
               )

 :effect (and (not (occupied seg_rwe_0_50))
              (not_occupied seg_rwe_0_50)
              (not (blocked seg_rwe_0_50 ?a))
              (not_blocked seg_rwe_0_50 ?a)
              (not (at-segment ?a seg_rwe_0_50))
              (airborne ?a seg_rwe_0_50)
              (not (is-moving ?a ))
              (not (blocked seg_twe4_0_50 ?a))
              (not_blocked seg_twe4_0_50 ?a)
         )
)


(:action park_seg_pp_0_60_north
 :parameters (?a - airplane)
 :precondition (and (at-segment ?a seg_pp_0_60)
                    (facing ?a north)
                    (is-moving ?a)
               )
 :effect (and (is-parked ?a seg_pp_0_60)
              (not (is-moving ?a))
         )
)
(:action park_seg_pp_0_60_south
 :parameters (?a - airplane)
 :precondition (and (at-segment ?a seg_pp_0_60)
                    (facing ?a south)
                    (is-moving ?a)
               )
 :effect (and (is-parked ?a seg_pp_0_60)
              (not (is-moving ?a))
              (not (blocked seg_ppdoor_0_40 ?a))
              (not_blocked seg_ppdoor_0_40 ?a)
         )
)
(:action startup_seg_pp_0_60_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_pp_0_60)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
         )
)
(:action startup_seg_pp_0_60_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_pp_0_60)
                    (not_occupied seg_ppdoor_0_40)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_ppdoor_0_40 ?a)
                    (not (not_blocked seg_ppdoor_0_40 ?a))
         )
)
(:action startup_seg_ppdoor_0_40_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_ppdoor_0_40)
                    (not_occupied seg_pp_0_60)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_pp_0_60 ?a)
                    (not (not_blocked seg_pp_0_60 ?a))
         )
)
(:action startup_seg_ppdoor_0_40_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_ppdoor_0_40)
                    (not_occupied seg_tww1_0_200)
                    (not_occupied seg_twe1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww1_0_200 ?a)
                    (not (not_blocked seg_tww1_0_200 ?a))
                    (blocked seg_twe1_0_200 ?a)
                    (not (not_blocked seg_twe1_0_200 ?a))
         )
)
(:action startup_seg_tww1_0_200_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww1_0_200)
                    (not_occupied seg_tww2_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww2_0_50 ?a)
                    (not (not_blocked seg_tww2_0_50 ?a))
         )
)
(:action startup_seg_tww1_0_200_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww1_0_200)
                    (not_occupied seg_ppdoor_0_40)
                    (not_occupied seg_twe1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_ppdoor_0_40 ?a)
                    (not (not_blocked seg_ppdoor_0_40 ?a))
                    (blocked seg_twe1_0_200 ?a)
                    (not (not_blocked seg_twe1_0_200 ?a))
         )
)
(:action startup_seg_twe1_0_200_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe1_0_200)
                    (not_occupied seg_twe2_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe2_0_50 ?a)
                    (not (not_blocked seg_twe2_0_50 ?a))
         )
)
(:action startup_seg_twe1_0_200_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe1_0_200)
                    (not_occupied seg_ppdoor_0_40)
                    (not_occupied seg_tww1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_ppdoor_0_40 ?a)
                    (not (not_blocked seg_ppdoor_0_40 ?a))
                    (blocked seg_tww1_0_200 ?a)
                    (not (not_blocked seg_tww1_0_200 ?a))
         )
)
(:action startup_seg_tww2_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww2_0_50)
                    (not_occupied seg_tww3_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww3_0_50 ?a)
                    (not (not_blocked seg_tww3_0_50 ?a))
         )
)
(:action startup_seg_tww2_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww2_0_50)
                    (not_occupied seg_tww1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww1_0_200 ?a)
                    (not (not_blocked seg_tww1_0_200 ?a))
         )
)
(:action startup_seg_tww3_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww3_0_50)
                    (not_occupied seg_tww4_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww4_0_50 ?a)
                    (not (not_blocked seg_tww4_0_50 ?a))
         )
)
(:action startup_seg_tww3_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww3_0_50)
                    (not_occupied seg_tww2_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww2_0_50 ?a)
                    (not (not_blocked seg_tww2_0_50 ?a))
         )
)
(:action startup_seg_tww4_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww4_0_50)
                    (not_occupied seg_rww_0_50)
                    (not_occupied seg_rwtw1_0_10)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_rww_0_50 ?a)
                    (not (not_blocked seg_rww_0_50 ?a))
                    (blocked seg_rwtw1_0_10 ?a)
                    (not (not_blocked seg_rwtw1_0_10 ?a))
         )
)
(:action startup_seg_tww4_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww4_0_50)
                    (not_occupied seg_tww3_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww3_0_50 ?a)
                    (not (not_blocked seg_tww3_0_50 ?a))
         )
)
(:action startup_seg_twe4_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe4_0_50)
                    (not_occupied seg_rwte1_0_10)
                    (not_occupied seg_rwe_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_rwte1_0_10 ?a)
                    (not (not_blocked seg_rwte1_0_10 ?a))
                    (blocked seg_rwe_0_50 ?a)
                    (not (not_blocked seg_rwe_0_50 ?a))
         )
)
(:action startup_seg_twe4_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe4_0_50)
                    (not_occupied seg_twe3_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe3_0_50 ?a)
                    (not (not_blocked seg_twe3_0_50 ?a))
         )
)
(:action startup_seg_twe3_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe3_0_50)
                    (not_occupied seg_twe4_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe4_0_50 ?a)
                    (not (not_blocked seg_twe4_0_50 ?a))
         )
)
(:action startup_seg_twe3_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe3_0_50)
                    (not_occupied seg_twe2_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe2_0_50 ?a)
                    (not (not_blocked seg_twe2_0_50 ?a))
         )
)
(:action startup_seg_twe2_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe2_0_50)
                    (not_occupied seg_twe3_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe3_0_50 ?a)
                    (not (not_blocked seg_twe3_0_50 ?a))
         )
)
(:action startup_seg_twe2_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe2_0_50)
                    (not_occupied seg_twe1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe1_0_200 ?a)
                    (not (not_blocked seg_twe1_0_200 ?a))
         )
)
)","(define (problem PROBLEM_X)

(:domain airport_fixed_structure)

(:objects
)

(:init

      (at-segment airplane_CFBEG seg_rw_0_400)

      (blocked seg_rw_0_400 airplane_CFBEG)
      (blocked seg_rwe_0_50 airplane_CFBEG)

      (facing airplane_CFBEG south)

      (has-type airplane_CFBEG medium)

      (is-moving airplane_CFBEG)



      (not_blocked seg_pp_0_60 airplane_CFBEG)
      (not_blocked seg_ppdoor_0_40 airplane_CFBEG)
      (not_blocked seg_tww1_0_200 airplane_CFBEG)
      (not_blocked seg_twe1_0_200 airplane_CFBEG)
      (not_blocked seg_tww2_0_50 airplane_CFBEG)
      (not_blocked seg_tww3_0_50 airplane_CFBEG)
      (not_blocked seg_tww4_0_50 airplane_CFBEG)
      (not_blocked seg_rww_0_50 airplane_CFBEG)
      (not_blocked seg_rwtw1_0_10 airplane_CFBEG)
      (not_blocked seg_twe4_0_50 airplane_CFBEG)
      (not_blocked seg_rwte1_0_10 airplane_CFBEG)
      (not_blocked seg_twe3_0_50 airplane_CFBEG)
      (not_blocked seg_twe2_0_50 airplane_CFBEG)
      (not_blocked seg_rwte2_0_10 airplane_CFBEG)
      (not_blocked seg_rwtw2_0_10 airplane_CFBEG)

      (not_occupied seg_pp_0_60)
      (not_occupied seg_ppdoor_0_40)
      (not_occupied seg_tww1_0_200)
      (not_occupied seg_twe1_0_200)
      (not_occupied seg_tww2_0_50)
      (not_occupied seg_tww3_0_50)
      (not_occupied seg_tww4_0_50)
      (not_occupied seg_rww_0_50)
      (not_occupied seg_rwtw1_0_10)
      (not_occupied seg_rwe_0_50)
      (not_occupied seg_twe4_0_50)
      (not_occupied seg_rwte1_0_10)
      (not_occupied seg_twe3_0_50)
      (not_occupied seg_twe2_0_50)
      (not_occupied seg_rwte2_0_10)
      (not_occupied seg_rwtw2_0_10)

      (occupied seg_rw_0_400)
)

(:goal
      (and



            (is-parked airplane_CFBEG seg_pp_0_60)
      )
)
)","move_seg_rw_0_400_seg_rww_0_50_south_south_medium airplane_cfbeg (1)
move_seg_rww_0_50_seg_tww4_0_50_south_north_medium airplane_cfbeg (1)
move_seg_tww4_0_50_seg_tww3_0_50_north_north_medium airplane_cfbeg (1)
move_seg_tww3_0_50_seg_tww2_0_50_north_north_medium airplane_cfbeg (1)
move_seg_tww2_0_50_seg_tww1_0_200_north_north_medium airplane_cfbeg (1)
move_seg_tww1_0_200_seg_ppdoor_0_40_north_south_medium airplane_cfbeg (1)
move_seg_ppdoor_0_40_seg_pp_0_60_south_south_medium airplane_cfbeg (1)
park_seg_pp_0_60_south airplane_cfbeg (1)"
airport,"(define (domain airport_fixed_structure)

(:requirements :typing)

(:types airplane segment direction airplanetype)

(:constants
                north
                south - direction

                light
                medium
                heavy - airplanetype

                seg_pp_0_60
                seg_ppdoor_0_40
                seg_tww1_0_200
                seg_twe1_0_200
                seg_tww2_0_50
                seg_tww3_0_50
                seg_tww4_0_50
                seg_rww_0_50
                seg_rwtw1_0_10
                seg_rw_0_400
                seg_rwe_0_50
                seg_twe4_0_50
                seg_rwte1_0_10
                seg_twe3_0_50
                seg_twe2_0_50
                seg_rwte2_0_10
                seg_rwtw2_0_10 - segment

                airplane_DAEWH - airplane
)

(:predicates
                ;; airport information
                (has-type ?a - airplane ?t - airplanetype)
                ;; plane a has type t
                (at-segment ?a - airplane ?s - segment)
                ;; planes are at segments, ie at their end in driving direction
                (facing ?a - airplane ?d - direction)
                ;; planes face into their driving direction

                ;; how the planes affect the airport
                (occupied ?s - segment)
                ;; a plane is in here
                (not_occupied ?s - segment)
                (blocked ?s - segment ?a - airplane)
                ;; segment s is blocked if it is endangered by plane p
                (not_blocked ?s - segment ?a - airplane)

                ;; an airplane may lineup on segment s when facing d
                (is-start-runway ?s - segment ?d - direction)

                ;; airplane a is starting from runway s
                (airborne ?a - airplane ?s - segment)

                (is-moving ?a - airplane)
                (is-pushing ?a - airplane)
                (is-parked ?a - airplane ?s - segment)

)

(:action move_seg_pp_0_60_seg_ppdoor_0_40_north_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_pp_0_60)
                 (not_occupied seg_ppdoor_0_40)
                 (not_blocked seg_ppdoor_0_40 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_pp_0_60))
                 (not_occupied seg_pp_0_60)
                 (not (at-segment ?a seg_pp_0_60))

                 (occupied seg_ppdoor_0_40)
                 (not (not_occupied seg_ppdoor_0_40))
                 (blocked seg_ppdoor_0_40 ?a)
                 (not (not_blocked seg_ppdoor_0_40 ?a))
                 (at-segment ?a seg_ppdoor_0_40)


                )
)

(:action move_seg_ppdoor_0_40_seg_tww1_0_200_north_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_ppdoor_0_40)
                 (not_occupied seg_tww1_0_200)
                 (not_blocked seg_tww1_0_200 airplane_DAEWH)

                 (not_occupied seg_twe1_0_200)
              )

 :effect        (and
                 (not (occupied seg_ppdoor_0_40))
                 (not_occupied seg_ppdoor_0_40)
                 (not (at-segment ?a seg_ppdoor_0_40))

                 (occupied seg_tww1_0_200)
                 (not (not_occupied seg_tww1_0_200))
                 (blocked seg_tww1_0_200 ?a)
                 (not (not_blocked seg_tww1_0_200 ?a))
                 (at-segment ?a seg_tww1_0_200)
                 (not (facing ?a north))
                 (facing ?a south)

                 (not (blocked seg_pp_0_60 ?a))
                 (not_blocked seg_pp_0_60 ?a)

                 (blocked seg_twe1_0_200 ?a)
                 (not (not_blocked seg_twe1_0_200 ?a))
                )
)

(:action move_seg_tww1_0_200_seg_twe1_0_200_north_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww1_0_200)
                 (not_occupied seg_twe1_0_200)
                 (not_blocked seg_twe1_0_200 airplane_DAEWH)

                 (not_occupied seg_ppdoor_0_40)
              )

 :effect        (and
                 (not (occupied seg_tww1_0_200))
                 (not_occupied seg_tww1_0_200)
                 (not (at-segment ?a seg_tww1_0_200))

                 (occupied seg_twe1_0_200)
                 (not (not_occupied seg_twe1_0_200))
                 (blocked seg_twe1_0_200 ?a)
                 (not (not_blocked seg_twe1_0_200 ?a))
                 (at-segment ?a seg_twe1_0_200)
                 (not (facing ?a north))
                 (facing ?a south)

                 (not (blocked seg_tww2_0_50 ?a))
                 (not_blocked seg_tww2_0_50 ?a)

                 (blocked seg_ppdoor_0_40 ?a)
                 (not (not_blocked seg_ppdoor_0_40 ?a))
                )
)

(:action move_seg_twe1_0_200_seg_twe2_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_twe1_0_200)
                 (not_occupied seg_twe2_0_50)
                 (not_blocked seg_twe2_0_50 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_twe1_0_200))
                 (not_occupied seg_twe1_0_200)
                 (not (at-segment ?a seg_twe1_0_200))

                 (occupied seg_twe2_0_50)
                 (not (not_occupied seg_twe2_0_50))
                 (blocked seg_twe2_0_50 ?a)
                 (not (not_blocked seg_twe2_0_50 ?a))
                 (at-segment ?a seg_twe2_0_50)

                 (not (blocked seg_ppdoor_0_40 ?a))
                 (not_blocked seg_ppdoor_0_40 ?a)
                 (not (blocked seg_tww1_0_200 ?a))
                 (not_blocked seg_tww1_0_200 ?a)

                )
)

(:action move_seg_twe2_0_50_seg_twe3_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_twe2_0_50)
                 (not_occupied seg_twe3_0_50)
                 (not_blocked seg_twe3_0_50 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_twe2_0_50))
                 (not_occupied seg_twe2_0_50)
                 (not (at-segment ?a seg_twe2_0_50))

                 (occupied seg_twe3_0_50)
                 (not (not_occupied seg_twe3_0_50))
                 (blocked seg_twe3_0_50 ?a)
                 (not (not_blocked seg_twe3_0_50 ?a))
                 (at-segment ?a seg_twe3_0_50)

                 (not (blocked seg_twe1_0_200 ?a))
                 (not_blocked seg_twe1_0_200 ?a)

                )
)

(:action move_seg_twe3_0_50_seg_twe4_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_twe3_0_50)
                 (not_occupied seg_twe4_0_50)
                 (not_blocked seg_twe4_0_50 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_twe3_0_50))
                 (not_occupied seg_twe3_0_50)
                 (not (at-segment ?a seg_twe3_0_50))

                 (occupied seg_twe4_0_50)
                 (not (not_occupied seg_twe4_0_50))
                 (blocked seg_twe4_0_50 ?a)
                 (not (not_blocked seg_twe4_0_50 ?a))
                 (at-segment ?a seg_twe4_0_50)

                 (not (blocked seg_twe2_0_50 ?a))
                 (not_blocked seg_twe2_0_50 ?a)

                )
)

(:action move_seg_twe4_0_50_seg_rwe_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_twe4_0_50)
                 (not_occupied seg_rwe_0_50)
                 (not_blocked seg_rwe_0_50 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_twe4_0_50))
                 (not_occupied seg_twe4_0_50)
                 (not (at-segment ?a seg_twe4_0_50))

                 (occupied seg_rwe_0_50)
                 (not (not_occupied seg_rwe_0_50))
                 (blocked seg_rwe_0_50 ?a)
                 (not (not_blocked seg_rwe_0_50 ?a))
                 (at-segment ?a seg_rwe_0_50)

                 (not (blocked seg_twe3_0_50 ?a))
                 (not_blocked seg_twe3_0_50 ?a)

                )
)

(:action move_seg_rwe_0_50_seg_rw_0_400_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_rwe_0_50)
                 (not_occupied seg_rw_0_400)
                 (not_blocked seg_rw_0_400 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_rwe_0_50))
                 (not_occupied seg_rwe_0_50)
                 (not (at-segment ?a seg_rwe_0_50))

                 (occupied seg_rw_0_400)
                 (not (not_occupied seg_rw_0_400))
                 (blocked seg_rw_0_400 ?a)
                 (not (not_blocked seg_rw_0_400 ?a))
                 (at-segment ?a seg_rw_0_400)

                 (not (blocked seg_twe4_0_50 ?a))
                 (not_blocked seg_twe4_0_50 ?a)

                )
)

(:action move_seg_rw_0_400_seg_rww_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_rw_0_400)
                 (not_occupied seg_rww_0_50)
                 (not_blocked seg_rww_0_50 airplane_DAEWH)

                 (not_occupied seg_rwe_0_50)
              )

 :effect        (and
                 (not (occupied seg_rw_0_400))
                 (not_occupied seg_rw_0_400)
                 (not (at-segment ?a seg_rw_0_400))

                 (occupied seg_rww_0_50)
                 (not (not_occupied seg_rww_0_50))
                 (blocked seg_rww_0_50 ?a)
                 (not (not_blocked seg_rww_0_50 ?a))
                 (at-segment ?a seg_rww_0_50)


                )
)

(:action move_seg_rww_0_50_seg_tww4_0_50_south_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_rww_0_50)
                 (not_occupied seg_tww4_0_50)
                 (not_blocked seg_tww4_0_50 airplane_DAEWH)

                 (not_occupied seg_rwtw1_0_10)
              )

 :effect        (and
                 (not (occupied seg_rww_0_50))
                 (not_occupied seg_rww_0_50)
                 (not (at-segment ?a seg_rww_0_50))

                 (occupied seg_tww4_0_50)
                 (not (not_occupied seg_tww4_0_50))
                 (blocked seg_tww4_0_50 ?a)
                 (not (not_blocked seg_tww4_0_50 ?a))
                 (at-segment ?a seg_tww4_0_50)
                 (not (facing ?a south))
                 (facing ?a north)

                 (not (blocked seg_rwe_0_50 ?a))
                 (not_blocked seg_rwe_0_50 ?a)
                 (not (blocked seg_rw_0_400 ?a))
                 (not_blocked seg_rw_0_400 ?a)

                 (blocked seg_rwtw1_0_10 ?a)
                 (not (not_blocked seg_rwtw1_0_10 ?a))
                )
)

(:action move_seg_tww4_0_50_seg_tww3_0_50_north_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww4_0_50)
                 (not_occupied seg_tww3_0_50)
                 (not_blocked seg_tww3_0_50 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_tww4_0_50))
                 (not_occupied seg_tww4_0_50)
                 (not (at-segment ?a seg_tww4_0_50))

                 (occupied seg_tww3_0_50)
                 (not (not_occupied seg_tww3_0_50))
                 (blocked seg_tww3_0_50 ?a)
                 (not (not_blocked seg_tww3_0_50 ?a))
                 (at-segment ?a seg_tww3_0_50)

                 (not (blocked seg_rww_0_50 ?a))
                 (not_blocked seg_rww_0_50 ?a)
                 (not (blocked seg_rwtw1_0_10 ?a))
                 (not_blocked seg_rwtw1_0_10 ?a)

                )
)

(:action move_seg_tww3_0_50_seg_tww2_0_50_north_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww3_0_50)
                 (not_occupied seg_tww2_0_50)
                 (not_blocked seg_tww2_0_50 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_tww3_0_50))
                 (not_occupied seg_tww3_0_50)
                 (not (at-segment ?a seg_tww3_0_50))

                 (occupied seg_tww2_0_50)
                 (not (not_occupied seg_tww2_0_50))
                 (blocked seg_tww2_0_50 ?a)
                 (not (not_blocked seg_tww2_0_50 ?a))
                 (at-segment ?a seg_tww2_0_50)

                 (not (blocked seg_tww4_0_50 ?a))
                 (not_blocked seg_tww4_0_50 ?a)

                )
)

(:action move_seg_tww2_0_50_seg_tww1_0_200_north_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww2_0_50)
                 (not_occupied seg_tww1_0_200)
                 (not_blocked seg_tww1_0_200 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_tww2_0_50))
                 (not_occupied seg_tww2_0_50)
                 (not (at-segment ?a seg_tww2_0_50))

                 (occupied seg_tww1_0_200)
                 (not (not_occupied seg_tww1_0_200))
                 (blocked seg_tww1_0_200 ?a)
                 (not (not_blocked seg_tww1_0_200 ?a))
                 (at-segment ?a seg_tww1_0_200)

                 (not (blocked seg_tww3_0_50 ?a))
                 (not_blocked seg_tww3_0_50 ?a)

                )
)

(:action move_seg_tww1_0_200_seg_ppdoor_0_40_north_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww1_0_200)
                 (not_occupied seg_ppdoor_0_40)
                 (not_blocked seg_ppdoor_0_40 airplane_DAEWH)

                 (not_occupied seg_twe1_0_200)
              )

 :effect        (and
                 (not (occupied seg_tww1_0_200))
                 (not_occupied seg_tww1_0_200)
                 (not (at-segment ?a seg_tww1_0_200))

                 (occupied seg_ppdoor_0_40)
                 (not (not_occupied seg_ppdoor_0_40))
                 (blocked seg_ppdoor_0_40 ?a)
                 (not (not_blocked seg_ppdoor_0_40 ?a))
                 (at-segment ?a seg_ppdoor_0_40)
                 (not (facing ?a north))
                 (facing ?a south)

                 (not (blocked seg_tww2_0_50 ?a))
                 (not_blocked seg_tww2_0_50 ?a)

                 (blocked seg_twe1_0_200 ?a)
                 (not (not_blocked seg_twe1_0_200 ?a))
                )
)

(:action move_seg_ppdoor_0_40_seg_pp_0_60_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_ppdoor_0_40)
                 (not_occupied seg_pp_0_60)
                 (not_blocked seg_pp_0_60 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_ppdoor_0_40))
                 (not_occupied seg_ppdoor_0_40)
                 (not (at-segment ?a seg_ppdoor_0_40))

                 (occupied seg_pp_0_60)
                 (not (not_occupied seg_pp_0_60))
                 (blocked seg_pp_0_60 ?a)
                 (not (not_blocked seg_pp_0_60 ?a))
                 (at-segment ?a seg_pp_0_60)

                 (not (blocked seg_tww1_0_200 ?a))
                 (not_blocked seg_tww1_0_200 ?a)
                 (not (blocked seg_twe1_0_200 ?a))
                 (not_blocked seg_twe1_0_200 ?a)

                )
)

(:action pushback_seg_pp_0_60_seg_ppdoor_0_40_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-pushing ?a)
                 (facing ?a south)
                 (at-segment ?a seg_pp_0_60)
                 (not_occupied seg_ppdoor_0_40)
                 (not_blocked seg_ppdoor_0_40 airplane_DAEWH)
                )

 :effect        (and
                 (not (occupied seg_pp_0_60))
                 (not_occupied seg_pp_0_60)
                 (not (blocked seg_pp_0_60 ?a))
                 (not_blocked seg_pp_0_60 ?a)
                 (not (at-segment ?a seg_pp_0_60))

                 (occupied seg_ppdoor_0_40)
                 (not (not_occupied seg_ppdoor_0_40))
                 (blocked seg_ppdoor_0_40 ?a)
                 (not (not_blocked seg_ppdoor_0_40 ?a))
                 (at-segment ?a seg_ppdoor_0_40)

                )
)

(:action pushback_seg_ppdoor_0_40_seg_tww1_0_200_south_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-pushing ?a)
                 (facing ?a south)
                 (at-segment ?a seg_ppdoor_0_40)
                 (not_occupied seg_tww1_0_200)
                 (not_blocked seg_tww1_0_200 airplane_DAEWH)
                )

 :effect        (and
                 (not (occupied seg_ppdoor_0_40))
                 (not_occupied seg_ppdoor_0_40)
                 (not (blocked seg_ppdoor_0_40 ?a))
                 (not_blocked seg_ppdoor_0_40 ?a)
                 (not (at-segment ?a seg_ppdoor_0_40))

                 (occupied seg_tww1_0_200)
                 (not (not_occupied seg_tww1_0_200))
                 (blocked seg_tww1_0_200 ?a)
                 (not (not_blocked seg_tww1_0_200 ?a))
                 (at-segment ?a seg_tww1_0_200)
                 (not (facing ?a south))
                 (facing ?a north)

                )
)


(:action takeoff_seg_rww_0_50_north

 :parameters (?a - airplane)

 :precondition (and (at-segment ?a seg_rww_0_50)
                    (facing ?a north)
                    (is-moving ?a)
               )

 :effect (and (not (occupied seg_rww_0_50))
              (not_occupied seg_rww_0_50)
              (not (blocked seg_rww_0_50 ?a))
              (not_blocked seg_rww_0_50 ?a)
              (not (at-segment ?a seg_rww_0_50))
              (airborne ?a seg_rww_0_50)
              (not (is-moving ?a ))
              (not (blocked seg_tww4_0_50 ?a))
              (not_blocked seg_tww4_0_50 ?a)
         )
)

(:action takeoff_seg_rwe_0_50_south

 :parameters (?a - airplane)

 :precondition (and (at-segment ?a seg_rwe_0_50)
                    (facing ?a south)
                    (is-moving ?a)
               )

 :effect (and (not (occupied seg_rwe_0_50))
              (not_occupied seg_rwe_0_50)
              (not (blocked seg_rwe_0_50 ?a))
              (not_blocked seg_rwe_0_50 ?a)
              (not (at-segment ?a seg_rwe_0_50))
              (airborne ?a seg_rwe_0_50)
              (not (is-moving ?a ))
              (not (blocked seg_twe4_0_50 ?a))
              (not_blocked seg_twe4_0_50 ?a)
         )
)


(:action park_seg_pp_0_60_north
 :parameters (?a - airplane)
 :precondition (and (at-segment ?a seg_pp_0_60)
                    (facing ?a north)
                    (is-moving ?a)
               )
 :effect (and (is-parked ?a seg_pp_0_60)
              (not (is-moving ?a))
         )
)
(:action park_seg_pp_0_60_south
 :parameters (?a - airplane)
 :precondition (and (at-segment ?a seg_pp_0_60)
                    (facing ?a south)
                    (is-moving ?a)
               )
 :effect (and (is-parked ?a seg_pp_0_60)
              (not (is-moving ?a))
              (not (blocked seg_ppdoor_0_40 ?a))
              (not_blocked seg_ppdoor_0_40 ?a)
         )
)
(:action startup_seg_pp_0_60_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_pp_0_60)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
         )
)
(:action startup_seg_pp_0_60_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_pp_0_60)
                    (not_occupied seg_ppdoor_0_40)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_ppdoor_0_40 ?a)
                    (not (not_blocked seg_ppdoor_0_40 ?a))
         )
)
(:action startup_seg_ppdoor_0_40_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_ppdoor_0_40)
                    (not_occupied seg_pp_0_60)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_pp_0_60 ?a)
                    (not (not_blocked seg_pp_0_60 ?a))
         )
)
(:action startup_seg_ppdoor_0_40_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_ppdoor_0_40)
                    (not_occupied seg_tww1_0_200)
                    (not_occupied seg_twe1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww1_0_200 ?a)
                    (not (not_blocked seg_tww1_0_200 ?a))
                    (blocked seg_twe1_0_200 ?a)
                    (not (not_blocked seg_twe1_0_200 ?a))
         )
)
(:action startup_seg_tww1_0_200_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww1_0_200)
                    (not_occupied seg_tww2_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww2_0_50 ?a)
                    (not (not_blocked seg_tww2_0_50 ?a))
         )
)
(:action startup_seg_tww1_0_200_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww1_0_200)
                    (not_occupied seg_ppdoor_0_40)
                    (not_occupied seg_twe1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_ppdoor_0_40 ?a)
                    (not (not_blocked seg_ppdoor_0_40 ?a))
                    (blocked seg_twe1_0_200 ?a)
                    (not (not_blocked seg_twe1_0_200 ?a))
         )
)
(:action startup_seg_twe1_0_200_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe1_0_200)
                    (not_occupied seg_twe2_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe2_0_50 ?a)
                    (not (not_blocked seg_twe2_0_50 ?a))
         )
)
(:action startup_seg_twe1_0_200_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe1_0_200)
                    (not_occupied seg_ppdoor_0_40)
                    (not_occupied seg_tww1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_ppdoor_0_40 ?a)
                    (not (not_blocked seg_ppdoor_0_40 ?a))
                    (blocked seg_tww1_0_200 ?a)
                    (not (not_blocked seg_tww1_0_200 ?a))
         )
)
(:action startup_seg_tww2_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww2_0_50)
                    (not_occupied seg_tww3_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww3_0_50 ?a)
                    (not (not_blocked seg_tww3_0_50 ?a))
         )
)
(:action startup_seg_tww2_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww2_0_50)
                    (not_occupied seg_tww1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww1_0_200 ?a)
                    (not (not_blocked seg_tww1_0_200 ?a))
         )
)
(:action startup_seg_tww3_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww3_0_50)
                    (not_occupied seg_tww4_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww4_0_50 ?a)
                    (not (not_blocked seg_tww4_0_50 ?a))
         )
)
(:action startup_seg_tww3_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww3_0_50)
                    (not_occupied seg_tww2_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww2_0_50 ?a)
                    (not (not_blocked seg_tww2_0_50 ?a))
         )
)
(:action startup_seg_tww4_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww4_0_50)
                    (not_occupied seg_rww_0_50)
                    (not_occupied seg_rwtw1_0_10)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_rww_0_50 ?a)
                    (not (not_blocked seg_rww_0_50 ?a))
                    (blocked seg_rwtw1_0_10 ?a)
                    (not (not_blocked seg_rwtw1_0_10 ?a))
         )
)
(:action startup_seg_tww4_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww4_0_50)
                    (not_occupied seg_tww3_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww3_0_50 ?a)
                    (not (not_blocked seg_tww3_0_50 ?a))
         )
)
(:action startup_seg_twe4_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe4_0_50)
                    (not_occupied seg_rwte1_0_10)
                    (not_occupied seg_rwe_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_rwte1_0_10 ?a)
                    (not (not_blocked seg_rwte1_0_10 ?a))
                    (blocked seg_rwe_0_50 ?a)
                    (not (not_blocked seg_rwe_0_50 ?a))
         )
)
(:action startup_seg_twe4_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe4_0_50)
                    (not_occupied seg_twe3_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe3_0_50 ?a)
                    (not (not_blocked seg_twe3_0_50 ?a))
         )
)
(:action startup_seg_twe3_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe3_0_50)
                    (not_occupied seg_twe4_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe4_0_50 ?a)
                    (not (not_blocked seg_twe4_0_50 ?a))
         )
)
(:action startup_seg_twe3_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe3_0_50)
                    (not_occupied seg_twe2_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe2_0_50 ?a)
                    (not (not_blocked seg_twe2_0_50 ?a))
         )
)
(:action startup_seg_twe2_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe2_0_50)
                    (not_occupied seg_twe3_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe3_0_50 ?a)
                    (not (not_blocked seg_twe3_0_50 ?a))
         )
)
(:action startup_seg_twe2_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe2_0_50)
                    (not_occupied seg_twe1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe1_0_200 ?a)
                    (not (not_blocked seg_twe1_0_200 ?a))
         )
)
)","(define (problem PROBLEM_X)

(:domain airport_fixed_structure)

(:objects
)

(:init

      (at-segment airplane_DAEWH seg_pp_0_60)

      (blocked seg_pp_0_60 airplane_DAEWH)

      (facing airplane_DAEWH south)

      (has-type airplane_DAEWH medium)


      (is-pushing airplane_DAEWH)


      (not_blocked seg_ppdoor_0_40 airplane_DAEWH)
      (not_blocked seg_tww1_0_200 airplane_DAEWH)
      (not_blocked seg_twe1_0_200 airplane_DAEWH)
      (not_blocked seg_tww2_0_50 airplane_DAEWH)
      (not_blocked seg_tww3_0_50 airplane_DAEWH)
      (not_blocked seg_tww4_0_50 airplane_DAEWH)
      (not_blocked seg_rww_0_50 airplane_DAEWH)
      (not_blocked seg_rwtw1_0_10 airplane_DAEWH)
      (not_blocked seg_rw_0_400 airplane_DAEWH)
      (not_blocked seg_rwe_0_50 airplane_DAEWH)
      (not_blocked seg_twe4_0_50 airplane_DAEWH)
      (not_blocked seg_rwte1_0_10 airplane_DAEWH)
      (not_blocked seg_twe3_0_50 airplane_DAEWH)
      (not_blocked seg_twe2_0_50 airplane_DAEWH)
      (not_blocked seg_rwte2_0_10 airplane_DAEWH)
      (not_blocked seg_rwtw2_0_10 airplane_DAEWH)

      (not_occupied seg_ppdoor_0_40)
      (not_occupied seg_tww1_0_200)
      (not_occupied seg_twe1_0_200)
      (not_occupied seg_tww2_0_50)
      (not_occupied seg_tww3_0_50)
      (not_occupied seg_tww4_0_50)
      (not_occupied seg_rww_0_50)
      (not_occupied seg_rwtw1_0_10)
      (not_occupied seg_rw_0_400)
      (not_occupied seg_rwe_0_50)
      (not_occupied seg_twe4_0_50)
      (not_occupied seg_rwte1_0_10)
      (not_occupied seg_twe3_0_50)
      (not_occupied seg_twe2_0_50)
      (not_occupied seg_rwte2_0_10)
      (not_occupied seg_rwtw2_0_10)

      (occupied seg_pp_0_60)
)

(:goal
      (and



            (airborne airplane_DAEWH seg_rwe_0_50)
      )
)
)

","pushback_seg_pp_0_60_seg_ppdoor_0_40_south_south_medium airplane_daewh (1)
pushback_seg_ppdoor_0_40_seg_tww1_0_200_south_north_medium airplane_daewh (1)
startup_seg_tww1_0_200_north_medium airplane_daewh (1)
move_seg_tww1_0_200_seg_twe1_0_200_north_south_medium airplane_daewh (1)
move_seg_twe1_0_200_seg_twe2_0_50_south_south_medium airplane_daewh (1)
move_seg_twe2_0_50_seg_twe3_0_50_south_south_medium airplane_daewh (1)
move_seg_twe3_0_50_seg_twe4_0_50_south_south_medium airplane_daewh (1)
move_seg_twe4_0_50_seg_rwe_0_50_south_south_medium airplane_daewh (1)
takeoff_seg_rwe_0_50_south airplane_daewh (1)"
airport,"(define (domain airport_fixed_structure)

(:requirements :typing)

(:types airplane segment direction airplanetype)

(:constants
                north
                south - direction

                light
                medium
                heavy - airplanetype

                seg_pp_0_60
                seg_ppdoor_0_40
                seg_tww1_0_200
                seg_twe1_0_200
                seg_tww2_0_50
                seg_tww3_0_50
                seg_tww4_0_50
                seg_rww_0_50
                seg_rwtw1_0_10
                seg_rw_0_400
                seg_rwe_0_50
                seg_twe4_0_50
                seg_rwte1_0_10
                seg_twe3_0_50
                seg_twe2_0_50
                seg_rwte2_0_10
                seg_rwtw2_0_10 - segment

                airplane_CFBEG
                airplane_DAEWH - airplane
)

(:predicates
                ;; airport information
                (has-type ?a - airplane ?t - airplanetype)
                ;; plane a has type t
                (at-segment ?a - airplane ?s - segment)
                ;; planes are at segments, ie at their end in driving direction
                (facing ?a - airplane ?d - direction)
                ;; planes face into their driving direction

                ;; how the planes affect the airport
                (occupied ?s - segment)
                ;; a plane is in here
                (not_occupied ?s - segment)
                (blocked ?s - segment ?a - airplane)
                ;; segment s is blocked if it is endangered by plane p
                (not_blocked ?s - segment ?a - airplane)

                ;; an airplane may lineup on segment s when facing d
                (is-start-runway ?s - segment ?d - direction)

                ;; airplane a is starting from runway s
                (airborne ?a - airplane ?s - segment)

                (is-moving ?a - airplane)
                (is-pushing ?a - airplane)
                (is-parked ?a - airplane ?s - segment)

)

(:action move_seg_pp_0_60_seg_ppdoor_0_40_north_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_pp_0_60)
                 (not_occupied seg_ppdoor_0_40)
                 (not_blocked seg_ppdoor_0_40 airplane_CFBEG)
                 (not_blocked seg_ppdoor_0_40 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_pp_0_60))
                 (not_occupied seg_pp_0_60)
                 (not (at-segment ?a seg_pp_0_60))

                 (occupied seg_ppdoor_0_40)
                 (not (not_occupied seg_ppdoor_0_40))
                 (blocked seg_ppdoor_0_40 ?a)
                 (not (not_blocked seg_ppdoor_0_40 ?a))
                 (at-segment ?a seg_ppdoor_0_40)


                )
)

(:action move_seg_ppdoor_0_40_seg_tww1_0_200_north_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_ppdoor_0_40)
                 (not_occupied seg_tww1_0_200)
                 (not_blocked seg_tww1_0_200 airplane_CFBEG)
                 (not_blocked seg_tww1_0_200 airplane_DAEWH)

                 (not_occupied seg_twe1_0_200)
              )

 :effect        (and
                 (not (occupied seg_ppdoor_0_40))
                 (not_occupied seg_ppdoor_0_40)
                 (not (at-segment ?a seg_ppdoor_0_40))

                 (occupied seg_tww1_0_200)
                 (not (not_occupied seg_tww1_0_200))
                 (blocked seg_tww1_0_200 ?a)
                 (not (not_blocked seg_tww1_0_200 ?a))
                 (at-segment ?a seg_tww1_0_200)
                 (not (facing ?a north))
                 (facing ?a south)

                 (not (blocked seg_pp_0_60 ?a))
                 (not_blocked seg_pp_0_60 ?a)

                 (blocked seg_twe1_0_200 ?a)
                 (not (not_blocked seg_twe1_0_200 ?a))
                )
)

(:action move_seg_tww1_0_200_seg_twe1_0_200_north_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww1_0_200)
                 (not_occupied seg_twe1_0_200)
                 (not_blocked seg_twe1_0_200 airplane_CFBEG)
                 (not_blocked seg_twe1_0_200 airplane_DAEWH)

                 (not_occupied seg_ppdoor_0_40)
              )

 :effect        (and
                 (not (occupied seg_tww1_0_200))
                 (not_occupied seg_tww1_0_200)
                 (not (at-segment ?a seg_tww1_0_200))

                 (occupied seg_twe1_0_200)
                 (not (not_occupied seg_twe1_0_200))
                 (blocked seg_twe1_0_200 ?a)
                 (not (not_blocked seg_twe1_0_200 ?a))
                 (at-segment ?a seg_twe1_0_200)
                 (not (facing ?a north))
                 (facing ?a south)

                 (not (blocked seg_tww2_0_50 ?a))
                 (not_blocked seg_tww2_0_50 ?a)

                 (blocked seg_ppdoor_0_40 ?a)
                 (not (not_blocked seg_ppdoor_0_40 ?a))
                )
)

(:action move_seg_twe1_0_200_seg_twe2_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_twe1_0_200)
                 (not_occupied seg_twe2_0_50)
                 (not_blocked seg_twe2_0_50 airplane_CFBEG)
                 (not_blocked seg_twe2_0_50 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_twe1_0_200))
                 (not_occupied seg_twe1_0_200)
                 (not (at-segment ?a seg_twe1_0_200))

                 (occupied seg_twe2_0_50)
                 (not (not_occupied seg_twe2_0_50))
                 (blocked seg_twe2_0_50 ?a)
                 (not (not_blocked seg_twe2_0_50 ?a))
                 (at-segment ?a seg_twe2_0_50)

                 (not (blocked seg_ppdoor_0_40 ?a))
                 (not_blocked seg_ppdoor_0_40 ?a)
                 (not (blocked seg_tww1_0_200 ?a))
                 (not_blocked seg_tww1_0_200 ?a)

                )
)

(:action move_seg_twe2_0_50_seg_twe3_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_twe2_0_50)
                 (not_occupied seg_twe3_0_50)
                 (not_blocked seg_twe3_0_50 airplane_CFBEG)
                 (not_blocked seg_twe3_0_50 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_twe2_0_50))
                 (not_occupied seg_twe2_0_50)
                 (not (at-segment ?a seg_twe2_0_50))

                 (occupied seg_twe3_0_50)
                 (not (not_occupied seg_twe3_0_50))
                 (blocked seg_twe3_0_50 ?a)
                 (not (not_blocked seg_twe3_0_50 ?a))
                 (at-segment ?a seg_twe3_0_50)

                 (not (blocked seg_twe1_0_200 ?a))
                 (not_blocked seg_twe1_0_200 ?a)

                )
)

(:action move_seg_twe3_0_50_seg_twe4_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_twe3_0_50)
                 (not_occupied seg_twe4_0_50)
                 (not_blocked seg_twe4_0_50 airplane_CFBEG)
                 (not_blocked seg_twe4_0_50 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_twe3_0_50))
                 (not_occupied seg_twe3_0_50)
                 (not (at-segment ?a seg_twe3_0_50))

                 (occupied seg_twe4_0_50)
                 (not (not_occupied seg_twe4_0_50))
                 (blocked seg_twe4_0_50 ?a)
                 (not (not_blocked seg_twe4_0_50 ?a))
                 (at-segment ?a seg_twe4_0_50)

                 (not (blocked seg_twe2_0_50 ?a))
                 (not_blocked seg_twe2_0_50 ?a)

                )
)

(:action move_seg_twe4_0_50_seg_rwe_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_twe4_0_50)
                 (not_occupied seg_rwe_0_50)
                 (not_blocked seg_rwe_0_50 airplane_CFBEG)
                 (not_blocked seg_rwe_0_50 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_twe4_0_50))
                 (not_occupied seg_twe4_0_50)
                 (not (at-segment ?a seg_twe4_0_50))

                 (occupied seg_rwe_0_50)
                 (not (not_occupied seg_rwe_0_50))
                 (blocked seg_rwe_0_50 ?a)
                 (not (not_blocked seg_rwe_0_50 ?a))
                 (at-segment ?a seg_rwe_0_50)

                 (not (blocked seg_twe3_0_50 ?a))
                 (not_blocked seg_twe3_0_50 ?a)

                )
)

(:action move_seg_rwe_0_50_seg_rw_0_400_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_rwe_0_50)
                 (not_occupied seg_rw_0_400)
                 (not_blocked seg_rw_0_400 airplane_CFBEG)
                 (not_blocked seg_rw_0_400 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_rwe_0_50))
                 (not_occupied seg_rwe_0_50)
                 (not (at-segment ?a seg_rwe_0_50))

                 (occupied seg_rw_0_400)
                 (not (not_occupied seg_rw_0_400))
                 (blocked seg_rw_0_400 ?a)
                 (not (not_blocked seg_rw_0_400 ?a))
                 (at-segment ?a seg_rw_0_400)

                 (not (blocked seg_twe4_0_50 ?a))
                 (not_blocked seg_twe4_0_50 ?a)
                 (not (blocked seg_twe4_0_50 ?a))
                 (not_blocked seg_twe4_0_50 ?a)

                )
)

(:action move_seg_rw_0_400_seg_rww_0_50_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_rw_0_400)
                 (not_occupied seg_rww_0_50)
                 (not_blocked seg_rww_0_50 airplane_CFBEG)
                 (not_blocked seg_rww_0_50 airplane_DAEWH)

                 (not_occupied seg_rwe_0_50)
              )

 :effect        (and
                 (not (occupied seg_rw_0_400))
                 (not_occupied seg_rw_0_400)
                 (not (at-segment ?a seg_rw_0_400))

                 (occupied seg_rww_0_50)
                 (not (not_occupied seg_rww_0_50))
                 (blocked seg_rww_0_50 ?a)
                 (not (not_blocked seg_rww_0_50 ?a))
                 (at-segment ?a seg_rww_0_50)


                )
)

(:action move_seg_rww_0_50_seg_tww4_0_50_south_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_rww_0_50)
                 (not_occupied seg_tww4_0_50)
                 (not_blocked seg_tww4_0_50 airplane_CFBEG)
                 (not_blocked seg_tww4_0_50 airplane_DAEWH)

                 (not_occupied seg_rwtw1_0_10)
              )

 :effect        (and
                 (not (occupied seg_rww_0_50))
                 (not_occupied seg_rww_0_50)
                 (not (at-segment ?a seg_rww_0_50))

                 (occupied seg_tww4_0_50)
                 (not (not_occupied seg_tww4_0_50))
                 (blocked seg_tww4_0_50 ?a)
                 (not (not_blocked seg_tww4_0_50 ?a))
                 (at-segment ?a seg_tww4_0_50)
                 (not (facing ?a south))
                 (facing ?a north)

                 (not (blocked seg_rwe_0_50 ?a))
                 (not_blocked seg_rwe_0_50 ?a)
                 (not (blocked seg_rw_0_400 ?a))
                 (not_blocked seg_rw_0_400 ?a)

                 (blocked seg_rwtw1_0_10 ?a)
                 (not (not_blocked seg_rwtw1_0_10 ?a))
                )
)

(:action move_seg_tww4_0_50_seg_tww3_0_50_north_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww4_0_50)
                 (not_occupied seg_tww3_0_50)
                 (not_blocked seg_tww3_0_50 airplane_CFBEG)
                 (not_blocked seg_tww3_0_50 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_tww4_0_50))
                 (not_occupied seg_tww4_0_50)
                 (not (at-segment ?a seg_tww4_0_50))

                 (occupied seg_tww3_0_50)
                 (not (not_occupied seg_tww3_0_50))
                 (blocked seg_tww3_0_50 ?a)
                 (not (not_blocked seg_tww3_0_50 ?a))
                 (at-segment ?a seg_tww3_0_50)

                 (not (blocked seg_rww_0_50 ?a))
                 (not_blocked seg_rww_0_50 ?a)
                 (not (blocked seg_rwtw1_0_10 ?a))
                 (not_blocked seg_rwtw1_0_10 ?a)

                )
)

(:action move_seg_tww3_0_50_seg_tww2_0_50_north_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww3_0_50)
                 (not_occupied seg_tww2_0_50)
                 (not_blocked seg_tww2_0_50 airplane_CFBEG)
                 (not_blocked seg_tww2_0_50 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_tww3_0_50))
                 (not_occupied seg_tww3_0_50)
                 (not (at-segment ?a seg_tww3_0_50))

                 (occupied seg_tww2_0_50)
                 (not (not_occupied seg_tww2_0_50))
                 (blocked seg_tww2_0_50 ?a)
                 (not (not_blocked seg_tww2_0_50 ?a))
                 (at-segment ?a seg_tww2_0_50)

                 (not (blocked seg_tww4_0_50 ?a))
                 (not_blocked seg_tww4_0_50 ?a)

                )
)

(:action move_seg_tww2_0_50_seg_tww1_0_200_north_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww2_0_50)
                 (not_occupied seg_tww1_0_200)
                 (not_blocked seg_tww1_0_200 airplane_CFBEG)
                 (not_blocked seg_tww1_0_200 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_tww2_0_50))
                 (not_occupied seg_tww2_0_50)
                 (not (at-segment ?a seg_tww2_0_50))

                 (occupied seg_tww1_0_200)
                 (not (not_occupied seg_tww1_0_200))
                 (blocked seg_tww1_0_200 ?a)
                 (not (not_blocked seg_tww1_0_200 ?a))
                 (at-segment ?a seg_tww1_0_200)

                 (not (blocked seg_tww3_0_50 ?a))
                 (not_blocked seg_tww3_0_50 ?a)

                )
)

(:action move_seg_tww1_0_200_seg_ppdoor_0_40_north_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a north)
                 (at-segment ?a seg_tww1_0_200)
                 (not_occupied seg_ppdoor_0_40)
                 (not_blocked seg_ppdoor_0_40 airplane_CFBEG)
                 (not_blocked seg_ppdoor_0_40 airplane_DAEWH)

                 (not_occupied seg_twe1_0_200)
              )

 :effect        (and
                 (not (occupied seg_tww1_0_200))
                 (not_occupied seg_tww1_0_200)
                 (not (at-segment ?a seg_tww1_0_200))

                 (occupied seg_ppdoor_0_40)
                 (not (not_occupied seg_ppdoor_0_40))
                 (blocked seg_ppdoor_0_40 ?a)
                 (not (not_blocked seg_ppdoor_0_40 ?a))
                 (at-segment ?a seg_ppdoor_0_40)
                 (not (facing ?a north))
                 (facing ?a south)

                 (not (blocked seg_tww2_0_50 ?a))
                 (not_blocked seg_tww2_0_50 ?a)

                 (blocked seg_twe1_0_200 ?a)
                 (not (not_blocked seg_twe1_0_200 ?a))
                )
)

(:action move_seg_ppdoor_0_40_seg_pp_0_60_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-moving ?a)
                 (facing ?a south)
                 (at-segment ?a seg_ppdoor_0_40)
                 (not_occupied seg_pp_0_60)
                 (not_blocked seg_pp_0_60 airplane_CFBEG)
                 (not_blocked seg_pp_0_60 airplane_DAEWH)

              )

 :effect        (and
                 (not (occupied seg_ppdoor_0_40))
                 (not_occupied seg_ppdoor_0_40)
                 (not (at-segment ?a seg_ppdoor_0_40))

                 (occupied seg_pp_0_60)
                 (not (not_occupied seg_pp_0_60))
                 (blocked seg_pp_0_60 ?a)
                 (not (not_blocked seg_pp_0_60 ?a))
                 (at-segment ?a seg_pp_0_60)

                 (not (blocked seg_tww1_0_200 ?a))
                 (not_blocked seg_tww1_0_200 ?a)
                 (not (blocked seg_twe1_0_200 ?a))
                 (not_blocked seg_twe1_0_200 ?a)

                )
)

(:action pushback_seg_pp_0_60_seg_ppdoor_0_40_south_south_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-pushing ?a)
                 (facing ?a south)
                 (at-segment ?a seg_pp_0_60)
                 (not_occupied seg_ppdoor_0_40)
                 (not_blocked seg_ppdoor_0_40 airplane_CFBEG)
                 (not_blocked seg_ppdoor_0_40 airplane_DAEWH)
                )

 :effect        (and
                 (not (occupied seg_pp_0_60))
                 (not_occupied seg_pp_0_60)
                 (not (blocked seg_pp_0_60 ?a))
                 (not_blocked seg_pp_0_60 ?a)
                 (not (at-segment ?a seg_pp_0_60))

                 (occupied seg_ppdoor_0_40)
                 (not (not_occupied seg_ppdoor_0_40))
                 (blocked seg_ppdoor_0_40 ?a)
                 (not (not_blocked seg_ppdoor_0_40 ?a))
                 (at-segment ?a seg_ppdoor_0_40)

                )
)

(:action pushback_seg_ppdoor_0_40_seg_tww1_0_200_south_north_medium

 :parameters    (?a - airplane)

 :precondition  (and
                 (has-type ?a medium)
                 (is-pushing ?a)
                 (facing ?a south)
                 (at-segment ?a seg_ppdoor_0_40)
                 (not_occupied seg_tww1_0_200)
                 (not_blocked seg_tww1_0_200 airplane_CFBEG)
                 (not_blocked seg_tww1_0_200 airplane_DAEWH)
                )

 :effect        (and
                 (not (occupied seg_ppdoor_0_40))
                 (not_occupied seg_ppdoor_0_40)
                 (not (blocked seg_ppdoor_0_40 ?a))
                 (not_blocked seg_ppdoor_0_40 ?a)
                 (not (at-segment ?a seg_ppdoor_0_40))

                 (occupied seg_tww1_0_200)
                 (not (not_occupied seg_tww1_0_200))
                 (blocked seg_tww1_0_200 ?a)
                 (not (not_blocked seg_tww1_0_200 ?a))
                 (at-segment ?a seg_tww1_0_200)
                 (not (facing ?a south))
                 (facing ?a north)

                )
)


(:action takeoff_seg_rww_0_50_north

 :parameters (?a - airplane)

 :precondition (and (at-segment ?a seg_rww_0_50)
                    (facing ?a north)
                    (is-moving ?a)
               )

 :effect (and (not (occupied seg_rww_0_50))
              (not_occupied seg_rww_0_50)
              (not (blocked seg_rww_0_50 ?a))
              (not_blocked seg_rww_0_50 ?a)
              (not (at-segment ?a seg_rww_0_50))
              (airborne ?a seg_rww_0_50)
              (not (is-moving ?a ))
              (not (blocked seg_tww4_0_50 ?a))
              (not_blocked seg_tww4_0_50 ?a)
              (not (blocked seg_tww4_0_50 ?a))
              (not_blocked seg_tww4_0_50 ?a)
         )
)

(:action takeoff_seg_rwe_0_50_south

 :parameters (?a - airplane)

 :precondition (and (at-segment ?a seg_rwe_0_50)
                    (facing ?a south)
                    (is-moving ?a)
               )

 :effect (and (not (occupied seg_rwe_0_50))
              (not_occupied seg_rwe_0_50)
              (not (blocked seg_rwe_0_50 ?a))
              (not_blocked seg_rwe_0_50 ?a)
              (not (at-segment ?a seg_rwe_0_50))
              (airborne ?a seg_rwe_0_50)
              (not (is-moving ?a ))
              (not (blocked seg_twe4_0_50 ?a))
              (not_blocked seg_twe4_0_50 ?a)
              (not (blocked seg_twe4_0_50 ?a))
              (not_blocked seg_twe4_0_50 ?a)
         )
)


(:action park_seg_pp_0_60_north
 :parameters (?a - airplane)
 :precondition (and (at-segment ?a seg_pp_0_60)
                    (facing ?a north)
                    (is-moving ?a)
               )
 :effect (and (is-parked ?a seg_pp_0_60)
         )
)
(:action park_seg_pp_0_60_south
 :parameters (?a - airplane)
 :precondition (and (at-segment ?a seg_pp_0_60)
                    (facing ?a south)
                    (is-moving ?a)
               )
 :effect (and (is-parked ?a seg_pp_0_60)
              (not (blocked seg_ppdoor_0_40 ?a))
              (not_blocked seg_ppdoor_0_40 ?a)
         )
)
(:action startup_seg_pp_0_60_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_pp_0_60)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
         )
)
(:action startup_seg_pp_0_60_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_pp_0_60)
                    (not_occupied seg_ppdoor_0_40)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_ppdoor_0_40 ?a)
                    (not (not_blocked seg_ppdoor_0_40 ?a))
         )
)
(:action startup_seg_ppdoor_0_40_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_ppdoor_0_40)
                    (not_occupied seg_pp_0_60)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_pp_0_60 ?a)
                    (not (not_blocked seg_pp_0_60 ?a))
         )
)
(:action startup_seg_ppdoor_0_40_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_ppdoor_0_40)
                    (not_occupied seg_tww1_0_200)
                    (not_occupied seg_twe1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww1_0_200 ?a)
                    (not (not_blocked seg_tww1_0_200 ?a))
                    (blocked seg_twe1_0_200 ?a)
                    (not (not_blocked seg_twe1_0_200 ?a))
         )
)
(:action startup_seg_tww1_0_200_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww1_0_200)
                    (not_occupied seg_tww2_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww2_0_50 ?a)
                    (not (not_blocked seg_tww2_0_50 ?a))
         )
)
(:action startup_seg_tww1_0_200_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww1_0_200)
                    (not_occupied seg_ppdoor_0_40)
                    (not_occupied seg_twe1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_ppdoor_0_40 ?a)
                    (not (not_blocked seg_ppdoor_0_40 ?a))
                    (blocked seg_twe1_0_200 ?a)
                    (not (not_blocked seg_twe1_0_200 ?a))
         )
)
(:action startup_seg_twe1_0_200_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe1_0_200)
                    (not_occupied seg_twe2_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe2_0_50 ?a)
                    (not (not_blocked seg_twe2_0_50 ?a))
         )
)
(:action startup_seg_twe1_0_200_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe1_0_200)
                    (not_occupied seg_ppdoor_0_40)
                    (not_occupied seg_tww1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_ppdoor_0_40 ?a)
                    (not (not_blocked seg_ppdoor_0_40 ?a))
                    (blocked seg_tww1_0_200 ?a)
                    (not (not_blocked seg_tww1_0_200 ?a))
         )
)
(:action startup_seg_tww2_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww2_0_50)
                    (not_occupied seg_tww3_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww3_0_50 ?a)
                    (not (not_blocked seg_tww3_0_50 ?a))
         )
)
(:action startup_seg_tww2_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww2_0_50)
                    (not_occupied seg_tww1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww1_0_200 ?a)
                    (not (not_blocked seg_tww1_0_200 ?a))
         )
)
(:action startup_seg_tww3_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww3_0_50)
                    (not_occupied seg_tww4_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww4_0_50 ?a)
                    (not (not_blocked seg_tww4_0_50 ?a))
         )
)
(:action startup_seg_tww3_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww3_0_50)
                    (not_occupied seg_tww2_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww2_0_50 ?a)
                    (not (not_blocked seg_tww2_0_50 ?a))
         )
)
(:action startup_seg_tww4_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww4_0_50)
                    (not_occupied seg_rww_0_50)
                    (not_occupied seg_rwtw1_0_10)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_rww_0_50 ?a)
                    (not (not_blocked seg_rww_0_50 ?a))
                    (blocked seg_rwtw1_0_10 ?a)
                    (not (not_blocked seg_rwtw1_0_10 ?a))
         )
)
(:action startup_seg_tww4_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_tww4_0_50)
                    (not_occupied seg_tww3_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_tww3_0_50 ?a)
                    (not (not_blocked seg_tww3_0_50 ?a))
         )
)
(:action startup_seg_twe4_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe4_0_50)
                    (not_occupied seg_rwte1_0_10)
                    (not_occupied seg_rwe_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_rwte1_0_10 ?a)
                    (not (not_blocked seg_rwte1_0_10 ?a))
                    (blocked seg_rwe_0_50 ?a)
                    (not (not_blocked seg_rwe_0_50 ?a))
         )
)
(:action startup_seg_twe4_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe4_0_50)
                    (not_occupied seg_twe3_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe3_0_50 ?a)
                    (not (not_blocked seg_twe3_0_50 ?a))
         )
)
(:action startup_seg_twe3_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe3_0_50)
                    (not_occupied seg_twe4_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe4_0_50 ?a)
                    (not (not_blocked seg_twe4_0_50 ?a))
         )
)
(:action startup_seg_twe3_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe3_0_50)
                    (not_occupied seg_twe2_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe2_0_50 ?a)
                    (not (not_blocked seg_twe2_0_50 ?a))
         )
)
(:action startup_seg_twe2_0_50_north_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe2_0_50)
                    (not_occupied seg_twe3_0_50)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe3_0_50 ?a)
                    (not (not_blocked seg_twe3_0_50 ?a))
         )
)
(:action startup_seg_twe2_0_50_south_medium

 :parameters (?a - airplane)

 :precondition (and (is-pushing ?a)
                    (at-segment ?a seg_twe2_0_50)
                    (not_occupied seg_twe1_0_200)
               )

 :effect       (and (not (is-pushing ?a))
                    (is-moving ?a)
                    (blocked seg_twe1_0_200 ?a)
                    (not (not_blocked seg_twe1_0_200 ?a))
         )
)
)","(define (problem PROBLEM_X)

(:domain airport_fixed_structure)

(:objects
)

(:init

      (at-segment airplane_CFBEG seg_rw_0_400)
      (at-segment airplane_DAEWH seg_pp_0_60)

      (blocked seg_rw_0_400 airplane_CFBEG)
      (blocked seg_pp_0_60 airplane_DAEWH)
      (blocked seg_rwe_0_50 airplane_CFBEG)

      (facing airplane_CFBEG south)
      (facing airplane_DAEWH south)

      (has-type airplane_CFBEG medium)
      (has-type airplane_DAEWH medium)

      (is-moving airplane_CFBEG)

      (is-pushing airplane_DAEWH)


      (not_blocked seg_pp_0_60 airplane_CFBEG)
      (not_blocked seg_ppdoor_0_40 airplane_CFBEG)
      (not_blocked seg_tww1_0_200 airplane_CFBEG)
      (not_blocked seg_twe1_0_200 airplane_CFBEG)
      (not_blocked seg_tww2_0_50 airplane_CFBEG)
      (not_blocked seg_tww3_0_50 airplane_CFBEG)
      (not_blocked seg_tww4_0_50 airplane_CFBEG)
      (not_blocked seg_rww_0_50 airplane_CFBEG)
      (not_blocked seg_rwtw1_0_10 airplane_CFBEG)
      (not_blocked seg_twe4_0_50 airplane_CFBEG)
      (not_blocked seg_rwte1_0_10 airplane_CFBEG)
      (not_blocked seg_twe3_0_50 airplane_CFBEG)
      (not_blocked seg_twe2_0_50 airplane_CFBEG)
      (not_blocked seg_rwte2_0_10 airplane_CFBEG)
      (not_blocked seg_rwtw2_0_10 airplane_CFBEG)
      (not_blocked seg_ppdoor_0_40 airplane_DAEWH)
      (not_blocked seg_tww1_0_200 airplane_DAEWH)
      (not_blocked seg_twe1_0_200 airplane_DAEWH)
      (not_blocked seg_tww2_0_50 airplane_DAEWH)
      (not_blocked seg_tww3_0_50 airplane_DAEWH)
      (not_blocked seg_tww4_0_50 airplane_DAEWH)
      (not_blocked seg_rww_0_50 airplane_DAEWH)
      (not_blocked seg_rwtw1_0_10 airplane_DAEWH)
      (not_blocked seg_rw_0_400 airplane_DAEWH)
      (not_blocked seg_rwe_0_50 airplane_DAEWH)
      (not_blocked seg_twe4_0_50 airplane_DAEWH)
      (not_blocked seg_rwte1_0_10 airplane_DAEWH)
      (not_blocked seg_twe3_0_50 airplane_DAEWH)
      (not_blocked seg_twe2_0_50 airplane_DAEWH)
      (not_blocked seg_rwte2_0_10 airplane_DAEWH)
      (not_blocked seg_rwtw2_0_10 airplane_DAEWH)

      (not_occupied seg_ppdoor_0_40)
      (not_occupied seg_tww1_0_200)
      (not_occupied seg_twe1_0_200)
      (not_occupied seg_tww2_0_50)
      (not_occupied seg_tww3_0_50)
      (not_occupied seg_tww4_0_50)
      (not_occupied seg_rww_0_50)
      (not_occupied seg_rwtw1_0_10)
      (not_occupied seg_rwe_0_50)
      (not_occupied seg_twe4_0_50)
      (not_occupied seg_rwte1_0_10)
      (not_occupied seg_twe3_0_50)
      (not_occupied seg_twe2_0_50)
      (not_occupied seg_rwte2_0_10)
      (not_occupied seg_rwtw2_0_10)

      (occupied seg_rw_0_400)
      (occupied seg_pp_0_60)
)

(:goal
      (and



            (is-parked airplane_CFBEG seg_pp_0_60)
            (airborne airplane_DAEWH seg_rwe_0_50)
      )
)
)","pushback_seg_pp_0_60_seg_ppdoor_0_40_south_south_medium airplane_daewh (1)
move_seg_rw_0_400_seg_rww_0_50_south_south_medium airplane_cfbeg (1)
move_seg_rww_0_50_seg_tww4_0_50_south_north_medium airplane_cfbeg (1)
move_seg_tww4_0_50_seg_tww3_0_50_north_north_medium airplane_cfbeg (1)
pushback_seg_ppdoor_0_40_seg_tww1_0_200_south_north_medium airplane_daewh (1)
startup_seg_tww1_0_200_north_medium airplane_daewh (1)
move_seg_tww1_0_200_seg_twe1_0_200_north_south_medium airplane_daewh (1)
move_seg_tww3_0_50_seg_tww2_0_50_north_north_medium airplane_cfbeg (1)
move_seg_twe1_0_200_seg_twe2_0_50_south_south_medium airplane_daewh (1)
move_seg_tww2_0_50_seg_tww1_0_200_north_north_medium airplane_cfbeg (1)
move_seg_tww1_0_200_seg_ppdoor_0_40_north_south_medium airplane_cfbeg (1)
move_seg_ppdoor_0_40_seg_pp_0_60_south_south_medium airplane_cfbeg (1)
park_seg_pp_0_60_south airplane_cfbeg (1)
move_seg_twe2_0_50_seg_twe3_0_50_south_south_medium airplane_daewh (1)
move_seg_twe3_0_50_seg_twe4_0_50_south_south_medium airplane_daewh (1)
move_seg_twe4_0_50_seg_rwe_0_50_south_south_medium airplane_daewh (1)
takeoff_seg_rwe_0_50_south airplane_daewh (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
	       (ontable ?x)
	       (clear ?x)
	       (handempty)
	       (holding ?x)
	       )

  (:action pick-up
	     :parameters (?x)
	     :precondition (and (clear ?x) (ontable ?x) (handempty))
	     :effect
	     (and (not (ontable ?x))
		   (not (clear ?x))
		   (not (handempty))
		   (holding ?x)))

  (:action put-down
	     :parameters (?x)
	     :precondition (holding ?x)
	     :effect
	     (and (not (holding ?x))
		   (clear ?x)
		   (handempty)
		   (ontable ?x)))
  (:action stack
	     :parameters (?x ?y)
	     :precondition (and (holding ?x) (clear ?y))
	     :effect
	     (and (not (holding ?x))
		   (not (clear ?y))
		   (clear ?x)
		   (handempty)
		   (on ?x ?y)))
  (:action unstack
	     :parameters (?x ?y)
	     :precondition (and (on ?x ?y) (clear ?x) (handempty))
	     :effect
	     (and (holding ?x)
		   (clear ?y)
		   (not (clear ?x))
		   (not (handempty))
		   (not (on ?x ?y)))))","(define (problem BLOCKS-4-0)
(:domain BLOCKS)
(:objects D B A C )
(:INIT (CLEAR C) (CLEAR A) (CLEAR B) (CLEAR D) (ONTABLE C) (ONTABLE A)
 (ONTABLE B) (ONTABLE D) (HANDEMPTY))
(:goal (AND (ON D C) (ON C B) (ON B A)))
)","pick-up b (1)
stack b a (1)
pick-up c (1)
stack c b (1)
pick-up d (1)
stack d c (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
	       (ontable ?x)
	       (clear ?x)
	       (handempty)
	       (holding ?x)
	       )

  (:action pick-up
	     :parameters (?x)
	     :precondition (and (clear ?x) (ontable ?x) (handempty))
	     :effect
	     (and (not (ontable ?x))
		   (not (clear ?x))
		   (not (handempty))
		   (holding ?x)))

  (:action put-down
	     :parameters (?x)
	     :precondition (holding ?x)
	     :effect
	     (and (not (holding ?x))
		   (clear ?x)
		   (handempty)
		   (ontable ?x)))
  (:action stack
	     :parameters (?x ?y)
	     :precondition (and (holding ?x) (clear ?y))
	     :effect
	     (and (not (holding ?x))
		   (not (clear ?y))
		   (clear ?x)
		   (handempty)
		   (on ?x ?y)))
  (:action unstack
	     :parameters (?x ?y)
	     :precondition (and (on ?x ?y) (clear ?x) (handempty))
	     :effect
	     (and (holding ?x)
		   (clear ?y)
		   (not (clear ?x))
		   (not (handempty))
		   (not (on ?x ?y)))))","(define (problem BLOCKS-4-1)
(:domain BLOCKS)
(:objects A C D B )
(:INIT (CLEAR B) (ONTABLE D) (ON B C) (ON C A) (ON A D) (HANDEMPTY))
(:goal (AND (ON D C) (ON C A) (ON A B)))
)","unstack b c (1)
put-down b (1)
unstack c a (1)
put-down c (1)
unstack a d (1)
stack a b (1)
pick-up c (1)
stack c a (1)
pick-up d (1)
stack d c (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))","(define (problem BLOCKS-4-2)
(:domain BLOCKS)
(:objects B D C A )
(:INIT (CLEAR A) (CLEAR C) (CLEAR D) (ONTABLE A) (ONTABLE B) (ONTABLE D)
 (ON C B) (HANDEMPTY))
(:goal (AND (ON A B) (ON B C) (ON C D)))
)","unstack c b (1)
stack c d (1)
pick-up b (1)
stack b c (1)
pick-up a (1)
stack a b (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
	       (ontable ?x)
	       (clear ?x)
	       (handempty)
	       (holding ?x)
	       )

  (:action pick-up
	     :parameters (?x)
	     :precondition (and (clear ?x) (ontable ?x) (handempty))
	     :effect
	     (and (not (ontable ?x))
		   (not (clear ?x))
		   (not (handempty))
		   (holding ?x)))

  (:action put-down
	     :parameters (?x)
	     :precondition (holding ?x)
	     :effect
	     (and (not (holding ?x))
		   (clear ?x)
		   (handempty)
		   (ontable ?x)))
  (:action stack
	     :parameters (?x ?y)
	     :precondition (and (holding ?x) (clear ?y))
	     :effect
	     (and (not (holding ?x))
		   (not (clear ?y))
		   (clear ?x)
		   (handempty)
		   (on ?x ?y)))
  (:action unstack
	     :parameters (?x ?y)
	     :precondition (and (on ?x ?y) (clear ?x) (handempty))
	     :effect
	     (and (holding ?x)
		   (clear ?y)
		   (not (clear ?x))
		   (not (handempty))
		   (not (on ?x ?y)))))","(define (problem BLOCKS-5-0)
(:domain BLOCKS)
(:objects B E A C D )
(:INIT (CLEAR D) (CLEAR C) (ONTABLE D) (ONTABLE A) (ON C E) (ON E B) (ON B A)
 (HANDEMPTY))
(:goal (AND (ON A E) (ON E B) (ON B D) (ON D C)))
)","unstack c e (1)
put-down c (1)
pick-up d (1)
stack d c (1)
unstack e b (1)
put-down e (1)
unstack b a (1)
stack b d (1)
pick-up e (1)
stack e b (1)
pick-up a (1)
stack a e (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
	       (ontable ?x)
	       (clear ?x)
	       (handempty)
	       (holding ?x)
	       )

  (:action pick-up
	     :parameters (?x)
	     :precondition (and (clear ?x) (ontable ?x) (handempty))
	     :effect
	     (and (not (ontable ?x))
		   (not (clear ?x))
		   (not (handempty))
		   (holding ?x)))

  (:action put-down
	     :parameters (?x)
	     :precondition (holding ?x)
	     :effect
	     (and (not (holding ?x))
		   (clear ?x)
		   (handempty)
		   (ontable ?x)))
  (:action stack
	     :parameters (?x ?y)
	     :precondition (and (holding ?x) (clear ?y))
	     :effect
	     (and (not (holding ?x))
		   (not (clear ?y))
		   (clear ?x)
		   (handempty)
		   (on ?x ?y)))
  (:action unstack
	     :parameters (?x ?y)
	     :precondition (and (on ?x ?y) (clear ?x) (handempty))
	     :effect
	     (and (holding ?x)
		   (clear ?y)
		   (not (clear ?x))
		   (not (handempty))
		   (not (on ?x ?y)))))","(define (problem BLOCKS-5-1)
(:domain BLOCKS)
(:objects A D C E B )
(:INIT (CLEAR B) (CLEAR E) (CLEAR C) (ONTABLE D) (ONTABLE E) (ONTABLE C)
 (ON B A) (ON A D) (HANDEMPTY))
(:goal (AND (ON D C) (ON C B) (ON B A) (ON A E)))
)","unstack b a (1)
stack b c (1)
unstack a d (1)
stack a e (1)
unstack b c (1)
stack b a (1)
pick-up c (1)
stack c b (1)
pick-up d (1)
stack d c (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))","(define (problem BLOCKS-5-2)
(:domain BLOCKS)
(:objects A C E B D )
(:INIT (CLEAR D) (ONTABLE B) (ON D E) (ON E C) (ON C A) (ON A B) (HANDEMPTY))
(:goal (AND (ON D C) (ON C B) (ON B E) (ON E A)))
)","unstack d e (1)
put-down d (1)
unstack e c (1)
stack e d (1)
unstack c a (1)
put-down c (1)
unstack a b (1)
put-down a (1)
unstack e d (1)
stack e a (1)
pick-up b (1)
stack b e (1)
pick-up c (1)
stack c b (1)
pick-up d (1)
stack d c (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))","(define (problem BLOCKS-6-0)
(:domain BLOCKS)
(:objects E A B C F D )
(:INIT (CLEAR D) (CLEAR F) (ONTABLE C) (ONTABLE B) (ON D A) (ON A C) (ON F E)
 (ON E B) (HANDEMPTY))
(:goal (AND (ON C B) (ON B A) (ON A E) (ON E F) (ON F D)))
)","unstack d a (1)
put-down d (1)
unstack f e (1)
stack f d (1)
unstack e b (1)
stack e f (1)
unstack a c (1)
stack a e (1)
pick-up b (1)
stack b a (1)
pick-up c (1)
stack c b (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
	       (ontable ?x)
	       (clear ?x)
	       (handempty)
	       (holding ?x)
	       )

  (:action pick-up
	     :parameters (?x)
	     :precondition (and (clear ?x) (ontable ?x) (handempty))
	     :effect
	     (and (not (ontable ?x))
		   (not (clear ?x))
		   (not (handempty))
		   (holding ?x)))

  (:action put-down
	     :parameters (?x)
	     :precondition (holding ?x)
	     :effect
	     (and (not (holding ?x))
		   (clear ?x)
		   (handempty)
		   (ontable ?x)))
  (:action stack
	     :parameters (?x ?y)
	     :precondition (and (holding ?x) (clear ?y))
	     :effect
	     (and (not (holding ?x))
		   (not (clear ?y))
		   (clear ?x)
		   (handempty)
		   (on ?x ?y)))
  (:action unstack
	     :parameters (?x ?y)
	     :precondition (and (on ?x ?y) (clear ?x) (handempty))
	     :effect
	     (and (holding ?x)
		   (clear ?y)
		   (not (clear ?x))
		   (not (handempty))
		   (not (on ?x ?y)))))","(define (problem BLOCKS-6-1)
(:domain BLOCKS)
(:objects F D C E B A )
(:INIT (CLEAR A) (CLEAR B) (CLEAR E) (CLEAR C) (CLEAR D) (ONTABLE F)
 (ONTABLE B) (ONTABLE E) (ONTABLE C) (ONTABLE D) (ON A F) (HANDEMPTY))
(:goal (AND (ON E F) (ON F C) (ON C B) (ON B A) (ON A D)))
)","unstack a f (1)
stack a d (1)
pick-up b (1)
stack b a (1)
pick-up c (1)
stack c b (1)
pick-up f (1)
stack f c (1)
pick-up e (1)
stack e f (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
	       (ontable ?x)
	       (clear ?x)
	       (handempty)
	       (holding ?x)
	       )

  (:action pick-up
	     :parameters (?x)
	     :precondition (and (clear ?x) (ontable ?x) (handempty))
	     :effect
	     (and (not (ontable ?x))
		   (not (clear ?x))
		   (not (handempty))
		   (holding ?x)))

  (:action put-down
	     :parameters (?x)
	     :precondition (holding ?x)
	     :effect
	     (and (not (holding ?x))
		   (clear ?x)
		   (handempty)
		   (ontable ?x)))
  (:action stack
	     :parameters (?x ?y)
	     :precondition (and (holding ?x) (clear ?y))
	     :effect
	     (and (not (holding ?x))
		   (not (clear ?y))
		   (clear ?x)
		   (handempty)
		   (on ?x ?y)))
  (:action unstack
	     :parameters (?x ?y)
	     :precondition (and (on ?x ?y) (clear ?x) (handempty))
	     :effect
	     (and (holding ?x)
		   (clear ?y)
		   (not (clear ?x))
		   (not (handempty))
		   (not (on ?x ?y)))))","(define (problem BLOCKS-6-2)
(:domain BLOCKS)
(:objects E F B D C A )
(:INIT (CLEAR A) (ONTABLE C) (ON A D) (ON D B) (ON B F) (ON F E) (ON E C)
 (HANDEMPTY))
(:goal (AND (ON E F) (ON F A) (ON A B) (ON B C) (ON C D)))
)","unstack a d (1)
put-down a (1)
unstack d b (1)
put-down d (1)
unstack b f (1)
put-down b (1)
unstack f e (1)
put-down f (1)
unstack e c (1)
put-down e (1)
pick-up c (1)
stack c d (1)
pick-up b (1)
stack b c (1)
pick-up a (1)
stack a b (1)
pick-up f (1)
stack f a (1)
pick-up e (1)
stack e f (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-7-0)
(:domain BLOCKS)
(:objects C F A B G D E )
(:INIT (CLEAR E) (ONTABLE D) (ON E G) (ON G B) (ON B A) (ON A F) (ON F C)
 (ON C D) (HANDEMPTY))
(:goal (AND (ON A G) (ON G D) (ON D B) (ON B C) (ON C F) (ON F E)))
)","unstack e g (1)
put-down e (1)
unstack g b (1)
put-down g (1)
unstack b a (1)
put-down b (1)
unstack a f (1)
put-down a (1)
unstack f c (1)
stack f e (1)
unstack c d (1)
stack c f (1)
pick-up b (1)
stack b c (1)
pick-up d (1)
stack d b (1)
pick-up g (1)
stack g d (1)
pick-up a (1)
stack a g (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-7-1)
(:domain BLOCKS)
(:objects E B D F G C A )
(:INIT (CLEAR A) (CLEAR C) (ONTABLE G) (ONTABLE F) (ON A G) (ON C D) (ON D B)
 (ON B E) (ON E F) (HANDEMPTY))
(:goal (AND (ON A E) (ON E B) (ON B F) (ON F G) (ON G C) (ON C D)))
)","unstack c d (1)
stack c a (1)
unstack d b (1)
put-down d (1)
unstack c a (1)
stack c d (1)
unstack a g (1)
put-down a (1)
pick-up g (1)
stack g c (1)
unstack b e (1)
stack b a (1)
unstack e f (1)
put-down e (1)
pick-up f (1)
stack f g (1)
unstack b a (1)
stack b f (1)
pick-up e (1)
stack e b (1)
pick-up a (1)
stack a e (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-7-2)
(:domain BLOCKS)
(:objects E G C D F A B )
(:INIT (CLEAR B) (CLEAR A) (ONTABLE F) (ONTABLE D) (ON B C) (ON C G) (ON G E)
 (ON E F) (ON A D) (HANDEMPTY))
(:goal (AND (ON E B) (ON B F) (ON F D) (ON D A) (ON A C) (ON C G)))
)","unstack b c (1)
put-down b (1)
unstack c g (1)
stack c a (1)
unstack g e (1)
put-down g (1)
unstack c a (1)
stack c g (1)
unstack a d (1)
stack a c (1)
pick-up d (1)
stack d a (1)
unstack e f (1)
put-down e (1)
pick-up f (1)
stack f d (1)
pick-up b (1)
stack b f (1)
pick-up e (1)
stack e b (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-8-0)
(:domain BLOCKS)
(:objects H G F E C B D A )
(:INIT (CLEAR A) (CLEAR D) (CLEAR B) (CLEAR C) (ONTABLE E) (ONTABLE F)
 (ONTABLE B) (ONTABLE C) (ON A G) (ON G E) (ON D H) (ON H F) (HANDEMPTY))
(:goal (AND (ON D F) (ON F E) (ON E H) (ON H C) (ON C A) (ON A G) (ON G B)))
)","unstack a g (1)
stack a c (1)
unstack g e (1)
stack g b (1)
unstack a c (1)
stack a g (1)
pick-up c (1)
stack c a (1)
unstack d h (1)
put-down d (1)
unstack h f (1)
stack h c (1)
pick-up e (1)
stack e h (1)
pick-up f (1)
stack f e (1)
pick-up d (1)
stack d f (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-8-1)
(:domain BLOCKS)
(:objects B A G C F D H E )
(:INIT (CLEAR E) (CLEAR H) (CLEAR D) (CLEAR F) (ONTABLE C) (ONTABLE G)
 (ONTABLE D) (ONTABLE F) (ON E C) (ON H A) (ON A B) (ON B G) (HANDEMPTY))
(:goal (AND (ON C D) (ON D B) (ON B G) (ON G F) (ON F H) (ON H A) (ON A E)))
)","unstack e c (1)
put-down e (1)
unstack h a (1)
stack h c (1)
unstack a b (1)
stack a e (1)
unstack h c (1)
stack h a (1)
pick-up f (1)
stack f h (1)
unstack b g (1)
stack b c (1)
pick-up g (1)
stack g f (1)
unstack b c (1)
stack b g (1)
pick-up d (1)
stack d b (1)
pick-up c (1)
stack c d (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-8-2)
(:domain BLOCKS)
(:objects F B G C H E A D )
(:INIT (CLEAR D) (CLEAR A) (CLEAR E) (CLEAR H) (CLEAR C) (ONTABLE G)
 (ONTABLE A) (ONTABLE E) (ONTABLE H) (ONTABLE C) (ON D B) (ON B F) (ON F G)
 (HANDEMPTY))
(:goal (AND (ON C B) (ON B E) (ON E G) (ON G F) (ON F A) (ON A D) (ON D H)))
)","unstack d b (1)
stack d h (1)
pick-up a (1)
stack a d (1)
unstack b f (1)
stack b c (1)
unstack f g (1)
stack f a (1)
pick-up g (1)
stack g f (1)
pick-up e (1)
stack e g (1)
unstack b c (1)
stack b e (1)
pick-up c (1)
stack c b (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-9-0)
(:domain BLOCKS)
(:objects H D I A E G B F C )
(:INIT (CLEAR C) (CLEAR F) (ONTABLE C) (ONTABLE B) (ON F G) (ON G E) (ON E A)
 (ON A I) (ON I D) (ON D H) (ON H B) (HANDEMPTY))
(:goal (AND (ON G D) (ON D B) (ON B C) (ON C A) (ON A I) (ON I F) (ON F E)
            (ON E H)))
)","unstack f g (1)
stack f c (1)
unstack g e (1)
put-down g (1)
unstack e a (1)
stack e g (1)
unstack a i (1)
put-down a (1)
unstack i d (1)
stack i a (1)
unstack d h (1)
put-down d (1)
unstack h b (1)
put-down h (1)
unstack e g (1)
stack e h (1)
unstack f c (1)
stack f e (1)
unstack i a (1)
stack i f (1)
pick-up a (1)
stack a i (1)
pick-up c (1)
stack c a (1)
pick-up b (1)
stack b c (1)
pick-up d (1)
stack d b (1)
pick-up g (1)
stack g d (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-9-1)
(:domain BLOCKS)
(:objects H G I C D B E A F )
(:INIT (CLEAR F) (ONTABLE A) (ON F E) (ON E B) (ON B D) (ON D C) (ON C I)
 (ON I G) (ON G H) (ON H A) (HANDEMPTY))
(:goal (AND (ON D I) (ON I A) (ON A B) (ON B H) (ON H G) (ON G F) (ON F E)
            (ON E C)))
)","unstack f e (1)
put-down f (1)
unstack e b (1)
stack e f (1)
unstack b d (1)
put-down b (1)
unstack d c (1)
put-down d (1)
unstack c i (1)
put-down c (1)
unstack e f (1)
stack e c (1)
pick-up f (1)
stack f e (1)
unstack i g (1)
stack i d (1)
unstack g h (1)
stack g f (1)
unstack h a (1)
stack h g (1)
pick-up b (1)
stack b h (1)
pick-up a (1)
stack a b (1)
unstack i d (1)
stack i a (1)
pick-up d (1)
stack d i (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-9-2)
(:domain BLOCKS)
(:objects B I C E D A G F H )
(:INIT (CLEAR H) (CLEAR F) (ONTABLE G) (ONTABLE F) (ON H A) (ON A D) (ON D E)
 (ON E C) (ON C I) (ON I B) (ON B G) (HANDEMPTY))
(:goal (AND (ON F G) (ON G H) (ON H D) (ON D I) (ON I E) (ON E B) (ON B C)
            (ON C A)))
)","unstack h a (1)
stack h f (1)
unstack a d (1)
put-down a (1)
unstack d e (1)
stack d h (1)
unstack e c (1)
stack e d (1)
unstack c i (1)
stack c a (1)
unstack i b (1)
put-down i (1)
unstack b g (1)
stack b c (1)
unstack e d (1)
stack e b (1)
pick-up i (1)
stack i e (1)
unstack d h (1)
stack d i (1)
unstack h f (1)
stack h d (1)
pick-up g (1)
stack g h (1)
pick-up f (1)
stack f g (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-10-0)
(:domain BLOCKS)
(:objects D A H G B J E I F C )
(:INIT (CLEAR C) (CLEAR F) (ONTABLE I) (ONTABLE F) (ON C E) (ON E J) (ON J B)
 (ON B G) (ON G H) (ON H A) (ON A D) (ON D I) (HANDEMPTY))
(:goal (AND (ON D C) (ON C F) (ON F J) (ON J E) (ON E H) (ON H B) (ON B A)
            (ON A G) (ON G I)))
)","unstack c e (1)
put-down c (1)
unstack e j (1)
stack e f (1)
unstack j b (1)
put-down j (1)
unstack b g (1)
stack b e (1)
unstack g h (1)
stack g j (1)
unstack h a (1)
put-down h (1)
unstack a d (1)
stack a b (1)
unstack d i (1)
put-down d (1)
unstack g j (1)
stack g i (1)
unstack a b (1)
stack a g (1)
unstack b e (1)
stack b a (1)
pick-up h (1)
stack h b (1)
unstack e f (1)
stack e h (1)
pick-up j (1)
stack j e (1)
pick-up f (1)
stack f j (1)
pick-up c (1)
stack c f (1)
pick-up d (1)
stack d c (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-10-1)
(:domain BLOCKS)
(:objects D A J I E G H B F C )
(:INIT (CLEAR C) (CLEAR F) (ONTABLE B) (ONTABLE H) (ON C G) (ON G E) (ON E I)
 (ON I J) (ON J A) (ON A B) (ON F D) (ON D H) (HANDEMPTY))
(:goal (AND (ON C B) (ON B D) (ON D F) (ON F I) (ON I A) (ON A E) (ON E H)
            (ON H G) (ON G J)))
)","unstack c g (1)
put-down c (1)
unstack g e (1)
stack g c (1)
unstack e i (1)
put-down e (1)
unstack i j (1)
put-down i (1)
unstack j a (1)
put-down j (1)
unstack g c (1)
stack g j (1)
unstack f d (1)
stack f c (1)
unstack d h (1)
put-down d (1)
pick-up h (1)
stack h g (1)
pick-up e (1)
stack e h (1)
unstack a b (1)
stack a e (1)
pick-up i (1)
stack i a (1)
unstack f c (1)
stack f i (1)
pick-up d (1)
stack d f (1)
pick-up b (1)
stack b d (1)
pick-up c (1)
stack c b (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-10-2)
(:domain BLOCKS)
(:objects B G E D F H I A C J )
(:INIT (CLEAR J) (CLEAR C) (ONTABLE A) (ONTABLE C) (ON J I) (ON I H) (ON H F)
 (ON F D) (ON D E) (ON E G) (ON G B) (ON B A) (HANDEMPTY))
(:goal (AND (ON B E) (ON E I) (ON I G) (ON G H) (ON H C) (ON C A) (ON A F)
            (ON F J) (ON J D)))
)","unstack j i (1)
put-down j (1)
unstack i h (1)
put-down i (1)
unstack h f (1)
put-down h (1)
unstack f d (1)
stack f c (1)
unstack d e (1)
put-down d (1)
pick-up j (1)
stack j d (1)
unstack f c (1)
stack f j (1)
unstack e g (1)
put-down e (1)
unstack g b (1)
stack g i (1)
unstack b a (1)
put-down b (1)
pick-up a (1)
stack a f (1)
pick-up c (1)
stack c a (1)
pick-up h (1)
stack h c (1)
unstack g i (1)
stack g h (1)
pick-up i (1)
stack i g (1)
pick-up e (1)
stack e i (1)
pick-up b (1)
stack b e (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-11-0)
(:domain BLOCKS)
(:objects F A K H G E D I C J B )
(:INIT (CLEAR B) (CLEAR J) (CLEAR C) (ONTABLE I) (ONTABLE D) (ONTABLE E)
 (ON B G) (ON G H) (ON H K) (ON K A) (ON A F) (ON F I) (ON J D) (ON C E)
 (HANDEMPTY))
(:goal (AND (ON A J) (ON J D) (ON D B) (ON B H) (ON H K) (ON K I) (ON I F)
            (ON F E) (ON E G) (ON G C)))
)","unstack c e (1)
put-down c (1)
unstack b g (1)
put-down b (1)
unstack g h (1)
stack g c (1)
pick-up e (1)
stack e g (1)
unstack h k (1)
stack h b (1)
unstack k a (1)
stack k h (1)
unstack a f (1)
put-down a (1)
unstack f i (1)
stack f e (1)
pick-up i (1)
stack i f (1)
unstack k h (1)
stack k i (1)
unstack h b (1)
stack h k (1)
pick-up b (1)
stack b h (1)
unstack j d (1)
stack j a (1)
pick-up d (1)
stack d b (1)
unstack j a (1)
stack j d (1)
pick-up a (1)
stack a j (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-11-1)
(:domain BLOCKS)
(:objects B C E A H K I G D F J )
(:INIT (CLEAR J) (CLEAR F) (CLEAR D) (CLEAR G) (ONTABLE I) (ONTABLE K)
 (ONTABLE H) (ONTABLE A) (ON J I) (ON F E) (ON E K) (ON D C) (ON C H) (ON G B)
 (ON B A) (HANDEMPTY))
(:goal (AND (ON B D) (ON D J) (ON J K) (ON K H) (ON H A) (ON A C) (ON C F)
            (ON F G) (ON G I) (ON I E)))
)","unstack f e (1)
put-down f (1)
unstack e k (1)
put-down e (1)
unstack j i (1)
put-down j (1)
pick-up i (1)
stack i e (1)
unstack g b (1)
stack g i (1)
pick-up f (1)
stack f g (1)
unstack d c (1)
put-down d (1)
unstack c h (1)
stack c f (1)
unstack b a (1)
put-down b (1)
pick-up a (1)
stack a c (1)
pick-up h (1)
stack h a (1)
pick-up k (1)
stack k h (1)
pick-up j (1)
stack j k (1)
pick-up d (1)
stack d j (1)
pick-up b (1)
stack b d (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-11-2)
(:domain BLOCKS)
(:objects E J D C F K H G A I B )
(:INIT (CLEAR B) (CLEAR I) (ONTABLE A) (ONTABLE G) (ON B H) (ON H K) (ON K F)
 (ON F C) (ON C D) (ON D J) (ON J A) (ON I E) (ON E G) (HANDEMPTY))
(:goal (AND (ON I G) (ON G C) (ON C D) (ON D E) (ON E J) (ON J B) (ON B H)
            (ON H A) (ON A F) (ON F K)))
)","unstack b h (1)
put-down b (1)
unstack h k (1)
stack h i (1)
unstack k f (1)
put-down k (1)
unstack f c (1)
stack f k (1)
unstack c d (1)
put-down c (1)
unstack d j (1)
stack d c (1)
unstack j a (1)
stack j d (1)
pick-up a (1)
stack a f (1)
unstack h i (1)
stack h a (1)
pick-up b (1)
stack b h (1)
unstack j d (1)
stack j b (1)
unstack i e (1)
put-down i (1)
unstack e g (1)
stack e j (1)
unstack d c (1)
stack d e (1)
pick-up c (1)
stack c d (1)
pick-up g (1)
stack g c (1)
pick-up i (1)
stack i g (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-12-0)
(:domain BLOCKS)
(:objects I D B E K G A F C J L H )
(:INIT (CLEAR H) (CLEAR L) (CLEAR J) (ONTABLE C) (ONTABLE F) (ONTABLE J)
 (ON H A) (ON A G) (ON G K) (ON K E) (ON E B) (ON B D) (ON D I) (ON I C)
 (ON L F) (HANDEMPTY))
(:goal (AND (ON I C) (ON C B) (ON B L) (ON L D) (ON D J) (ON J E) (ON E K)
            (ON K F) (ON F A) (ON A H) (ON H G)))
)","unstack h a (1)
stack h j (1)
unstack a g (1)
stack a l (1)
unstack g k (1)
put-down g (1)
unstack h j (1)
stack h g (1)
unstack a l (1)
stack a h (1)
unstack l f (1)
put-down l (1)
pick-up f (1)
stack f a (1)
unstack k e (1)
stack k f (1)
unstack e b (1)
stack e k (1)
pick-up j (1)
stack j e (1)
unstack b d (1)
put-down b (1)
unstack d i (1)
stack d j (1)
pick-up l (1)
stack l d (1)
pick-up b (1)
stack b l (1)
unstack i c (1)
put-down i (1)
pick-up c (1)
stack c b (1)
pick-up i (1)
stack i c (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-12-1)
(:domain BLOCKS)
(:objects E L A B F I H G D J K C )
(:INIT (CLEAR C) (CLEAR K) (ONTABLE J) (ONTABLE D) (ON C G) (ON G H) (ON H I)
 (ON I F) (ON F B) (ON B A) (ON A L) (ON L E) (ON E J) (ON K D) (HANDEMPTY))
(:goal (AND (ON J C) (ON C E) (ON E K) (ON K H) (ON H A) (ON A F) (ON F L)
            (ON L G) (ON G B) (ON B I) (ON I D)))
)","unstack c g (1)
put-down c (1)
unstack g h (1)
stack g c (1)
unstack h i (1)
put-down h (1)
unstack k d (1)
put-down k (1)
unstack i f (1)
stack i d (1)
unstack f b (1)
stack f h (1)
unstack b a (1)
stack b i (1)
unstack g c (1)
stack g b (1)
unstack a l (1)
stack a c (1)
unstack l e (1)
stack l g (1)
unstack f h (1)
stack f l (1)
unstack a c (1)
stack a f (1)
pick-up h (1)
stack h a (1)
pick-up k (1)
stack k h (1)
unstack e j (1)
stack e k (1)
pick-up c (1)
stack c e (1)
pick-up j (1)
stack j c (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-14-0)
(:domain BLOCKS)
(:objects I D B L C K M H J N E F G A )
(:INIT (CLEAR A) (CLEAR G) (CLEAR F) (ONTABLE E) (ONTABLE N) (ONTABLE F)
 (ON A J) (ON J H) (ON H M) (ON M K) (ON K C) (ON C L) (ON L B) (ON B E)
 (ON G D) (ON D I) (ON I N) (HANDEMPTY))
(:goal (AND (ON E L) (ON L F) (ON F B) (ON B J) (ON J I) (ON I N) (ON N C)
            (ON C K) (ON K G) (ON G D) (ON D M) (ON M A) (ON A H)))
)","unstack a j (1)
stack a f (1)
unstack j h (1)
put-down j (1)
unstack h m (1)
put-down h (1)
unstack a f (1)
stack a h (1)
unstack m k (1)
stack m a (1)
unstack g d (1)
stack g f (1)
unstack d i (1)
stack d m (1)
unstack g f (1)
stack g d (1)
unstack k c (1)
stack k g (1)
unstack c l (1)
stack c k (1)
unstack i n (1)
stack i f (1)
pick-up n (1)
stack n c (1)
unstack i f (1)
stack i n (1)
pick-up j (1)
stack j i (1)
unstack l b (1)
put-down l (1)
unstack b e (1)
stack b j (1)
pick-up f (1)
stack f b (1)
pick-up l (1)
stack l f (1)
pick-up e (1)
stack e l (1)"
blocks,"(define (domain BLOCKS)
  (:requirements :strips)
  (:predicates (on ?x ?y)
               (ontable ?x)
               (clear ?x)
               (handempty)
               (holding ?x)
               )

  (:action pick-up
             :parameters (?x)
             :precondition (and (clear ?x) (ontable ?x) (handempty))
             :effect
             (and (not (ontable ?x))
                   (not (clear ?x))
                   (not (handempty))
                   (holding ?x)))

  (:action put-down
             :parameters (?x)
             :precondition (holding ?x)
             :effect
             (and (not (holding ?x))
                   (clear ?x)
                   (handempty)
                   (ontable ?x)))
  (:action stack
             :parameters (?x ?y)
             :precondition (and (holding ?x) (clear ?y))
             :effect
             (and (not (holding ?x))
                   (not (clear ?y))
                   (clear ?x)
                   (handempty)
                   (on ?x ?y)))
  (:action unstack
             :parameters (?x ?y)
             :precondition (and (on ?x ?y) (clear ?x) (handempty))
             :effect
             (and (holding ?x)
                   (clear ?y)
                   (not (clear ?x))
                   (not (handempty))
                   (not (on ?x ?y)))))
","(define (problem BLOCKS-14-1)
(:domain BLOCKS)
(:objects K A F L D B M E J N H I C G )
(:INIT (CLEAR G) (CLEAR C) (CLEAR I) (CLEAR H) (CLEAR N) (ONTABLE J)
 (ONTABLE E) (ONTABLE M) (ONTABLE B) (ONTABLE N) (ON G J) (ON C E) (ON I D)
 (ON D L) (ON L M) (ON H F) (ON F A) (ON A K) (ON K B) (HANDEMPTY))
(:goal (AND (ON J D) (ON D B) (ON B H) (ON H M) (ON M K) (ON K F) (ON F G)
            (ON G A) (ON A I) (ON I E) (ON E L) (ON L N) (ON N C)))
)","unstack c e (1)
put-down c (1)
pick-up n (1)
stack n c (1)
unstack i d (1)
stack i g (1)
unstack d l (1)
put-down d (1)
unstack l m (1)
stack l n (1)
pick-up e (1)
stack e l (1)
unstack i g (1)
stack i e (1)
unstack h f (1)
stack h d (1)
unstack f a (1)
stack f h (1)
unstack a k (1)
stack a i (1)
unstack g j (1)
stack g a (1)
unstack f h (1)
stack f g (1)
unstack k b (1)
stack k f (1)
pick-up m (1)
stack m k (1)
unstack h d (1)
stack h m (1)
pick-up b (1)
stack b h (1)
pick-up d (1)
stack d b (1)
pick-up j (1)
stack j d (1)"
data-network-opt18,"(define (domain data-network)
(:requirements :adl :typing :negative-preconditions :equality :action-costs)
(:types
    data script server numbers
)
(:predicates
    (SCRIPT-IO ?s - script ?in1 - data ?in2 - data ?out - data)
    (CONNECTED ?from - server ?to - server)
    (DATA-SIZE ?d - data ?n - numbers)
    (CAPACITY ?s - server ?n - numbers)
    (SUM ?n1 - numbers ?n2 - numbers ?sum - numbers)
    (LESS-EQUAL ?n1 - numbers ?n2 - numbers)
    (saved ?d - data ?s - server)
    (cached ?d - data ?s - server)
    (usage ?s - server ?n - numbers)
)
(:functions
    (total-cost) - number
    (process-cost ?sc - script ?s - server) - number
    (send-cost ?from ?to - server ?size - numbers) - number
    (io-cost ?s - server ?size - numbers) - number
)
;; Release data from RAM.
(:action release
    :parameters (?d - data ?s - server ?size ?before ?after - numbers)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (SUM ?after ?size ?before)
        (cached ?d ?s)
        (usage ?s ?before)
    )
    :effect
    (and
        (not (cached ?d ?s))
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) 0)
    )
)

;; Save data from RAM to disk.
(:action save
    :parameters (?d - data ?size - numbers ?s - server)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (cached ?d ?s)
    )
    :effect
    (and
        (saved ?d ?s)
        (increase (total-cost) (io-cost ?s ?size))
    )
)

;; Load data from disk into RAM.
(:action load
    :parameters (?d - data ?s - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (CAPACITY ?s ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (saved ?d ?s)
        (not (cached ?d ?s))
        (usage ?s ?before)
    )
    :effect
    (and
        (cached ?d ?s)
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) (io-cost ?s ?size))
    )
)

;; Send data from RAM of one server to RAM of another server.
(:action send
    :parameters (?d - data ?from ?to - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (CONNECTED ?from ?to)
        (DATA-SIZE ?d ?size)
        (CAPACITY ?to ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (cached ?d ?from)
        (not (cached ?d ?to))
        (usage ?to ?before)
    )
    :effect
    (and
        (cached ?d ?to)
        (not (usage ?to ?before))
        (usage ?to ?after)
        (increase (total-cost) (send-cost ?from ?to ?size))
    )
)

;; Executes a script that processes two data items from RAM and produces another data item in RAM.
(:action process
    :parameters (?in1 ?in2 ?out - data ?sc - script ?s - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (SCRIPT-IO ?sc ?in1 ?in2 ?out)
        (DATA-SIZE ?out ?size)
        (CAPACITY ?s ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (cached ?in1 ?s)
        (cached ?in2 ?s)
        (not (cached ?out ?s))
        (usage ?s ?before)
    )
    :effect
    (and
        (cached ?out ?s)
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) (process-cost ?sc ?s))
    )
)

)","(define (problem p5-3-10-tiny-network-0)
(:domain data-network)
(:objects
    data-0-3 data-0-5 data-1-2 data-1-4 data-2-1 - data
    script1 script2 script3 script4 script5 script6 script7 script8 script9 script10 - script
    server1 server2 server3 - server
    number0 number1 number2 number3 number4 number5 number6 number7 number8 number9 number10 number11 number12 number13 number14 number15 number16 - numbers
)
(:init
    (SCRIPT-IO script1 data-0-3 data-0-5 data-1-4)
    (SCRIPT-IO script2 data-0-5 data-0-3 data-1-2)
    (SCRIPT-IO script3 data-1-4 data-0-5 data-2-1)
    (SCRIPT-IO script4 data-0-3 data-0-5 data-1-4)
    (SCRIPT-IO script5 data-1-2 data-0-5 data-2-1)
    (SCRIPT-IO script6 data-1-2 data-0-3 data-2-1)
    (SCRIPT-IO script7 data-0-5 data-0-3 data-1-2)
    (SCRIPT-IO script8 data-1-4 data-1-2 data-2-1)
    (SCRIPT-IO script9 data-0-3 data-0-5 data-1-4)
    (SCRIPT-IO script10 data-1-2 data-1-4 data-2-1)
    (CONNECTED server1 server2)
    (CONNECTED server2 server1)
    (CONNECTED server1 server3)
    (CONNECTED server3 server1)
    (DATA-SIZE data-0-3 number4)
    (DATA-SIZE data-0-5 number5)
    (DATA-SIZE data-1-2 number4)
    (DATA-SIZE data-1-4 number1)
    (DATA-SIZE data-2-1 number4)
    (CAPACITY server1 number16)
    (CAPACITY server2 number8)
    (CAPACITY server3 number8)
    (SUM number0 number1 number1)
    (SUM number0 number4 number4)
    (SUM number0 number5 number5)
    (SUM number1 number1 number2)
    (SUM number1 number4 number5)
    (SUM number1 number5 number6)
    (SUM number2 number1 number3)
    (SUM number2 number4 number6)
    (SUM number2 number5 number7)
    (SUM number3 number1 number4)
    (SUM number3 number4 number7)
    (SUM number3 number5 number8)
    (SUM number4 number1 number5)
    (SUM number4 number4 number8)
    (SUM number4 number5 number9)
    (SUM number5 number1 number6)
    (SUM number5 number4 number9)
    (SUM number5 number5 number10)
    (SUM number6 number1 number7)
    (SUM number6 number4 number10)
    (SUM number6 number5 number11)
    (SUM number7 number1 number8)
    (SUM number7 number4 number11)
    (SUM number7 number5 number12)
    (SUM number8 number1 number9)
    (SUM number8 number4 number12)
    (SUM number8 number5 number13)
    (SUM number9 number1 number10)
    (SUM number9 number4 number13)
    (SUM number9 number5 number14)
    (SUM number10 number1 number11)
    (SUM number10 number4 number14)
    (SUM number10 number5 number15)
    (SUM number11 number1 number12)
    (SUM number11 number4 number15)
    (SUM number11 number5 number16)
    (SUM number12 number1 number13)
    (SUM number12 number4 number16)
    (SUM number13 number1 number14)
    (SUM number14 number1 number15)
    (SUM number15 number1 number16)
    (LESS-EQUAL number1 number8)
    (LESS-EQUAL number1 number16)
    (LESS-EQUAL number2 number8)
    (LESS-EQUAL number2 number16)
    (LESS-EQUAL number3 number8)
    (LESS-EQUAL number3 number16)
    (LESS-EQUAL number4 number8)
    (LESS-EQUAL number4 number16)
    (LESS-EQUAL number5 number8)
    (LESS-EQUAL number5 number16)
    (LESS-EQUAL number6 number8)
    (LESS-EQUAL number6 number16)
    (LESS-EQUAL number7 number8)
    (LESS-EQUAL number7 number16)
    (LESS-EQUAL number8 number8)
    (LESS-EQUAL number8 number16)
    (LESS-EQUAL number9 number16)
    (LESS-EQUAL number10 number16)
    (LESS-EQUAL number11 number16)
    (LESS-EQUAL number12 number16)
    (LESS-EQUAL number13 number16)
    (LESS-EQUAL number14 number16)
    (LESS-EQUAL number15 number16)
    (LESS-EQUAL number16 number16)
    (= (total-cost) 0)
    (= (process-cost script1 server1) 16)
    (= (process-cost script1 server2) 11)
    (= (process-cost script1 server3) 9)
    (= (process-cost script2 server1) 22)
    (= (process-cost script2 server2) 11)
    (= (process-cost script2 server3) 10)
    (= (process-cost script3 server1) 16)
    (= (process-cost script3 server2) 10)
    (= (process-cost script3 server3) 10)
    (= (process-cost script4 server1) 26)
    (= (process-cost script4 server2) 9)
    (= (process-cost script4 server3) 8)
    (= (process-cost script5 server1) 26)
    (= (process-cost script5 server2) 8)
    (= (process-cost script5 server3) 6)
    (= (process-cost script6 server1) 20)
    (= (process-cost script6 server2) 7)
    (= (process-cost script6 server3) 11)
    (= (process-cost script7 server1) 19)
    (= (process-cost script7 server2) 9)
    (= (process-cost script7 server3) 10)
    (= (process-cost script8 server1) 18)
    (= (process-cost script8 server2) 7)
    (= (process-cost script8 server3) 6)
    (= (process-cost script9 server1) 18)
    (= (process-cost script9 server2) 10)
    (= (process-cost script9 server3) 13)
    (= (process-cost script10 server1) 22)
    (= (process-cost script10 server2) 8)
    (= (process-cost script10 server3) 12)
    (= (send-cost server1 server2 number1) 4)
    (= (send-cost server2 server1 number1) 4)
    (= (send-cost server1 server2 number4) 16)
    (= (send-cost server2 server1 number4) 16)
    (= (send-cost server1 server2 number5) 20)
    (= (send-cost server2 server1 number5) 20)
    (= (send-cost server1 server3 number1) 6)
    (= (send-cost server3 server1 number1) 6)
    (= (send-cost server1 server3 number4) 24)
    (= (send-cost server3 server1 number4) 24)
    (= (send-cost server1 server3 number5) 30)
    (= (send-cost server3 server1 number5) 30)
    (= (io-cost server1 number1) 5)
    (= (io-cost server1 number4) 20)
    (= (io-cost server1 number5) 25)
    (= (io-cost server2 number1) 1)
    (= (io-cost server2 number4) 4)
    (= (io-cost server2 number5) 5)
    (= (io-cost server3 number1) 1)
    (= (io-cost server3 number4) 4)
    (= (io-cost server3 number5) 5)
    (saved data-0-3 server3)
    (saved data-0-5 server1)
    (usage server1 number0)
    (usage server2 number0)
    (usage server3 number0)
)
(:goal
(and
    (saved data-2-1 server2)
)
)
(:metric minimize (total-cost))
)","load data-0-3 server3 number4 number8 number0 number4 (4)
send data-0-3 server3 server1 number4 number16 number0 number4 (24)
load data-0-5 server1 number5 number16 number4 number9 (25)
process data-0-3 data-0-5 data-1-4 script1 server1 number1 number16 number9 number10 (16)
process data-1-4 data-0-5 data-2-1 script3 server1 number4 number16 number10 number14 (16)
send data-2-1 server1 server2 number4 number8 number0 number4 (16)
save data-2-1 number4 server2 (4)"
data-network-opt18,"(define (domain data-network)
(:requirements :adl :typing :negative-preconditions :equality :action-costs)
(:types
    data script server numbers
)
(:predicates
    (SCRIPT-IO ?s - script ?in1 - data ?in2 - data ?out - data)
    (CONNECTED ?from - server ?to - server)
    (DATA-SIZE ?d - data ?n - numbers)
    (CAPACITY ?s - server ?n - numbers)
    (SUM ?n1 - numbers ?n2 - numbers ?sum - numbers)
    (LESS-EQUAL ?n1 - numbers ?n2 - numbers)
    (saved ?d - data ?s - server)
    (cached ?d - data ?s - server)
    (usage ?s - server ?n - numbers)
)
(:functions
    (total-cost) - number
    (process-cost ?sc - script ?s - server) - number
    (send-cost ?from ?to - server ?size - numbers) - number
    (io-cost ?s - server ?size - numbers) - number
)
;; Release data from RAM.
(:action release
    :parameters (?d - data ?s - server ?size ?before ?after - numbers)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (SUM ?after ?size ?before)
        (cached ?d ?s)
        (usage ?s ?before)
    )
    :effect
    (and
        (not (cached ?d ?s))
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) 0)
    )
)

;; Save data from RAM to disk.
(:action save
    :parameters (?d - data ?size - numbers ?s - server)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (cached ?d ?s)
    )
    :effect
    (and
        (saved ?d ?s)
        (increase (total-cost) (io-cost ?s ?size))
    )
)

;; Load data from disk into RAM.
(:action load
    :parameters (?d - data ?s - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (CAPACITY ?s ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (saved ?d ?s)
        (not (cached ?d ?s))
        (usage ?s ?before)
    )
    :effect
    (and
        (cached ?d ?s)
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) (io-cost ?s ?size))
    )
)

;; Send data from RAM of one server to RAM of another server.
(:action send
    :parameters (?d - data ?from ?to - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (CONNECTED ?from ?to)
        (DATA-SIZE ?d ?size)
        (CAPACITY ?to ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (cached ?d ?from)
        (not (cached ?d ?to))
        (usage ?to ?before)
    )
    :effect
    (and
        (cached ?d ?to)
        (not (usage ?to ?before))
        (usage ?to ?after)
        (increase (total-cost) (send-cost ?from ?to ?size))
    )
)

;; Executes a script that processes two data items from RAM and produces another data item in RAM.
(:action process
    :parameters (?in1 ?in2 ?out - data ?sc - script ?s - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (SCRIPT-IO ?sc ?in1 ?in2 ?out)
        (DATA-SIZE ?out ?size)
        (CAPACITY ?s ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (cached ?in1 ?s)
        (cached ?in2 ?s)
        (not (cached ?out ?s))
        (usage ?s ?before)
    )
    :effect
    (and
        (cached ?out ?s)
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) (process-cost ?sc ?s))
    )
)

)","(define (problem p6-3-11-tiny-network-1)
(:domain data-network)
(:objects
    data-0-1 data-0-3 data-0-5 data-1-2 data-1-4 data-2-6 - data
    script1 script2 script3 script4 script5 script6 script7 script8 script9 script10 script11 - script
    server1 server2 server3 - server
    number0 number1 number2 number3 number4 number5 number6 number7 number8 number9 number10 number11 number12 number13 number14 number15 number16 - numbers
)
(:init
    (SCRIPT-IO script1 data-0-5 data-0-1 data-1-4)
    (SCRIPT-IO script2 data-0-5 data-0-3 data-1-2)
    (SCRIPT-IO script3 data-1-2 data-0-5 data-2-6)
    (SCRIPT-IO script4 data-0-3 data-0-5 data-1-2)
    (SCRIPT-IO script5 data-1-4 data-0-5 data-2-6)
    (SCRIPT-IO script6 data-1-4 data-0-5 data-2-6)
    (SCRIPT-IO script7 data-1-2 data-1-4 data-2-6)
    (SCRIPT-IO script8 data-0-1 data-0-3 data-1-4)
    (SCRIPT-IO script9 data-1-2 data-0-5 data-2-6)
    (SCRIPT-IO script10 data-1-4 data-0-1 data-2-6)
    (SCRIPT-IO script11 data-1-2 data-0-1 data-2-6)
    (CONNECTED server1 server2)
    (CONNECTED server2 server1)
    (CONNECTED server1 server3)
    (CONNECTED server3 server1)
    (DATA-SIZE data-0-1 number2)
    (DATA-SIZE data-0-3 number4)
    (DATA-SIZE data-0-5 number4)
    (DATA-SIZE data-1-2 number1)
    (DATA-SIZE data-1-4 number5)
    (DATA-SIZE data-2-6 number1)
    (CAPACITY server1 number16)
    (CAPACITY server2 number8)
    (CAPACITY server3 number8)
    (SUM number0 number1 number1)
    (SUM number0 number2 number2)
    (SUM number0 number4 number4)
    (SUM number0 number5 number5)
    (SUM number1 number1 number2)
    (SUM number1 number2 number3)
    (SUM number1 number4 number5)
    (SUM number1 number5 number6)
    (SUM number2 number1 number3)
    (SUM number2 number2 number4)
    (SUM number2 number4 number6)
    (SUM number2 number5 number7)
    (SUM number3 number1 number4)
    (SUM number3 number2 number5)
    (SUM number3 number4 number7)
    (SUM number3 number5 number8)
    (SUM number4 number1 number5)
    (SUM number4 number2 number6)
    (SUM number4 number4 number8)
    (SUM number4 number5 number9)
    (SUM number5 number1 number6)
    (SUM number5 number2 number7)
    (SUM number5 number4 number9)
    (SUM number5 number5 number10)
    (SUM number6 number1 number7)
    (SUM number6 number2 number8)
    (SUM number6 number4 number10)
    (SUM number6 number5 number11)
    (SUM number7 number1 number8)
    (SUM number7 number2 number9)
    (SUM number7 number4 number11)
    (SUM number7 number5 number12)
    (SUM number8 number1 number9)
    (SUM number8 number2 number10)
    (SUM number8 number4 number12)
    (SUM number8 number5 number13)
    (SUM number9 number1 number10)
    (SUM number9 number2 number11)
    (SUM number9 number4 number13)
    (SUM number9 number5 number14)
    (SUM number10 number1 number11)
    (SUM number10 number2 number12)
    (SUM number10 number4 number14)
    (SUM number10 number5 number15)
    (SUM number11 number1 number12)
    (SUM number11 number2 number13)
    (SUM number11 number4 number15)
    (SUM number11 number5 number16)
    (SUM number12 number1 number13)
    (SUM number12 number2 number14)
    (SUM number12 number4 number16)
    (SUM number13 number1 number14)
    (SUM number13 number2 number15)
    (SUM number14 number1 number15)
    (SUM number14 number2 number16)
    (SUM number15 number1 number16)
    (LESS-EQUAL number1 number8)
    (LESS-EQUAL number1 number16)
    (LESS-EQUAL number2 number8)
    (LESS-EQUAL number2 number16)
    (LESS-EQUAL number3 number8)
    (LESS-EQUAL number3 number16)
    (LESS-EQUAL number4 number8)
    (LESS-EQUAL number4 number16)
    (LESS-EQUAL number5 number8)
    (LESS-EQUAL number5 number16)
    (LESS-EQUAL number6 number8)
    (LESS-EQUAL number6 number16)
    (LESS-EQUAL number7 number8)
    (LESS-EQUAL number7 number16)
    (LESS-EQUAL number8 number8)
    (LESS-EQUAL number8 number16)
    (LESS-EQUAL number9 number16)
    (LESS-EQUAL number10 number16)
    (LESS-EQUAL number11 number16)
    (LESS-EQUAL number12 number16)
    (LESS-EQUAL number13 number16)
    (LESS-EQUAL number14 number16)
    (LESS-EQUAL number15 number16)
    (LESS-EQUAL number16 number16)
    (= (total-cost) 0)
    (= (process-cost script1 server1) 21)
    (= (process-cost script1 server2) 10)
    (= (process-cost script1 server3) 10)
    (= (process-cost script2 server1) 18)
    (= (process-cost script2 server2) 11)
    (= (process-cost script2 server3) 12)
    (= (process-cost script3 server1) 18)
    (= (process-cost script3 server2) 6)
    (= (process-cost script3 server3) 11)
    (= (process-cost script4 server1) 16)
    (= (process-cost script4 server2) 6)
    (= (process-cost script4 server3) 9)
    (= (process-cost script5 server1) 26)
    (= (process-cost script5 server2) 8)
    (= (process-cost script5 server3) 11)
    (= (process-cost script6 server1) 17)
    (= (process-cost script6 server2) 9)
    (= (process-cost script6 server3) 13)
    (= (process-cost script7 server1) 16)
    (= (process-cost script7 server2) 8)
    (= (process-cost script7 server3) 10)
    (= (process-cost script8 server1) 19)
    (= (process-cost script8 server2) 13)
    (= (process-cost script8 server3) 9)
    (= (process-cost script9 server1) 26)
    (= (process-cost script9 server2) 12)
    (= (process-cost script9 server3) 11)
    (= (process-cost script10 server1) 23)
    (= (process-cost script10 server2) 12)
    (= (process-cost script10 server3) 10)
    (= (process-cost script11 server1) 26)
    (= (process-cost script11 server2) 9)
    (= (process-cost script11 server3) 6)
    (= (send-cost server1 server2 number1) 4)
    (= (send-cost server2 server1 number1) 4)
    (= (send-cost server1 server2 number2) 8)
    (= (send-cost server2 server1 number2) 8)
    (= (send-cost server1 server2 number4) 16)
    (= (send-cost server2 server1 number4) 16)
    (= (send-cost server1 server2 number5) 20)
    (= (send-cost server2 server1 number5) 20)
    (= (send-cost server1 server3 number1) 6)
    (= (send-cost server3 server1 number1) 6)
    (= (send-cost server1 server3 number2) 12)
    (= (send-cost server3 server1 number2) 12)
    (= (send-cost server1 server3 number4) 24)
    (= (send-cost server3 server1 number4) 24)
    (= (send-cost server1 server3 number5) 30)
    (= (send-cost server3 server1 number5) 30)
    (= (io-cost server1 number1) 5)
    (= (io-cost server1 number2) 10)
    (= (io-cost server1 number4) 20)
    (= (io-cost server1 number5) 25)
    (= (io-cost server2 number1) 1)
    (= (io-cost server2 number2) 2)
    (= (io-cost server2 number4) 4)
    (= (io-cost server2 number5) 5)
    (= (io-cost server3 number1) 1)
    (= (io-cost server3 number2) 2)
    (= (io-cost server3 number4) 4)
    (= (io-cost server3 number5) 5)
    (saved data-0-1 server1)
    (saved data-0-3 server2)
    (saved data-0-5 server2)
    (usage server1 number0)
    (usage server2 number0)
    (usage server3 number0)
)
(:goal
(and
    (saved data-2-6 server1)
)
)
(:metric minimize (total-cost))
)","load data-0-5 server2 number4 number8 number0 number4 (4)
load data-0-1 server1 number2 number16 number0 number2 (10)
send data-0-5 server2 server1 number4 number16 number2 number6 (16)
process data-0-5 data-0-1 data-1-4 script1 server1 number5 number16 number6 number11 (21)
process data-1-4 data-0-5 data-2-6 script6 server1 number1 number16 number11 number12 (17)
save data-2-6 number1 server1 (5)"
data-network-opt18,"(define (domain data-network)
(:requirements :adl :typing :negative-preconditions :equality :action-costs)
(:types
    data script server numbers
)
(:predicates
    (SCRIPT-IO ?s - script ?in1 - data ?in2 - data ?out - data)
    (CONNECTED ?from - server ?to - server)
    (DATA-SIZE ?d - data ?n - numbers)
    (CAPACITY ?s - server ?n - numbers)
    (SUM ?n1 - numbers ?n2 - numbers ?sum - numbers)
    (LESS-EQUAL ?n1 - numbers ?n2 - numbers)
    (saved ?d - data ?s - server)
    (cached ?d - data ?s - server)
    (usage ?s - server ?n - numbers)
)
(:functions
    (total-cost) - number
    (process-cost ?sc - script ?s - server) - number
    (send-cost ?from ?to - server ?size - numbers) - number
    (io-cost ?s - server ?size - numbers) - number
)
;; Release data from RAM.
(:action release
    :parameters (?d - data ?s - server ?size ?before ?after - numbers)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (SUM ?after ?size ?before)
        (cached ?d ?s)
        (usage ?s ?before)
    )
    :effect
    (and
        (not (cached ?d ?s))
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) 0)
    )
)

;; Save data from RAM to disk.
(:action save
    :parameters (?d - data ?size - numbers ?s - server)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (cached ?d ?s)
    )
    :effect
    (and
        (saved ?d ?s)
        (increase (total-cost) (io-cost ?s ?size))
    )
)

;; Load data from disk into RAM.
(:action load
    :parameters (?d - data ?s - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (CAPACITY ?s ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (saved ?d ?s)
        (not (cached ?d ?s))
        (usage ?s ?before)
    )
    :effect
    (and
        (cached ?d ?s)
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) (io-cost ?s ?size))
    )
)

;; Send data from RAM of one server to RAM of another server.
(:action send
    :parameters (?d - data ?from ?to - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (CONNECTED ?from ?to)
        (DATA-SIZE ?d ?size)
        (CAPACITY ?to ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (cached ?d ?from)
        (not (cached ?d ?to))
        (usage ?to ?before)
    )
    :effect
    (and
        (cached ?d ?to)
        (not (usage ?to ?before))
        (usage ?to ?after)
        (increase (total-cost) (send-cost ?from ?to ?size))
    )
)

;; Executes a script that processes two data items from RAM and produces another data item in RAM.
(:action process
    :parameters (?in1 ?in2 ?out - data ?sc - script ?s - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (SCRIPT-IO ?sc ?in1 ?in2 ?out)
        (DATA-SIZE ?out ?size)
        (CAPACITY ?s ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (cached ?in1 ?s)
        (cached ?in2 ?s)
        (not (cached ?out ?s))
        (usage ?s ?before)
    )
    :effect
    (and
        (cached ?out ?s)
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) (process-cost ?sc ?s))
    )
)

)","(define (problem p7-3-12-tiny-network-2)
(:domain data-network)
(:objects
    data-0-5 data-0-6 data-1-1 data-1-3 data-1-4 data-2-2 data-2-7 - data
    script1 script2 script3 script4 script5 script6 script7 script8 script9 script10 script11 script12 - script
    server1 server2 server3 - server
    number0 number1 number2 number3 number4 number5 number6 number7 number8 number9 number10 number11 number12 number13 number14 number15 number16 - numbers
)
(:init
    (SCRIPT-IO script1 data-0-5 data-0-6 data-1-4)
    (SCRIPT-IO script2 data-0-6 data-0-5 data-1-1)
    (SCRIPT-IO script3 data-0-5 data-0-6 data-1-3)
    (SCRIPT-IO script4 data-1-3 data-0-6 data-2-7)
    (SCRIPT-IO script5 data-1-3 data-0-6 data-2-2)
    (SCRIPT-IO script6 data-1-4 data-0-5 data-2-2)
    (SCRIPT-IO script7 data-0-6 data-0-5 data-1-1)
    (SCRIPT-IO script8 data-0-5 data-0-6 data-1-4)
    (SCRIPT-IO script9 data-1-3 data-0-5 data-2-2)
    (SCRIPT-IO script10 data-1-1 data-1-4 data-2-7)
    (SCRIPT-IO script11 data-1-3 data-0-5 data-2-2)
    (SCRIPT-IO script12 data-1-1 data-1-3 data-2-2)
    (CONNECTED server1 server2)
    (CONNECTED server2 server1)
    (CONNECTED server1 server3)
    (CONNECTED server3 server1)
    (DATA-SIZE data-0-5 number1)
    (DATA-SIZE data-0-6 number3)
    (DATA-SIZE data-1-1 number4)
    (DATA-SIZE data-1-3 number1)
    (DATA-SIZE data-1-4 number1)
    (DATA-SIZE data-2-2 number3)
    (DATA-SIZE data-2-7 number4)
    (CAPACITY server1 number16)
    (CAPACITY server2 number8)
    (CAPACITY server3 number8)
    (SUM number0 number1 number1)
    (SUM number0 number3 number3)
    (SUM number0 number4 number4)
    (SUM number1 number1 number2)
    (SUM number1 number3 number4)
    (SUM number1 number4 number5)
    (SUM number2 number1 number3)
    (SUM number2 number3 number5)
    (SUM number2 number4 number6)
    (SUM number3 number1 number4)
    (SUM number3 number3 number6)
    (SUM number3 number4 number7)
    (SUM number4 number1 number5)
    (SUM number4 number3 number7)
    (SUM number4 number4 number8)
    (SUM number5 number1 number6)
    (SUM number5 number3 number8)
    (SUM number5 number4 number9)
    (SUM number6 number1 number7)
    (SUM number6 number3 number9)
    (SUM number6 number4 number10)
    (SUM number7 number1 number8)
    (SUM number7 number3 number10)
    (SUM number7 number4 number11)
    (SUM number8 number1 number9)
    (SUM number8 number3 number11)
    (SUM number8 number4 number12)
    (SUM number9 number1 number10)
    (SUM number9 number3 number12)
    (SUM number9 number4 number13)
    (SUM number10 number1 number11)
    (SUM number10 number3 number13)
    (SUM number10 number4 number14)
    (SUM number11 number1 number12)
    (SUM number11 number3 number14)
    (SUM number11 number4 number15)
    (SUM number12 number1 number13)
    (SUM number12 number3 number15)
    (SUM number12 number4 number16)
    (SUM number13 number1 number14)
    (SUM number13 number3 number16)
    (SUM number14 number1 number15)
    (SUM number15 number1 number16)
    (LESS-EQUAL number1 number8)
    (LESS-EQUAL number1 number16)
    (LESS-EQUAL number2 number8)
    (LESS-EQUAL number2 number16)
    (LESS-EQUAL number3 number8)
    (LESS-EQUAL number3 number16)
    (LESS-EQUAL number4 number8)
    (LESS-EQUAL number4 number16)
    (LESS-EQUAL number5 number8)
    (LESS-EQUAL number5 number16)
    (LESS-EQUAL number6 number8)
    (LESS-EQUAL number6 number16)
    (LESS-EQUAL number7 number8)
    (LESS-EQUAL number7 number16)
    (LESS-EQUAL number8 number8)
    (LESS-EQUAL number8 number16)
    (LESS-EQUAL number9 number16)
    (LESS-EQUAL number10 number16)
    (LESS-EQUAL number11 number16)
    (LESS-EQUAL number12 number16)
    (LESS-EQUAL number13 number16)
    (LESS-EQUAL number14 number16)
    (LESS-EQUAL number15 number16)
    (LESS-EQUAL number16 number16)
    (= (total-cost) 0)
    (= (process-cost script1 server1) 19)
    (= (process-cost script1 server2) 11)
    (= (process-cost script1 server3) 8)
    (= (process-cost script2 server1) 22)
    (= (process-cost script2 server2) 12)
    (= (process-cost script2 server3) 11)
    (= (process-cost script3 server1) 22)
    (= (process-cost script3 server2) 8)
    (= (process-cost script3 server3) 9)
    (= (process-cost script4 server1) 16)
    (= (process-cost script4 server2) 10)
    (= (process-cost script4 server3) 13)
    (= (process-cost script5 server1) 17)
    (= (process-cost script5 server2) 9)
    (= (process-cost script5 server3) 11)
    (= (process-cost script6 server1) 24)
    (= (process-cost script6 server2) 13)
    (= (process-cost script6 server3) 9)
    (= (process-cost script7 server1) 12)
    (= (process-cost script7 server2) 9)
    (= (process-cost script7 server3) 7)
    (= (process-cost script8 server1) 13)
    (= (process-cost script8 server2) 10)
    (= (process-cost script8 server3) 10)
    (= (process-cost script9 server1) 20)
    (= (process-cost script9 server2) 10)
    (= (process-cost script9 server3) 5)
    (= (process-cost script10 server1) 24)
    (= (process-cost script10 server2) 13)
    (= (process-cost script10 server3) 10)
    (= (process-cost script11 server1) 15)
    (= (process-cost script11 server2) 13)
    (= (process-cost script11 server3) 14)
    (= (process-cost script12 server1) 20)
    (= (process-cost script12 server2) 9)
    (= (process-cost script12 server3) 12)
    (= (send-cost server1 server2 number1) 4)
    (= (send-cost server2 server1 number1) 4)
    (= (send-cost server1 server2 number3) 12)
    (= (send-cost server2 server1 number3) 12)
    (= (send-cost server1 server2 number4) 16)
    (= (send-cost server2 server1 number4) 16)
    (= (send-cost server1 server3 number1) 6)
    (= (send-cost server3 server1 number1) 6)
    (= (send-cost server1 server3 number3) 18)
    (= (send-cost server3 server1 number3) 18)
    (= (send-cost server1 server3 number4) 24)
    (= (send-cost server3 server1 number4) 24)
    (= (io-cost server1 number1) 5)
    (= (io-cost server1 number3) 15)
    (= (io-cost server1 number4) 20)
    (= (io-cost server2 number1) 1)
    (= (io-cost server2 number3) 3)
    (= (io-cost server2 number4) 4)
    (= (io-cost server3 number1) 1)
    (= (io-cost server3 number3) 3)
    (= (io-cost server3 number4) 4)
    (saved data-0-5 server3)
    (saved data-0-6 server3)
    (usage server1 number0)
    (usage server2 number0)
    (usage server3 number0)
)
(:goal
(and
    (saved data-2-2 server2)
    (saved data-2-7 server2)
)
)
(:metric minimize (total-cost))
)","load data-0-6 server3 number3 number8 number0 number3 (3)
load data-0-5 server3 number1 number8 number3 number4 (1)
send data-0-5 server3 server1 number1 number16 number0 number1 (6)
release data-0-5 server3 number1 number4 number3 (0)
send data-0-6 server3 server1 number3 number16 number1 number4 (18)
send data-0-6 server1 server2 number3 number8 number0 number3 (12)
send data-0-5 server1 server2 number1 number8 number3 number4 (4)
process data-0-5 data-0-6 data-1-3 script3 server2 number1 number8 number4 number5 (8)
process data-1-3 data-0-6 data-2-2 script5 server2 number3 number8 number5 number8 (9)
save data-2-2 number3 server2 (3)
release data-0-5 server2 number1 number8 number7 (0)
release data-2-2 server2 number3 number7 number4 (0)
process data-1-3 data-0-6 data-2-7 script4 server2 number4 number8 number4 number8 (10)"
data-network-opt18,"(define (domain data-network)
(:requirements :adl :typing :negative-preconditions :equality :action-costs)
(:types
    data script server numbers
)
(:predicates
    (SCRIPT-IO ?s - script ?in1 - data ?in2 - data ?out - data)
    (CONNECTED ?from - server ?to - server)
    (DATA-SIZE ?d - data ?n - numbers)
    (CAPACITY ?s - server ?n - numbers)
    (SUM ?n1 - numbers ?n2 - numbers ?sum - numbers)
    (LESS-EQUAL ?n1 - numbers ?n2 - numbers)
    (saved ?d - data ?s - server)
    (cached ?d - data ?s - server)
    (usage ?s - server ?n - numbers)
)
(:functions
    (total-cost) - number
    (process-cost ?sc - script ?s - server) - number
    (send-cost ?from ?to - server ?size - numbers) - number
    (io-cost ?s - server ?size - numbers) - number
)
;; Release data from RAM.
(:action release
    :parameters (?d - data ?s - server ?size ?before ?after - numbers)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (SUM ?after ?size ?before)
        (cached ?d ?s)
        (usage ?s ?before)
    )
    :effect
    (and
        (not (cached ?d ?s))
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) 0)
    )
)

;; Save data from RAM to disk.
(:action save
    :parameters (?d - data ?size - numbers ?s - server)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (cached ?d ?s)
    )
    :effect
    (and
        (saved ?d ?s)
        (increase (total-cost) (io-cost ?s ?size))
    )
)

;; Load data from disk into RAM.
(:action load
    :parameters (?d - data ?s - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (CAPACITY ?s ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (saved ?d ?s)
        (not (cached ?d ?s))
        (usage ?s ?before)
    )
    :effect
    (and
        (cached ?d ?s)
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) (io-cost ?s ?size))
    )
)

;; Send data from RAM of one server to RAM of another server.
(:action send
    :parameters (?d - data ?from ?to - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (CONNECTED ?from ?to)
        (DATA-SIZE ?d ?size)
        (CAPACITY ?to ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (cached ?d ?from)
        (not (cached ?d ?to))
        (usage ?to ?before)
    )
    :effect
    (and
        (cached ?d ?to)
        (not (usage ?to ?before))
        (usage ?to ?after)
        (increase (total-cost) (send-cost ?from ?to ?size))
    )
)

;; Executes a script that processes two data items from RAM and produces another data item in RAM.
(:action process
    :parameters (?in1 ?in2 ?out - data ?sc - script ?s - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (SCRIPT-IO ?sc ?in1 ?in2 ?out)
        (DATA-SIZE ?out ?size)
        (CAPACITY ?s ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (cached ?in1 ?s)
        (cached ?in2 ?s)
        (not (cached ?out ?s))
        (usage ?s ?before)
    )
    :effect
    (and
        (cached ?out ?s)
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) (process-cost ?sc ?s))
    )
)

)","(define (problem p8-3-23-tiny-network-3)
(:domain data-network)
(:objects
    data-0-7 data-0-8 data-1-1 data-1-3 data-1-5 data-2-2 data-2-4 data-2-6 - data
    script1 script2 script3 script4 script5 script6 script7 script8 script9 script10 script11 script12 script13 script14 script15 script16 script17 script18 script19 script20 script21 script22 script23 - script
    server1 server2 server3 - server
    number0 number1 number2 number3 number4 number5 number6 number7 number8 number9 number10 number11 number12 number13 number14 number15 number16 - numbers
)
(:init
    (SCRIPT-IO script1 data-0-7 data-0-8 data-1-5)
    (SCRIPT-IO script2 data-0-8 data-0-7 data-1-1)
    (SCRIPT-IO script3 data-0-7 data-0-8 data-1-3)
    (SCRIPT-IO script4 data-1-5 data-0-7 data-2-4)
    (SCRIPT-IO script5 data-1-3 data-0-8 data-2-6)
    (SCRIPT-IO script6 data-1-3 data-1-5 data-2-2)
    (SCRIPT-IO script7 data-1-1 data-0-8 data-2-2)
    (SCRIPT-IO script8 data-1-3 data-0-7 data-2-6)
    (SCRIPT-IO script9 data-0-7 data-0-8 data-1-5)
    (SCRIPT-IO script10 data-1-3 data-1-1 data-2-4)
    (SCRIPT-IO script11 data-1-5 data-0-7 data-2-2)
    (SCRIPT-IO script12 data-0-8 data-0-7 data-1-5)
    (SCRIPT-IO script13 data-0-7 data-0-8 data-1-5)
    (SCRIPT-IO script14 data-0-7 data-0-8 data-1-1)
    (SCRIPT-IO script15 data-1-1 data-1-3 data-2-6)
    (SCRIPT-IO script16 data-1-5 data-0-8 data-2-4)
    (SCRIPT-IO script17 data-0-7 data-0-8 data-1-3)
    (SCRIPT-IO script18 data-1-1 data-0-8 data-2-6)
    (SCRIPT-IO script19 data-1-5 data-0-8 data-2-6)
    (SCRIPT-IO script20 data-0-8 data-0-7 data-1-5)
    (SCRIPT-IO script21 data-0-8 data-0-7 data-1-3)
    (SCRIPT-IO script22 data-1-1 data-0-8 data-2-6)
    (SCRIPT-IO script23 data-1-5 data-0-7 data-2-6)
    (CONNECTED server1 server2)
    (CONNECTED server2 server1)
    (CONNECTED server1 server3)
    (CONNECTED server3 server1)
    (DATA-SIZE data-0-7 number4)
    (DATA-SIZE data-0-8 number3)
    (DATA-SIZE data-1-1 number1)
    (DATA-SIZE data-1-3 number1)
    (DATA-SIZE data-1-5 number1)
    (DATA-SIZE data-2-2 number4)
    (DATA-SIZE data-2-4 number2)
    (DATA-SIZE data-2-6 number1)
    (CAPACITY server1 number16)
    (CAPACITY server2 number8)
    (CAPACITY server3 number8)
    (SUM number0 number1 number1)
    (SUM number0 number2 number2)
    (SUM number0 number3 number3)
    (SUM number0 number4 number4)
    (SUM number1 number1 number2)
    (SUM number1 number2 number3)
    (SUM number1 number3 number4)
    (SUM number1 number4 number5)
    (SUM number2 number1 number3)
    (SUM number2 number2 number4)
    (SUM number2 number3 number5)
    (SUM number2 number4 number6)
    (SUM number3 number1 number4)
    (SUM number3 number2 number5)
    (SUM number3 number3 number6)
    (SUM number3 number4 number7)
    (SUM number4 number1 number5)
    (SUM number4 number2 number6)
    (SUM number4 number3 number7)
    (SUM number4 number4 number8)
    (SUM number5 number1 number6)
    (SUM number5 number2 number7)
    (SUM number5 number3 number8)
    (SUM number5 number4 number9)
    (SUM number6 number1 number7)
    (SUM number6 number2 number8)
    (SUM number6 number3 number9)
    (SUM number6 number4 number10)
    (SUM number7 number1 number8)
    (SUM number7 number2 number9)
    (SUM number7 number3 number10)
    (SUM number7 number4 number11)
    (SUM number8 number1 number9)
    (SUM number8 number2 number10)
    (SUM number8 number3 number11)
    (SUM number8 number4 number12)
    (SUM number9 number1 number10)
    (SUM number9 number2 number11)
    (SUM number9 number3 number12)
    (SUM number9 number4 number13)
    (SUM number10 number1 number11)
    (SUM number10 number2 number12)
    (SUM number10 number3 number13)
    (SUM number10 number4 number14)
    (SUM number11 number1 number12)
    (SUM number11 number2 number13)
    (SUM number11 number3 number14)
    (SUM number11 number4 number15)
    (SUM number12 number1 number13)
    (SUM number12 number2 number14)
    (SUM number12 number3 number15)
    (SUM number12 number4 number16)
    (SUM number13 number1 number14)
    (SUM number13 number2 number15)
    (SUM number13 number3 number16)
    (SUM number14 number1 number15)
    (SUM number14 number2 number16)
    (SUM number15 number1 number16)
    (LESS-EQUAL number1 number8)
    (LESS-EQUAL number1 number16)
    (LESS-EQUAL number2 number8)
    (LESS-EQUAL number2 number16)
    (LESS-EQUAL number3 number8)
    (LESS-EQUAL number3 number16)
    (LESS-EQUAL number4 number8)
    (LESS-EQUAL number4 number16)
    (LESS-EQUAL number5 number8)
    (LESS-EQUAL number5 number16)
    (LESS-EQUAL number6 number8)
    (LESS-EQUAL number6 number16)
    (LESS-EQUAL number7 number8)
    (LESS-EQUAL number7 number16)
    (LESS-EQUAL number8 number8)
    (LESS-EQUAL number8 number16)
    (LESS-EQUAL number9 number16)
    (LESS-EQUAL number10 number16)
    (LESS-EQUAL number11 number16)
    (LESS-EQUAL number12 number16)
    (LESS-EQUAL number13 number16)
    (LESS-EQUAL number14 number16)
    (LESS-EQUAL number15 number16)
    (LESS-EQUAL number16 number16)
    (= (total-cost) 0)
    (= (process-cost script1 server1) 21)
    (= (process-cost script1 server2) 8)
    (= (process-cost script1 server3) 8)
    (= (process-cost script2 server1) 22)
    (= (process-cost script2 server2) 9)
    (= (process-cost script2 server3) 10)
    (= (process-cost script3 server1) 22)
    (= (process-cost script3 server2) 14)
    (= (process-cost script3 server3) 8)
    (= (process-cost script4 server1) 15)
    (= (process-cost script4 server2) 10)
    (= (process-cost script4 server3) 11)
    (= (process-cost script5 server1) 23)
    (= (process-cost script5 server2) 8)
    (= (process-cost script5 server3) 10)
    (= (process-cost script6 server1) 19)
    (= (process-cost script6 server2) 9)
    (= (process-cost script6 server3) 8)
    (= (process-cost script7 server1) 27)
    (= (process-cost script7 server2) 11)
    (= (process-cost script7 server3) 12)
    (= (process-cost script8 server1) 20)
    (= (process-cost script8 server2) 11)
    (= (process-cost script8 server3) 6)
    (= (process-cost script9 server1) 14)
    (= (process-cost script9 server2) 7)
    (= (process-cost script9 server3) 10)
    (= (process-cost script10 server1) 21)
    (= (process-cost script10 server2) 8)
    (= (process-cost script10 server3) 8)
    (= (process-cost script11 server1) 27)
    (= (process-cost script11 server2) 8)
    (= (process-cost script11 server3) 10)
    (= (process-cost script12 server1) 20)
    (= (process-cost script12 server2) 8)
    (= (process-cost script12 server3) 9)
    (= (process-cost script13 server1) 15)
    (= (process-cost script13 server2) 8)
    (= (process-cost script13 server3) 11)
    (= (process-cost script14 server1) 17)
    (= (process-cost script14 server2) 8)
    (= (process-cost script14 server3) 8)
    (= (process-cost script15 server1) 20)
    (= (process-cost script15 server2) 4)
    (= (process-cost script15 server3) 9)
    (= (process-cost script16 server1) 19)
    (= (process-cost script16 server2) 12)
    (= (process-cost script16 server3) 11)
    (= (process-cost script17 server1) 27)
    (= (process-cost script17 server2) 9)
    (= (process-cost script17 server3) 10)
    (= (process-cost script18 server1) 24)
    (= (process-cost script18 server2) 8)
    (= (process-cost script18 server3) 8)
    (= (process-cost script19 server1) 25)
    (= (process-cost script19 server2) 10)
    (= (process-cost script19 server3) 8)
    (= (process-cost script20 server1) 22)
    (= (process-cost script20 server2) 10)
    (= (process-cost script20 server3) 8)
    (= (process-cost script21 server1) 20)
    (= (process-cost script21 server2) 12)
    (= (process-cost script21 server3) 10)
    (= (process-cost script22 server1) 14)
    (= (process-cost script22 server2) 11)
    (= (process-cost script22 server3) 9)
    (= (process-cost script23 server1) 25)
    (= (process-cost script23 server2) 9)
    (= (process-cost script23 server3) 10)
    (= (send-cost server1 server2 number1) 4)
    (= (send-cost server2 server1 number1) 4)
    (= (send-cost server1 server2 number2) 8)
    (= (send-cost server2 server1 number2) 8)
    (= (send-cost server1 server2 number3) 12)
    (= (send-cost server2 server1 number3) 12)
    (= (send-cost server1 server2 number4) 16)
    (= (send-cost server2 server1 number4) 16)
    (= (send-cost server1 server3 number1) 6)
    (= (send-cost server3 server1 number1) 6)
    (= (send-cost server1 server3 number2) 12)
    (= (send-cost server3 server1 number2) 12)
    (= (send-cost server1 server3 number3) 18)
    (= (send-cost server3 server1 number3) 18)
    (= (send-cost server1 server3 number4) 24)
    (= (send-cost server3 server1 number4) 24)
    (= (io-cost server1 number1) 5)
    (= (io-cost server1 number2) 10)
    (= (io-cost server1 number3) 15)
    (= (io-cost server1 number4) 20)
    (= (io-cost server2 number1) 1)
    (= (io-cost server2 number2) 2)
    (= (io-cost server2 number3) 3)
    (= (io-cost server2 number4) 4)
    (= (io-cost server3 number1) 1)
    (= (io-cost server3 number2) 2)
    (= (io-cost server3 number3) 3)
    (= (io-cost server3 number4) 4)
    (saved data-0-7 server2)
    (saved data-0-8 server3)
    (usage server1 number0)
    (usage server2 number0)
    (usage server3 number0)
)
(:goal
(and
    (saved data-2-2 server3)
    (saved data-2-4 server1)
    (saved data-2-6 server1)
)
)
(:metric minimize (total-cost))
)","load data-0-7 server2 number4 number8 number0 number4 (4)
load data-0-8 server3 number3 number8 number0 number3 (3)
send data-0-8 server3 server1 number3 number16 number0 number3 (18)
send data-0-8 server1 server2 number3 number8 number4 number7 (12)
process data-0-7 data-0-8 data-1-3 script17 server2 number1 number8 number7 number8 (9)
release data-0-8 server1 number3 number3 number0 (0)
save data-1-3 number1 server2 (1)
release data-1-3 server2 number1 number8 number7 (0)
process data-0-7 data-0-8 data-1-1 script14 server2 number1 number8 number7 number8 (8)
release data-0-7 server2 number4 number8 number4 (0)
release data-0-8 server2 number3 number4 number1 (0)
send data-1-1 server2 server1 number1 number16 number0 number1 (4)
send data-1-1 server1 server3 number1 number8 number3 number4 (6)
load data-1-3 server2 number1 number8 number1 number2 (1)
process data-1-1 data-1-3 data-2-6 script15 server2 number1 number8 number2 number3 (4)
process data-1-1 data-0-8 data-2-2 script7 server3 number4 number8 number4 number8 (12)
save data-2-2 number4 server3 (4)
process data-1-3 data-1-1 data-2-4 script10 server2 number2 number8 number3 number5 (8)
send data-2-4 server2 server1 number2 number16 number1 number3 (8)
save data-2-4 number2 server1 (10)
send data-2-6 server2 server1 number1 number16 number3 number4 (4)
save data-2-6 number1 server1 (5)"
data-network-opt18,"(define (domain data-network)
(:requirements :adl :typing :negative-preconditions :equality :action-costs)
(:types
    data script server numbers
)
(:predicates
    (SCRIPT-IO ?s - script ?in1 - data ?in2 - data ?out - data)
    (CONNECTED ?from - server ?to - server)
    (DATA-SIZE ?d - data ?n - numbers)
    (CAPACITY ?s - server ?n - numbers)
    (SUM ?n1 - numbers ?n2 - numbers ?sum - numbers)
    (LESS-EQUAL ?n1 - numbers ?n2 - numbers)
    (saved ?d - data ?s - server)
    (cached ?d - data ?s - server)
    (usage ?s - server ?n - numbers)
)
(:functions
    (total-cost) - number
    (process-cost ?sc - script ?s - server) - number
    (send-cost ?from ?to - server ?size - numbers) - number
    (io-cost ?s - server ?size - numbers) - number
)
;; Release data from RAM.
(:action release
    :parameters (?d - data ?s - server ?size ?before ?after - numbers)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (SUM ?after ?size ?before)
        (cached ?d ?s)
        (usage ?s ?before)
    )
    :effect
    (and
        (not (cached ?d ?s))
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) 0)
    )
)

;; Save data from RAM to disk.
(:action save
    :parameters (?d - data ?size - numbers ?s - server)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (cached ?d ?s)
    )
    :effect
    (and
        (saved ?d ?s)
        (increase (total-cost) (io-cost ?s ?size))
    )
)

;; Load data from disk into RAM.
(:action load
    :parameters (?d - data ?s - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (DATA-SIZE ?d ?size)
        (CAPACITY ?s ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (saved ?d ?s)
        (not (cached ?d ?s))
        (usage ?s ?before)
    )
    :effect
    (and
        (cached ?d ?s)
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) (io-cost ?s ?size))
    )
)

;; Send data from RAM of one server to RAM of another server.
(:action send
    :parameters (?d - data ?from ?to - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (CONNECTED ?from ?to)
        (DATA-SIZE ?d ?size)
        (CAPACITY ?to ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (cached ?d ?from)
        (not (cached ?d ?to))
        (usage ?to ?before)
    )
    :effect
    (and
        (cached ?d ?to)
        (not (usage ?to ?before))
        (usage ?to ?after)
        (increase (total-cost) (send-cost ?from ?to ?size))
    )
)

;; Executes a script that processes two data items from RAM and produces another data item in RAM.
(:action process
    :parameters (?in1 ?in2 ?out - data ?sc - script ?s - server ?size ?limit ?before ?after - numbers)
    :precondition
    (and
        (SCRIPT-IO ?sc ?in1 ?in2 ?out)
        (DATA-SIZE ?out ?size)
        (CAPACITY ?s ?limit)
        (SUM ?before ?size ?after)
        (LESS-EQUAL ?after ?limit)
        (cached ?in1 ?s)
        (cached ?in2 ?s)
        (not (cached ?out ?s))
        (usage ?s ?before)
    )
    :effect
    (and
        (cached ?out ?s)
        (not (usage ?s ?before))
        (usage ?s ?after)
        (increase (total-cost) (process-cost ?sc ?s))
    )
)

)","(define (problem p9-3-15-tiny-network-4)
(:domain data-network)
(:objects
    data-0-3 data-0-4 data-0-6 data-0-7 data-0-9 data-1-8 data-2-1 data-2-2 data-2-5 - data
    script1 script2 script3 script4 script5 script6 script7 script8 script9 script10 script11 script12 script13 script14 script15 - script
    server1 server2 server3 - server
    number0 number1 number2 number3 number4 number5 number6 number7 number8 number9 number10 number11 number12 number13 number14 number15 number16 - numbers
)
(:init
    (SCRIPT-IO script1 data-0-7 data-0-3 data-1-8)
    (SCRIPT-IO script2 data-1-8 data-0-4 data-2-5)
    (SCRIPT-IO script3 data-1-8 data-0-9 data-2-1)
    (SCRIPT-IO script4 data-1-8 data-0-9 data-2-2)
    (SCRIPT-IO script5 data-1-8 data-0-9 data-2-2)
    (SCRIPT-IO script6 data-0-6 data-0-7 data-1-8)
    (SCRIPT-IO script7 data-1-8 data-0-3 data-2-1)
    (SCRIPT-IO script8 data-1-8 data-0-4 data-2-2)
    (SCRIPT-IO script9 data-1-8 data-0-4 data-2-2)
    (SCRIPT-IO script10 data-1-8 data-0-3 data-2-1)
    (SCRIPT-IO script11 data-1-8 data-0-6 data-2-2)
    (SCRIPT-IO script12 data-0-6 data-0-9 data-1-8)
    (SCRIPT-IO script13 data-0-7 data-0-4 data-1-8)
    (SCRIPT-IO script14 data-0-6 data-0-9 data-1-8)
    (SCRIPT-IO script15 data-1-8 data-0-6 data-2-2)
    (CONNECTED server1 server2)
    (CONNECTED server2 server1)
    (CONNECTED server1 server3)
    (CONNECTED server3 server1)
    (DATA-SIZE data-0-3 number5)
    (DATA-SIZE data-0-4 number1)
    (DATA-SIZE data-0-6 number2)
    (DATA-SIZE data-0-7 number3)
    (DATA-SIZE data-0-9 number3)
    (DATA-SIZE data-1-8 number2)
    (DATA-SIZE data-2-1 number3)
    (DATA-SIZE data-2-2 number2)
    (DATA-SIZE data-2-5 number1)
    (CAPACITY server1 number16)
    (CAPACITY server2 number8)
    (CAPACITY server3 number8)
    (SUM number0 number1 number1)
    (SUM number0 number2 number2)
    (SUM number0 number3 number3)
    (SUM number0 number5 number5)
    (SUM number1 number1 number2)
    (SUM number1 number2 number3)
    (SUM number1 number3 number4)
    (SUM number1 number5 number6)
    (SUM number2 number1 number3)
    (SUM number2 number2 number4)
    (SUM number2 number3 number5)
    (SUM number2 number5 number7)
    (SUM number3 number1 number4)
    (SUM number3 number2 number5)
    (SUM number3 number3 number6)
    (SUM number3 number5 number8)
    (SUM number4 number1 number5)
    (SUM number4 number2 number6)
    (SUM number4 number3 number7)
    (SUM number4 number5 number9)
    (SUM number5 number1 number6)
    (SUM number5 number2 number7)
    (SUM number5 number3 number8)
    (SUM number5 number5 number10)
    (SUM number6 number1 number7)
    (SUM number6 number2 number8)
    (SUM number6 number3 number9)
    (SUM number6 number5 number11)
    (SUM number7 number1 number8)
    (SUM number7 number2 number9)
    (SUM number7 number3 number10)
    (SUM number7 number5 number12)
    (SUM number8 number1 number9)
    (SUM number8 number2 number10)
    (SUM number8 number3 number11)
    (SUM number8 number5 number13)
    (SUM number9 number1 number10)
    (SUM number9 number2 number11)
    (SUM number9 number3 number12)
    (SUM number9 number5 number14)
    (SUM number10 number1 number11)
    (SUM number10 number2 number12)
    (SUM number10 number3 number13)
    (SUM number10 number5 number15)
    (SUM number11 number1 number12)
    (SUM number11 number2 number13)
    (SUM number11 number3 number14)
    (SUM number11 number5 number16)
    (SUM number12 number1 number13)
    (SUM number12 number2 number14)
    (SUM number12 number3 number15)
    (SUM number13 number1 number14)
    (SUM number13 number2 number15)
    (SUM number13 number3 number16)
    (SUM number14 number1 number15)
    (SUM number14 number2 number16)
    (SUM number15 number1 number16)
    (LESS-EQUAL number1 number8)
    (LESS-EQUAL number1 number16)
    (LESS-EQUAL number2 number8)
    (LESS-EQUAL number2 number16)
    (LESS-EQUAL number3 number8)
    (LESS-EQUAL number3 number16)
    (LESS-EQUAL number4 number8)
    (LESS-EQUAL number4 number16)
    (LESS-EQUAL number5 number8)
    (LESS-EQUAL number5 number16)
    (LESS-EQUAL number6 number8)
    (LESS-EQUAL number6 number16)
    (LESS-EQUAL number7 number8)
    (LESS-EQUAL number7 number16)
    (LESS-EQUAL number8 number8)
    (LESS-EQUAL number8 number16)
    (LESS-EQUAL number9 number16)
    (LESS-EQUAL number10 number16)
    (LESS-EQUAL number11 number16)
    (LESS-EQUAL number12 number16)
    (LESS-EQUAL number13 number16)
    (LESS-EQUAL number14 number16)
    (LESS-EQUAL number15 number16)
    (LESS-EQUAL number16 number16)
    (= (total-cost) 0)
    (= (process-cost script1 server1) 21)
    (= (process-cost script1 server2) 11)
    (= (process-cost script1 server3) 7)
    (= (process-cost script2 server1) 22)
    (= (process-cost script2 server2) 12)
    (= (process-cost script2 server3) 9)
    (= (process-cost script3 server1) 24)
    (= (process-cost script3 server2) 12)
    (= (process-cost script3 server3) 12)
    (= (process-cost script4 server1) 16)
    (= (process-cost script4 server2) 9)
    (= (process-cost script4 server3) 13)
    (= (process-cost script5 server1) 25)
    (= (process-cost script5 server2) 11)
    (= (process-cost script5 server3) 10)
    (= (process-cost script6 server1) 19)
    (= (process-cost script6 server2) 8)
    (= (process-cost script6 server3) 9)
    (= (process-cost script7 server1) 23)
    (= (process-cost script7 server2) 10)
    (= (process-cost script7 server3) 9)
    (= (process-cost script8 server1) 24)
    (= (process-cost script8 server2) 11)
    (= (process-cost script8 server3) 8)
    (= (process-cost script9 server1) 19)
    (= (process-cost script9 server2) 9)
    (= (process-cost script9 server3) 10)
    (= (process-cost script10 server1) 23)
    (= (process-cost script10 server2) 10)
    (= (process-cost script10 server3) 8)
    (= (process-cost script11 server1) 18)
    (= (process-cost script11 server2) 10)
    (= (process-cost script11 server3) 9)
    (= (process-cost script12 server1) 21)
    (= (process-cost script12 server2) 7)
    (= (process-cost script12 server3) 10)
    (= (process-cost script13 server1) 20)
    (= (process-cost script13 server2) 9)
    (= (process-cost script13 server3) 11)
    (= (process-cost script14 server1) 22)
    (= (process-cost script14 server2) 9)
    (= (process-cost script14 server3) 9)
    (= (process-cost script15 server1) 17)
    (= (process-cost script15 server2) 10)
    (= (process-cost script15 server3) 9)
    (= (send-cost server1 server2 number1) 4)
    (= (send-cost server2 server1 number1) 4)
    (= (send-cost server1 server2 number2) 8)
    (= (send-cost server2 server1 number2) 8)
    (= (send-cost server1 server2 number3) 12)
    (= (send-cost server2 server1 number3) 12)
    (= (send-cost server1 server2 number5) 20)
    (= (send-cost server2 server1 number5) 20)
    (= (send-cost server1 server3 number1) 6)
    (= (send-cost server3 server1 number1) 6)
    (= (send-cost server1 server3 number2) 12)
    (= (send-cost server3 server1 number2) 12)
    (= (send-cost server1 server3 number3) 18)
    (= (send-cost server3 server1 number3) 18)
    (= (send-cost server1 server3 number5) 30)
    (= (send-cost server3 server1 number5) 30)
    (= (io-cost server1 number1) 5)
    (= (io-cost server1 number2) 10)
    (= (io-cost server1 number3) 15)
    (= (io-cost server1 number5) 25)
    (= (io-cost server2 number1) 1)
    (= (io-cost server2 number2) 2)
    (= (io-cost server2 number3) 3)
    (= (io-cost server2 number5) 5)
    (= (io-cost server3 number1) 1)
    (= (io-cost server3 number2) 2)
    (= (io-cost server3 number3) 3)
    (= (io-cost server3 number5) 5)
    (saved data-0-3 server3)
    (saved data-0-4 server1)
    (saved data-0-6 server3)
    (saved data-0-7 server3)
    (saved data-0-9 server1)
    (usage server1 number0)
    (usage server2 number0)
    (usage server3 number0)
)
(:goal
(and
    (saved data-2-1 server2)
    (saved data-2-2 server2)
    (saved data-2-5 server2)
)
)
(:metric minimize (total-cost))
)","load data-0-9 server1 number3 number16 number0 number3 (15)
load data-0-6 server3 number2 number8 number0 number2 (2)
send data-0-6 server3 server1 number2 number16 number3 number5 (12)
send data-0-9 server1 server2 number3 number8 number0 number3 (12)
send data-0-6 server1 server2 number2 number8 number3 number5 (8)
process data-0-6 data-0-9 data-1-8 script12 server2 number2 number8 number5 number7 (7)
load data-0-4 server1 number1 number16 number5 number6 (5)
send data-0-4 server1 server2 number1 number8 number7 number8 (4)
release data-0-6 server2 number2 number8 number6 (0)
process data-1-8 data-0-4 data-2-5 script2 server2 number1 number8 number6 number7 (12)
save data-2-5 number1 server2 (1)
release data-0-4 server2 number1 number7 number6 (0)
process data-1-8 data-0-9 data-2-2 script4 server2 number2 number8 number6 number8 (9)
save data-2-2 number2 server2 (2)
release data-2-5 server2 number1 number8 number7 (0)
release data-2-2 server2 number2 number7 number5 (0)
process data-1-8 data-0-9 data-2-1 script3 server2 number3 number8 number5 number8 (12)
save data-2-1 number3 server2 (3)"
depot,"(define (domain depot)
(:predicates
         (at ?x ?y) (on ?x ?y) (in ?x ?y) (lifting ?x ?y) (available ?x) (clear ?x)(place ?x) (locatable ?x) (depot ?x) (distributor ?x) (truck ?x) (hoist ?x) (surface ?x) (pallet ?x) (crate ?x) )
(:action drive
 :parameters ( ?x ?y ?z)
 :precondition
        (and (truck ?x) (place ?y) (place ?z)  (at ?x ?y))
 :effect
        (and (at ?x ?z) (not (at ?x ?y))))

(:action lift
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (surface ?z) (place ?p)  (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))
 :effect
        (and (lifting ?x ?y) (clear ?z) (not (at ?y ?p)) (not (clear ?y)) (not (available ?x)) (not (on ?y ?z))))

(:action drop
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (surface ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))
 :effect
        (and (available ?x) (at ?y ?p) (clear ?y) (on ?y ?z) (not (lifting ?x ?y)) (not (clear ?z))))

(:action load
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (truck ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (lifting ?x ?y))
 :effect
        (and (in ?y ?z) (available ?x) (not (lifting ?x ?y))))

(:action unload
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (truck ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))
 :effect
        (and (lifting ?x ?y) (not (in ?y ?z)) (not (available ?x))))

)
","(define (problem depotprob1818) (:domain Depot)
(:objects
	depot0 distributor0 distributor1 truck0 truck1 pallet0 pallet1 pallet2 crate0 crate1 hoist0 hoist1 hoist2 )
(:init
	(pallet pallet0)
	(surface pallet0)
	(at pallet0 depot0)
	(clear crate1)
	(pallet pallet1)
	(surface pallet1)
	(at pallet1 distributor0)
	(clear crate0)
	(pallet pallet2)
	(surface pallet2)
	(at pallet2 distributor1)
	(clear pallet2)
	(truck truck0)
	(at truck0 distributor1)
	(truck truck1)
	(at truck1 depot0)
	(hoist hoist0)
	(at hoist0 depot0)
	(available hoist0)
	(hoist hoist1)
	(at hoist1 distributor0)
	(available hoist1)
	(hoist hoist2)
	(at hoist2 distributor1)
	(available hoist2)
	(crate crate0)
	(surface crate0)
	(at crate0 distributor0)
	(on crate0 pallet1)
	(crate crate1)
	(surface crate1)
	(at crate1 depot0)
	(on crate1 pallet0)
	(place depot0)
	(place distributor0)
	(place distributor1)
)

(:goal (and
		(on crate0 pallet2)
		(on crate1 pallet1)
	)
))","lift hoist0 crate1 pallet0 depot0 (1)
load hoist0 crate1 truck1 depot0 (1)
lift hoist1 crate0 pallet1 distributor0 (1)
drive truck1 depot0 distributor0 (1)
load hoist1 crate0 truck1 distributor0 (1)
unload hoist1 crate1 truck1 distributor0 (1)
drive truck1 distributor0 distributor1 (1)
unload hoist2 crate0 truck1 distributor1 (1)
drop hoist1 crate1 pallet1 distributor0 (1)
drop hoist2 crate0 pallet2 distributor1 (1)"
depot,"(define (domain depot)
(:predicates
         (at ?x ?y) (on ?x ?y) (in ?x ?y) (lifting ?x ?y) (available ?x) (clear ?x)(place ?x) (locatable ?x) (depot ?x) (distributor ?x) (truck ?x) (hoist ?x) (surface ?x) (pallet ?x) (crate ?x) )
(:action drive
 :parameters ( ?x ?y ?z)
 :precondition
        (and (truck ?x) (place ?y) (place ?z)  (at ?x ?y))
 :effect
        (and (at ?x ?z) (not (at ?x ?y))))

(:action lift
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (surface ?z) (place ?p)  (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))
 :effect
        (and (lifting ?x ?y) (clear ?z) (not (at ?y ?p)) (not (clear ?y)) (not (available ?x)) (not (on ?y ?z))))

(:action drop
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (surface ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))
 :effect
        (and (available ?x) (at ?y ?p) (clear ?y) (on ?y ?z) (not (lifting ?x ?y)) (not (clear ?z))))

(:action load
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (truck ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (lifting ?x ?y))
 :effect
        (and (in ?y ?z) (available ?x) (not (lifting ?x ?y))))

(:action unload
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (truck ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))
 :effect
        (and (lifting ?x ?y) (not (in ?y ?z)) (not (available ?x))))

)
","(define (problem depotprob7512) (:domain Depot)
(:objects
	depot0 distributor0 distributor1 truck0 truck1 pallet0 pallet1 pallet2 crate0 crate1 crate2 crate3 hoist0 hoist1 hoist2 )
(:init
	(pallet pallet0)
	(surface pallet0)
	(at pallet0 depot0)
	(clear crate0)
	(pallet pallet1)
	(surface pallet1)
	(at pallet1 distributor0)
	(clear crate3)
	(pallet pallet2)
	(surface pallet2)
	(at pallet2 distributor1)
	(clear crate2)
	(truck truck0)
	(at truck0 depot0)
	(truck truck1)
	(at truck1 depot0)
	(hoist hoist0)
	(at hoist0 depot0)
	(available hoist0)
	(hoist hoist1)
	(at hoist1 distributor0)
	(available hoist1)
	(hoist hoist2)
	(at hoist2 distributor1)
	(available hoist2)
	(crate crate0)
	(surface crate0)
	(at crate0 depot0)
	(on crate0 pallet0)
	(crate crate1)
	(surface crate1)
	(at crate1 distributor1)
	(on crate1 pallet2)
	(crate crate2)
	(surface crate2)
	(at crate2 distributor1)
	(on crate2 crate1)
	(crate crate3)
	(surface crate3)
	(at crate3 distributor0)
	(on crate3 pallet1)
	(place depot0)
	(place distributor0)
	(place distributor1)
)

(:goal (and
		(on crate0 pallet2)
		(on crate1 crate3)
		(on crate2 pallet0)
		(on crate3 pallet1)
	)
))","lift hoist0 crate0 pallet0 depot0 (1)
load hoist0 crate0 truck1 depot0 (1)
drive truck1 depot0 distributor1 (1)
lift hoist2 crate2 crate1 distributor1 (1)
load hoist2 crate2 truck1 distributor1 (1)
lift hoist2 crate1 pallet2 distributor1 (1)
load hoist2 crate1 truck1 distributor1 (1)
unload hoist2 crate0 truck1 distributor1 (1)
drive truck1 distributor1 depot0 (1)
unload hoist0 crate2 truck1 depot0 (1)
drive truck1 depot0 distributor0 (1)
unload hoist1 crate1 truck1 distributor0 (1)
drop hoist0 crate2 pallet0 depot0 (1)
drop hoist2 crate0 pallet2 distributor1 (1)
drop hoist1 crate1 crate3 distributor0 (1)"
depot,"(define (domain depot)
(:predicates
         (at ?x ?y) (on ?x ?y) (in ?x ?y) (lifting ?x ?y) (available ?x) (clear ?x)(place ?x) (locatable ?x) (depot ?x) (distributor ?x) (truck ?x) (hoist ?x) (surface ?x) (pallet ?x) (crate ?x) )
(:action drive
 :parameters ( ?x ?y ?z)
 :precondition
        (and (truck ?x) (place ?y) (place ?z)  (at ?x ?y))
 :effect
        (and (at ?x ?z) (not (at ?x ?y))))

(:action lift
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (surface ?z) (place ?p)  (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))
 :effect
        (and (lifting ?x ?y) (clear ?z) (not (at ?y ?p)) (not (clear ?y)) (not (available ?x)) (not (on ?y ?z))))

(:action drop
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (surface ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))
 :effect
        (and (available ?x) (at ?y ?p) (clear ?y) (on ?y ?z) (not (lifting ?x ?y)) (not (clear ?z))))

(:action load
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (truck ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (lifting ?x ?y))
 :effect
        (and (in ?y ?z) (available ?x) (not (lifting ?x ?y))))

(:action unload
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (truck ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))
 :effect
        (and (lifting ?x ?y) (not (in ?y ?z)) (not (available ?x))))

)
","(define (problem depotprob1935) (:domain Depot)
(:objects
	depot0 distributor0 distributor1 truck0 truck1 pallet0 pallet1 pallet2 crate0 crate1 crate2 crate3 crate4 crate5 hoist0 hoist1 hoist2 )
(:init
	(pallet pallet0)
	(surface pallet0)
	(at pallet0 depot0)
	(clear crate1)
	(pallet pallet1)
	(surface pallet1)
	(at pallet1 distributor0)
	(clear crate4)
	(pallet pallet2)
	(surface pallet2)
	(at pallet2 distributor1)
	(clear crate5)
	(truck truck0)
	(at truck0 depot0)
	(truck truck1)
	(at truck1 distributor0)
	(hoist hoist0)
	(at hoist0 depot0)
	(available hoist0)
	(hoist hoist1)
	(at hoist1 distributor0)
	(available hoist1)
	(hoist hoist2)
	(at hoist2 distributor1)
	(available hoist2)
	(crate crate0)
	(surface crate0)
	(at crate0 distributor0)
	(on crate0 pallet1)
	(crate crate1)
	(surface crate1)
	(at crate1 depot0)
	(on crate1 pallet0)
	(crate crate2)
	(surface crate2)
	(at crate2 distributor1)
	(on crate2 pallet2)
	(crate crate3)
	(surface crate3)
	(at crate3 distributor0)
	(on crate3 crate0)
	(crate crate4)
	(surface crate4)
	(at crate4 distributor0)
	(on crate4 crate3)
	(crate crate5)
	(surface crate5)
	(at crate5 distributor1)
	(on crate5 crate2)
	(place depot0)
	(place distributor0)
	(place distributor1)
)

(:goal (and
		(on crate0 crate1)
		(on crate1 pallet2)
		(on crate2 pallet0)
		(on crate3 crate2)
		(on crate4 pallet1)
		(on crate5 crate0)
	)
))","lift hoist1 crate4 crate3 distributor0 (1)
load hoist1 crate4 truck1 distributor0 (1)
lift hoist1 crate3 crate0 distributor0 (1)
load hoist1 crate3 truck1 distributor0 (1)
lift hoist1 crate0 pallet1 distributor0 (1)
lift hoist0 crate1 pallet0 depot0 (1)
load hoist1 crate0 truck1 distributor0 (1)
unload hoist1 crate4 truck1 distributor0 (1)
drive truck1 distributor0 depot0 (1)
load hoist0 crate1 truck1 depot0 (1)
drop hoist1 crate4 pallet1 distributor0 (1)
lift hoist2 crate5 crate2 distributor1 (1)
drive truck1 depot0 distributor1 (1)
load hoist2 crate5 truck1 distributor1 (1)
lift hoist2 crate2 pallet2 distributor1 (1)
load hoist2 crate2 truck1 distributor1 (1)
unload hoist2 crate1 truck1 distributor1 (1)
drop hoist2 crate1 pallet2 distributor1 (1)
unload hoist2 crate0 truck1 distributor1 (1)
drop hoist2 crate0 crate1 distributor1 (1)
unload hoist2 crate5 truck1 distributor1 (1)
drive truck1 distributor1 depot0 (1)
unload hoist0 crate2 truck1 depot0 (1)
drop hoist0 crate2 pallet0 depot0 (1)
unload hoist0 crate3 truck1 depot0 (1)
drop hoist2 crate5 crate0 distributor1 (1)
drop hoist0 crate3 crate2 depot0 (1)"
depot,"(define (domain depot)
(:predicates
         (at ?x ?y) (on ?x ?y) (in ?x ?y) (lifting ?x ?y) (available ?x) (clear ?x)(place ?x) (locatable ?x) (depot ?x) (distributor ?x) (truck ?x) (hoist ?x) (surface ?x) (pallet ?x) (crate ?x) )
(:action drive
 :parameters ( ?x ?y ?z)
 :precondition
        (and (truck ?x) (place ?y) (place ?z)  (at ?x ?y))
 :effect
        (and (at ?x ?z) (not (at ?x ?y))))

(:action lift
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (surface ?z) (place ?p)  (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))
 :effect
        (and (lifting ?x ?y) (clear ?z) (not (at ?y ?p)) (not (clear ?y)) (not (available ?x)) (not (on ?y ?z))))

(:action drop
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (surface ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))
 :effect
        (and (available ?x) (at ?y ?p) (clear ?y) (on ?y ?z) (not (lifting ?x ?y)) (not (clear ?z))))

(:action load
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (truck ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (lifting ?x ?y))
 :effect
        (and (in ?y ?z) (available ?x) (not (lifting ?x ?y))))

(:action unload
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (truck ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))
 :effect
        (and (lifting ?x ?y) (not (in ?y ?z)) (not (available ?x))))

)
","(define (problem depotprob1234) (:domain Depot)
(:objects
	depot0 distributor0 distributor1 truck0 truck1 pallet0 pallet1 pallet2 pallet3 pallet4 pallet5 crate0 crate1 crate2 crate3 crate4 crate5 hoist0 hoist1 hoist2 )
(:init
	(pallet pallet0)
	(surface pallet0)
	(at pallet0 depot0)
	(clear crate5)
	(pallet pallet1)
	(surface pallet1)
	(at pallet1 distributor0)
	(clear pallet1)
	(pallet pallet2)
	(surface pallet2)
	(at pallet2 distributor1)
	(clear crate3)
	(pallet pallet3)
	(surface pallet3)
	(at pallet3 distributor0)
	(clear pallet3)
	(pallet pallet4)
	(surface pallet4)
	(at pallet4 distributor0)
	(clear crate4)
	(pallet pallet5)
	(surface pallet5)
	(at pallet5 distributor1)
	(clear crate1)
	(truck truck0)
	(at truck0 distributor1)
	(truck truck1)
	(at truck1 depot0)
	(hoist hoist0)
	(at hoist0 depot0)
	(available hoist0)
	(hoist hoist1)
	(at hoist1 distributor0)
	(available hoist1)
	(hoist hoist2)
	(at hoist2 distributor1)
	(available hoist2)
	(crate crate0)
	(surface crate0)
	(at crate0 distributor0)
	(on crate0 pallet4)
	(crate crate1)
	(surface crate1)
	(at crate1 distributor1)
	(on crate1 pallet5)
	(crate crate2)
	(surface crate2)
	(at crate2 distributor1)
	(on crate2 pallet2)
	(crate crate3)
	(surface crate3)
	(at crate3 distributor1)
	(on crate3 crate2)
	(crate crate4)
	(surface crate4)
	(at crate4 distributor0)
	(on crate4 crate0)
	(crate crate5)
	(surface crate5)
	(at crate5 depot0)
	(on crate5 pallet0)
	(place depot0)
	(place distributor0)
	(place distributor1)
)

(:goal (and
		(on crate0 pallet3)
		(on crate1 crate4)
		(on crate3 pallet1)
		(on crate4 pallet5)
		(on crate5 crate1)
	)
))","lift hoist2 crate3 crate2 distributor1 (1)
lift hoist0 crate5 pallet0 depot0 (1)
lift hoist1 crate4 crate0 distributor0 (1)
load hoist0 crate5 truck1 depot0 (1)
load hoist2 crate3 truck0 distributor1 (1)
drive truck0 distributor1 distributor0 (1)
load hoist1 crate4 truck0 distributor0 (1)
lift hoist1 crate0 pallet4 distributor0 (1)
drop hoist1 crate0 pallet3 distributor0 (1)
unload hoist1 crate3 truck0 distributor0 (1)
drive truck0 distributor0 distributor1 (1)
drop hoist1 crate3 pallet1 distributor0 (1)
lift hoist2 crate1 pallet5 distributor1 (1)
load hoist2 crate1 truck0 distributor1 (1)
unload hoist2 crate4 truck0 distributor1 (1)
drop hoist2 crate4 pallet5 distributor1 (1)
drive truck1 depot0 distributor1 (1)
unload hoist2 crate1 truck0 distributor1 (1)
drop hoist2 crate1 crate4 distributor1 (1)
unload hoist2 crate5 truck1 distributor1 (1)
drop hoist2 crate5 crate1 distributor1 (1)"
depot,"(define (domain depot)
(:predicates
         (at ?x ?y) (on ?x ?y) (in ?x ?y) (lifting ?x ?y) (available ?x) (clear ?x)(place ?x) (locatable ?x) (depot ?x) (distributor ?x) (truck ?x) (hoist ?x) (surface ?x) (pallet ?x) (crate ?x) )
(:action drive
 :parameters ( ?x ?y ?z)
 :precondition
        (and (truck ?x) (place ?y) (place ?z)  (at ?x ?y))
 :effect
        (and (at ?x ?z) (not (at ?x ?y))))

(:action lift
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (surface ?z) (place ?p)  (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))
 :effect
        (and (lifting ?x ?y) (clear ?z) (not (at ?y ?p)) (not (clear ?y)) (not (available ?x)) (not (on ?y ?z))))

(:action drop
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (surface ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))
 :effect
        (and (available ?x) (at ?y ?p) (clear ?y) (on ?y ?z) (not (lifting ?x ?y)) (not (clear ?z))))

(:action load
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (truck ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (lifting ?x ?y))
 :effect
        (and (in ?y ?z) (available ?x) (not (lifting ?x ?y))))

(:action unload
 :parameters ( ?x ?y ?z ?p)
 :precondition
        (and (hoist ?x) (crate ?y) (truck ?z) (place ?p)  (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))
 :effect
        (and (lifting ?x ?y) (not (in ?y ?z)) (not (available ?x))))

)
","(define (problem depotprob6512) (:domain Depot)
(:objects
	depot0 distributor0 distributor1 truck0 truck1 pallet0 pallet1 pallet2 crate0 crate1 crate2 crate3 crate4 crate5 crate6 crate7 hoist0 hoist1 hoist2 )
(:init
	(pallet pallet0)
	(surface pallet0)
	(at pallet0 depot0)
	(clear crate7)
	(pallet pallet1)
	(surface pallet1)
	(at pallet1 distributor0)
	(clear crate2)
	(pallet pallet2)
	(surface pallet2)
	(at pallet2 distributor1)
	(clear crate6)
	(truck truck0)
	(at truck0 distributor1)
	(truck truck1)
	(at truck1 distributor1)
	(hoist hoist0)
	(at hoist0 depot0)
	(available hoist0)
	(hoist hoist1)
	(at hoist1 distributor0)
	(available hoist1)
	(hoist hoist2)
	(at hoist2 distributor1)
	(available hoist2)
	(crate crate0)
	(surface crate0)
	(at crate0 depot0)
	(on crate0 pallet0)
	(crate crate1)
	(surface crate1)
	(at crate1 depot0)
	(on crate1 crate0)
	(crate crate2)
	(surface crate2)
	(at crate2 distributor0)
	(on crate2 pallet1)
	(crate crate3)
	(surface crate3)
	(at crate3 distributor1)
	(on crate3 pallet2)
	(crate crate4)
	(surface crate4)
	(at crate4 depot0)
	(on crate4 crate1)
	(crate crate5)
	(surface crate5)
	(at crate5 distributor1)
	(on crate5 crate3)
	(crate crate6)
	(surface crate6)
	(at crate6 distributor1)
	(on crate6 crate5)
	(crate crate7)
	(surface crate7)
	(at crate7 depot0)
	(on crate7 crate4)
	(place depot0)
	(place distributor0)
	(place distributor1)
)

(:goal (and
		(on crate0 crate4)
		(on crate2 crate6)
		(on crate4 crate7)
		(on crate5 pallet2)
		(on crate6 pallet1)
		(on crate7 pallet0)
	)
))","lift hoist2 crate6 crate5 distributor1 (1)
load hoist2 crate6 truck1 distributor1 (1)
lift hoist0 crate7 crate4 depot0 (1)
drive truck1 distributor1 depot0 (1)
load hoist0 crate7 truck1 depot0 (1)
lift hoist0 crate4 crate1 depot0 (1)
load hoist0 crate4 truck1 depot0 (1)
lift hoist0 crate1 crate0 depot0 (1)
load hoist0 crate1 truck1 depot0 (1)
lift hoist0 crate0 pallet0 depot0 (1)
load hoist0 crate0 truck1 depot0 (1)
unload hoist0 crate7 truck1 depot0 (1)
drop hoist0 crate7 pallet0 depot0 (1)
unload hoist0 crate4 truck1 depot0 (1)
drop hoist0 crate4 crate7 depot0 (1)
unload hoist0 crate0 truck1 depot0 (1)
drive truck1 depot0 distributor0 (1)
drop hoist0 crate0 crate4 depot0 (1)
lift hoist1 crate2 pallet1 distributor0 (1)
load hoist1 crate2 truck1 distributor0 (1)
unload hoist1 crate6 truck1 distributor0 (1)
drop hoist1 crate6 pallet1 distributor0 (1)
unload hoist1 crate2 truck1 distributor0 (1)
drop hoist1 crate2 crate6 distributor0 (1)
lift hoist2 crate5 crate3 distributor1 (1)
load hoist2 crate5 truck0 distributor1 (1)
lift hoist2 crate3 pallet2 distributor1 (1)
load hoist2 crate3 truck0 distributor1 (1)
unload hoist2 crate5 truck0 distributor1 (1)
drop hoist2 crate5 pallet2 distributor1 (1)"
driverlog,"(define (domain driverlog)
  (:requirements :strips) 
  (:predicates         (OBJ ?obj)
                       (TRUCK ?truck)
                       (LOCATION ?loc)
                (driver ?d)
                (at ?obj ?loc)
                (in ?obj1 ?obj)
                (driving ?d ?v)
                (link ?x ?y) (path ?x ?y)
                (empty ?v)
)


(:action LOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
  :parameters
   (?truck
    ?loc-from
    ?loc-to
    ?driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
  :parameters
   (?driver
    ?loc-from
    ?loc-to)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
        (at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
","(define (problem DLOG-2-2-2)
        (:domain driverlog)
        (:objects
        driver1
        driver2
        truck1
        truck2
        package1
        package2
        s0
        s1
        s2
        p1-0
        p1-2
        )
        (:init
        (at driver1 s2)
        (DRIVER driver1)
        (at driver2 s2)
        (DRIVER driver2)
        (at truck1 s0)
        (empty truck1)
        (TRUCK truck1)
        (at truck2 s0)
        (empty truck2)
        (TRUCK truck2)
        (at package1 s0)
        (OBJ package1)
        (at package2 s0)
        (OBJ package2)
        (LOCATION s0)
        (LOCATION s1)
        (LOCATION s2)
        (LOCATION p1-0)
        (LOCATION p1-2)
        (path s1 p1-0)
        (path p1-0 s1)
        (path s0 p1-0)
        (path p1-0 s0)
        (path s1 p1-2)
        (path p1-2 s1)
        (path s2 p1-2)
        (path p1-2 s2)
        (link s0 s1)
        (link s1 s0)
        (link s0 s2)
        (link s2 s0)
        (link s2 s1)
        (link s1 s2)
)
        (:goal (and
        (at driver1 s1)
        (at truck1 s1)
        (at package1 s0)
        (at package2 s0)
        ))


)

","walk driver1 s2 p1-2 (1)
walk driver1 p1-2 s1 (1)
walk driver1 s1 p1-0 (1)
walk driver1 p1-0 s0 (1)
board-truck driver1 truck1 s0 (1)
drive-truck truck1 s0 s1 driver1 (1)
disembark-truck driver1 truck1 s1 (1)"
driverlog,"(define (domain driverlog)
  (:requirements :strips) 
  (:predicates         (OBJ ?obj)
                       (TRUCK ?truck)
                       (LOCATION ?loc)
                (driver ?d)
                (at ?obj ?loc)
                (in ?obj1 ?obj)
                (driving ?d ?v)
                (link ?x ?y) (path ?x ?y)
                (empty ?v)
)


(:action LOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
  :parameters
   (?truck
    ?loc-from
    ?loc-to
    ?driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
  :parameters
   (?driver
    ?loc-from
    ?loc-to)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
        (at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
","(define (problem DLOG-2-2-3)
        (:domain driverlog)
        (:objects
        driver1
        driver2
        truck1
        truck2
        package1
        package2
        package3
        s0
        s1
        s2
        p0-1
        p0-2
        p1-0
        p2-1
        )
        (:init
        (at driver1 s0)
        (DRIVER driver1)
        (at driver2 s0)
        (DRIVER driver2)
        (at truck1 s0)
        (empty truck1)
        (TRUCK truck1)
        (at truck2 s1)
        (empty truck2)
        (TRUCK truck2)
        (at package1 s2)
        (OBJ package1)
        (at package2 s1)
        (OBJ package2)
        (at package3 s1)
        (OBJ package3)
        (LOCATION s0)
        (LOCATION s1)
        (LOCATION s2)
        (LOCATION p0-1)
        (LOCATION p0-2)
        (LOCATION p1-0)
        (LOCATION p2-1)
        (path s0 p0-1)
        (path p0-1 s0)
        (path s1 p0-1)
        (path p0-1 s1)
        (path s0 p0-2)
        (path p0-2 s0)
        (path s2 p0-2)
        (path p0-2 s2)
        (path s2 p2-1)
        (path p2-1 s2)
        (path s1 p2-1)
        (path p2-1 s1)
        (link s0 s2)
        (link s2 s0)
        (link s1 s0)
        (link s0 s1)
        (link s1 s2)
        (link s2 s1)
)
        (:goal (and
        (at driver1 s1)
        (at driver2 s1)
        (at truck1 s2)
        (at truck2 s0)
        (at package1 s0)
        (at package2 s2)
        (at package3 s0)
        ))


)
","board-truck driver1 truck1 s0 (1)
load-truck package3 truck2 s1 (1)
walk driver2 s0 p0-1 (1)
walk driver2 p0-1 s1 (1)
board-truck driver2 truck2 s1 (1)
load-truck package2 truck2 s1 (1)
drive-truck truck2 s1 s2 driver2 (1)
unload-truck package2 truck2 s2 (1)
drive-truck truck1 s0 s2 driver1 (1)
load-truck package1 truck2 s2 (1)
drive-truck truck2 s2 s0 driver2 (1)
unload-truck package3 truck2 s0 (1)
unload-truck package1 truck2 s0 (1)
disembark-truck driver1 truck1 s2 (1)
walk driver1 s2 p2-1 (1)
walk driver1 p2-1 s1 (1)
disembark-truck driver2 truck2 s0 (1)
walk driver2 s0 p0-1 (1)
walk driver2 p0-1 s1 (1)"
driverlog,"(define (domain driverlog)
  (:requirements :strips) 
  (:predicates         (OBJ ?obj)
                       (TRUCK ?truck)
                       (LOCATION ?loc)
                (driver ?d)
                (at ?obj ?loc)
                (in ?obj1 ?obj)
                (driving ?d ?v)
                (link ?x ?y) (path ?x ?y)
                (empty ?v)
)


(:action LOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
  :parameters
   (?truck
    ?loc-from
    ?loc-to
    ?driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
  :parameters
   (?driver
    ?loc-from
    ?loc-to)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
        (at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
","(define (problem DLOG-2-2-4)
        (:domain driverlog)
        (:objects
        driver1
        driver2
        truck1
        truck2
        package1
        package2
        package3
        package4
        s0
        s1
        s2
        p0-1
        p2-0
        p2-1
        )
        (:init
        (at driver1 s1)
        (DRIVER driver1)
        (at driver2 s0)
        (DRIVER driver2)
        (at truck1 s1)
        (empty truck1)
        (TRUCK truck1)
        (at truck2 s2)
        (empty truck2)
        (TRUCK truck2)
        (at package1 s0)
        (OBJ package1)
        (at package2 s0)
        (OBJ package2)
        (at package3 s1)
        (OBJ package3)
        (at package4 s1)
        (OBJ package4)
        (LOCATION s0)
        (LOCATION s1)
        (LOCATION s2)
        (LOCATION p0-1)
        (LOCATION p2-0)
        (LOCATION p2-1)
        (path s0 p0-1)
        (path p0-1 s0)
        (path s1 p0-1)
        (path p0-1 s1)
        (path s2 p2-0)
        (path p2-0 s2)
        (path s0 p2-0)
        (path p2-0 s0)
        (path s2 p2-1)
        (path p2-1 s2)
        (path s1 p2-1)
        (path p2-1 s1)
        (link s1 s0)
        (link s0 s1)
        (link s1 s2)
        (link s2 s1)
        (link s2 s0)
        (link s0 s2)
)
        (:goal (and
        (at driver2 s2)
        (at truck1 s1)
        (at truck2 s2)
        (at package1 s1)
        (at package2 s1)
        (at package3 s2)
        ))


)
","board-truck driver1 truck1 s1 (1)
load-truck package3 truck1 s1 (1)
walk driver2 s0 p2-0 (1)
walk driver2 p2-0 s2 (1)
drive-truck truck1 s1 s0 driver1 (1)
load-truck package2 truck1 s0 (1)
load-truck package1 truck1 s0 (1)
drive-truck truck1 s0 s2 driver1 (1)
unload-truck package3 truck1 s2 (1)
drive-truck truck1 s2 s1 driver1 (1)
unload-truck package2 truck1 s1 (1)
unload-truck package1 truck1 s1 (1)"
driverlog,"(define (domain driverlog)
  (:requirements :strips) 
  (:predicates         (OBJ ?obj)
                       (TRUCK ?truck)
                       (LOCATION ?loc)
                (driver ?d)
                (at ?obj ?loc)
                (in ?obj1 ?obj)
                (driving ?d ?v)
                (link ?x ?y) (path ?x ?y)
                (empty ?v)
)


(:action LOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
  :parameters
   (?truck
    ?loc-from
    ?loc-to
    ?driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
  :parameters
   (?driver
    ?loc-from
    ?loc-to)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
        (at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
","(define (problem DLOG-3-2-4)
        (:domain driverlog)
        (:objects
        driver1
        driver2
        driver3
        truck1
        truck2
        package1
        package2
        package3
        package4
        s0
        s1
        s2
        p0-1
        p1-0
        p1-2
        p2-1
        )
        (:init
        (at driver1 s1)
        (DRIVER driver1)
        (at driver2 s1)
        (DRIVER driver2)
        (at driver3 s0)
        (DRIVER driver3)
        (at truck1 s1)
        (empty truck1)
        (TRUCK truck1)
        (at truck2 s0)
        (empty truck2)
        (TRUCK truck2)
        (at package1 s2)
        (OBJ package1)
        (at package2 s2)
        (OBJ package2)
        (at package3 s0)
        (OBJ package3)
        (at package4 s1)
        (OBJ package4)
        (LOCATION s0)
        (LOCATION s1)
        (LOCATION s2)
        (LOCATION p0-1)
        (LOCATION p1-0)
        (LOCATION p1-2)
        (LOCATION p2-1)
        (path s0 p0-1)
        (path p0-1 s0)
        (path s1 p0-1)
        (path p0-1 s1)
        (path s1 p1-2)
        (path p1-2 s1)
        (path s2 p1-2)
        (path p1-2 s2)
        (link s0 s2)
        (link s2 s0)
        (link s1 s0)
        (link s0 s1)
        (link s2 s1)
        (link s1 s2)
)
        (:goal (and
        (at driver1 s1)
        (at driver2 s0)
        (at driver3 s1)
        (at truck1 s1)
        (at truck2 s2)
        (at package1 s1)
        (at package2 s2)
        (at package3 s2)
        (at package4 s0)
        ))


)
","walk driver2 s1 p0-1 (1)
walk driver2 p0-1 s0 (1)
board-truck driver3 truck2 s0 (1)
load-truck package3 truck2 s0 (1)
drive-truck truck2 s0 s2 driver3 (1)
unload-truck package3 truck2 s2 (1)
load-truck package1 truck2 s2 (1)
drive-truck truck2 s2 s1 driver3 (1)
load-truck package4 truck2 s1 (1)
unload-truck package1 truck2 s1 (1)
drive-truck truck2 s1 s0 driver3 (1)
unload-truck package4 truck2 s0 (1)
drive-truck truck2 s0 s2 driver3 (1)
disembark-truck driver3 truck2 s2 (1)
walk driver3 s2 p1-2 (1)
walk driver3 p1-2 s1 (1)"
driverlog,"(define (domain driverlog)
  (:requirements :strips) 
  (:predicates         (OBJ ?obj)
                       (TRUCK ?truck)
                       (LOCATION ?loc)
                (driver ?d)
                (at ?obj ?loc)
                (in ?obj1 ?obj)
                (driving ?d ?v)
                (link ?x ?y) (path ?x ?y)
                (empty ?v)
)


(:action LOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
  :parameters
   (?truck
    ?loc-from
    ?loc-to
    ?driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
  :parameters
   (?driver
    ?loc-from
    ?loc-to)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
        (at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
","(define (problem DLOG-3-2-5)
        (:domain driverlog)
        (:objects
        driver1
        driver2
        driver3
        truck1
        truck2
        package1
        package2
        package3
        package4
        package5
        s0
        s1
        s2
        p0-1
        p0-2
        p1-2
        )
        (:init
        (at driver1 s1)
        (DRIVER driver1)
        (at driver2 s0)
        (DRIVER driver2)
        (at driver3 s0)
        (DRIVER driver3)
        (at truck1 s1)
        (empty truck1)
        (TRUCK truck1)
        (at truck2 s1)
        (empty truck2)
        (TRUCK truck2)
        (at package1 s0)
        (OBJ package1)
        (at package2 s0)
        (OBJ package2)
        (at package3 s2)
        (OBJ package3)
        (at package4 s2)
        (OBJ package4)
        (at package5 s1)
        (OBJ package5)
        (LOCATION s0)
        (LOCATION s1)
        (LOCATION s2)
        (LOCATION p0-1)
        (LOCATION p0-2)
        (LOCATION p1-2)
        (path s0 p0-1)
        (path p0-1 s0)
        (path s1 p0-1)
        (path p0-1 s1)
        (path s0 p0-2)
        (path p0-2 s0)
        (path s2 p0-2)
        (path p0-2 s2)
        (path s1 p1-2)
        (path p1-2 s1)
        (path s2 p1-2)
        (path p1-2 s2)
        (link s0 s1)
        (link s1 s0)
        (link s0 s2)
        (link s2 s0)
        (link s1 s2)
        (link s2 s1)
)
        (:goal (and
        (at driver2 s2)
        (at truck1 s2)
        (at truck2 s2)
        (at package1 s1)
        (at package2 s1)
        (at package3 s1)
        (at package4 s0)
        (at package5 s1)
        ))


)
","walk driver2 s0 p0-1 (1)
walk driver2 p0-1 s1 (1)
board-truck driver1 truck1 s1 (1)
drive-truck truck1 s1 s2 driver1 (1)
board-truck driver2 truck2 s1 (1)
load-truck package4 truck1 s2 (1)
load-truck package3 truck1 s2 (1)
drive-truck truck2 s1 s2 driver2 (1)
disembark-truck driver2 truck2 s2 (1)
drive-truck truck1 s2 s0 driver1 (1)
unload-truck package4 truck1 s0 (1)
load-truck package2 truck1 s0 (1)
load-truck package1 truck1 s0 (1)
drive-truck truck1 s0 s1 driver1 (1)
unload-truck package3 truck1 s1 (1)
unload-truck package2 truck1 s1 (1)
unload-truck package1 truck1 s1 (1)
drive-truck truck1 s1 s2 driver1 (1)"
driverlog,"(define (domain driverlog)
  (:requirements :strips) 
  (:predicates         (OBJ ?obj)
                       (TRUCK ?truck)
                       (LOCATION ?loc)
                (driver ?d)
                (at ?obj ?loc)
                (in ?obj1 ?obj)
                (driving ?d ?v)
                (link ?x ?y) (path ?x ?y)
                (empty ?v)
)


(:action LOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
  :parameters
   (?truck
    ?loc-from
    ?loc-to
    ?driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
  :parameters
   (?driver
    ?loc-from
    ?loc-to)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
        (at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
","(define (problem DLOG-3-3-5)
        (:domain driverlog)
        (:objects
        driver1
        driver2
        driver3
        truck1
        truck2
        truck3
        package1
        package2
        package3
        package4
        package5
        s0
        s1
        s2
        p1-2
        p2-0
        )
        (:init
        (at driver1 s2)
        (DRIVER driver1)
        (at driver2 s2)
        (DRIVER driver2)
        (at driver3 s1)
        (DRIVER driver3)
        (at truck1 s0)
        (empty truck1)
        (TRUCK truck1)
        (at truck2 s1)
        (empty truck2)
        (TRUCK truck2)
        (at truck3 s1)
        (empty truck3)
        (TRUCK truck3)
        (at package1 s1)
        (OBJ package1)
        (at package2 s1)
        (OBJ package2)
        (at package3 s0)
        (OBJ package3)
        (at package4 s1)
        (OBJ package4)
        (at package5 s1)
        (OBJ package5)
        (LOCATION s0)
        (LOCATION s1)
        (LOCATION s2)
        (LOCATION p1-2)
        (LOCATION p2-0)
        (path s1 p1-2)
        (path p1-2 s1)
        (path s2 p1-2)
        (path p1-2 s2)
        (path s2 p2-0)
        (path p2-0 s2)
        (path s0 p2-0)
        (path p2-0 s0)
        (link s0 s1)
        (link s1 s0)
        (link s0 s2)
        (link s2 s0)
        (link s2 s1)
        (link s1 s2)
)
        (:goal (and
        (at driver1 s1)
        (at driver2 s0)
        (at truck1 s0)
        (at truck2 s0)
        (at truck3 s2)
        (at package1 s2)
        (at package2 s1)
        (at package3 s0)
        (at package4 s1)
        (at package5 s1)
        ))


)
","board-truck driver3 truck3 s1 (1)
walk driver1 s2 p1-2 (1)
walk driver1 p1-2 s1 (1)
load-truck package1 truck3 s1 (1)
drive-truck truck3 s1 s2 driver3 (1)
unload-truck package1 truck3 s2 (1)
walk driver2 s2 p1-2 (1)
walk driver2 p1-2 s1 (1)
board-truck driver2 truck2 s1 (1)
drive-truck truck2 s1 s0 driver2 (1)
disembark-truck driver2 truck2 s0 (1)"
driverlog,"(define (domain driverlog)
  (:requirements :strips) 
  (:predicates         (OBJ ?obj)
                       (TRUCK ?truck)
                       (LOCATION ?loc)
                (driver ?d)
                (at ?obj ?loc)
                (in ?obj1 ?obj)
                (driving ?d ?v)
                (link ?x ?y) (path ?x ?y)
                (empty ?v)
)


(:action LOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
  :parameters
   (?truck
    ?loc-from
    ?loc-to
    ?driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
  :parameters
   (?driver
    ?loc-from
    ?loc-to)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
        (at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
","(define (problem DLOG-3-3-6)
        (:domain driverlog)
        (:objects
        driver1
        driver2
        driver3
        truck1
        truck2
        truck3
        package1
        package2
        package3
        package4
        package5
        package6
        s0
        s1
        s2
        p0-1
        p0-2
        p2-1
        )
        (:init
        (at driver1 s1)
        (DRIVER driver1)
        (at driver2 s2)
        (DRIVER driver2)
        (at driver3 s2)
        (DRIVER driver3)
        (at truck1 s1)
        (empty truck1)
        (TRUCK truck1)
        (at truck2 s1)
        (empty truck2)
        (TRUCK truck2)
        (at truck3 s1)
        (empty truck3)
        (TRUCK truck3)
        (at package1 s0)
        (OBJ package1)
        (at package2 s2)
        (OBJ package2)
        (at package3 s1)
        (OBJ package3)
        (at package4 s1)
        (OBJ package4)
        (at package5 s1)
        (OBJ package5)
        (at package6 s0)
        (OBJ package6)
        (LOCATION s0)
        (LOCATION s1)
        (LOCATION s2)
        (LOCATION p0-1)
        (LOCATION p0-2)
        (LOCATION p2-1)
        (path s0 p0-1)
        (path p0-1 s0)
        (path s1 p0-1)
        (path p0-1 s1)
        (path s0 p0-2)
        (path p0-2 s0)
        (path s2 p0-2)
        (path p0-2 s2)
        (path s2 p2-1)
        (path p2-1 s2)
        (path s1 p2-1)
        (path p2-1 s1)
        (link s1 s0)
        (link s0 s1)
        (link s1 s2)
        (link s2 s1)
        (link s2 s0)
        (link s0 s2)
)
        (:goal (and
        (at driver1 s0)
        (at driver2 s0)
        (at truck1 s1)
        (at truck2 s0)
        (at package1 s0)
        (at package2 s1)
        (at package3 s1)
        (at package4 s2)
        (at package5 s0)
        (at package6 s0)
        ))


)
","board-truck driver1 truck2 s1 (1)
load-truck package5 truck2 s1 (1)
load-truck package4 truck2 s1 (1)
walk driver2 s2 p0-2 (1)
walk driver2 p0-2 s0 (1)
drive-truck truck2 s1 s2 driver1 (1)
unload-truck package4 truck2 s2 (1)
load-truck package2 truck2 s2 (1)
drive-truck truck2 s2 s1 driver1 (1)
unload-truck package2 truck2 s1 (1)
drive-truck truck2 s1 s0 driver1 (1)
disembark-truck driver1 truck2 s0 (1)
unload-truck package5 truck2 s0 (1)"
driverlog,"(define (domain driverlog)
  (:requirements :strips) 
  (:predicates         (OBJ ?obj)
                       (TRUCK ?truck)
                       (LOCATION ?loc)
                (driver ?d)
                (at ?obj ?loc)
                (in ?obj1 ?obj)
                (driving ?d ?v)
                (link ?x ?y) (path ?x ?y)
                (empty ?v)
)


(:action LOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
  :parameters
   (?truck
    ?loc-from
    ?loc-to
    ?driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
  :parameters
   (?driver
    ?loc-from
    ?loc-to)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
        (at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
","(define (problem DLOG-3-3-7)
        (:domain driverlog)
        (:objects
        driver1
        driver2
        driver3
        truck1
        truck2
        truck3
        package1
        package2
        package3
        package4
        package5
        package6
        package7
        s0
        s1
        s2
        p1-0
        p2-0
        p2-1
        )
        (:init
        (at driver1 s2)
        (DRIVER driver1)
        (at driver2 s0)
        (DRIVER driver2)
        (at driver3 s1)
        (DRIVER driver3)
        (at truck1 s2)
        (empty truck1)
        (TRUCK truck1)
        (at truck2 s2)
        (empty truck2)
        (TRUCK truck2)
        (at truck3 s2)
        (empty truck3)
        (TRUCK truck3)
        (at package1 s0)
        (OBJ package1)
        (at package2 s1)
        (OBJ package2)
        (at package3 s0)
        (OBJ package3)
        (at package4 s0)
        (OBJ package4)
        (at package5 s1)
        (OBJ package5)
        (at package6 s2)
        (OBJ package6)
        (at package7 s2)
        (OBJ package7)
        (LOCATION s0)
        (LOCATION s1)
        (LOCATION s2)
        (LOCATION p1-0)
        (LOCATION p2-0)
        (LOCATION p2-1)
        (path s1 p1-0)
        (path p1-0 s1)
        (path s0 p1-0)
        (path p1-0 s0)
        (path s2 p2-0)
        (path p2-0 s2)
        (path s0 p2-0)
        (path p2-0 s0)
        (path s2 p2-1)
        (path p2-1 s2)
        (path s1 p2-1)
        (path p2-1 s1)
        (link s0 s1)
        (link s1 s0)
        (link s0 s2)
        (link s2 s0)
        (link s1 s2)
        (link s2 s1)
)
        (:goal (and
        (at driver1 s2)
        (at driver2 s0)
        (at truck2 s1)
        (at truck3 s0)
        (at package1 s2)
        (at package2 s0)
        (at package3 s1)
        (at package4 s2)
        (at package5 s1)
        (at package6 s2)
        (at package7 s1)
        ))


)
","walk driver3 s1 p2-1 (1)
walk driver3 p2-1 s2 (1)
board-truck driver3 truck2 s2 (1)
drive-truck truck2 s2 s1 driver3 (1)
unload-truck package7 truck2 s1 (1)
load-truck package2 truck2 s1 (1)
drive-truck truck2 s1 s0 driver3 (1)
load-truck package4 truck2 s0 (1)
load-truck package3 truck2 s0 (1)
unload-truck package2 truck2 s0 (1)
load-truck package1 truck2 s0 (1)
drive-truck truck2 s0 s2 driver3 (1)
unload-truck package4 truck2 s2 (1)
unload-truck package1 truck2 s2 (1)
drive-truck truck2 s2 s1 driver3 (1)
unload-truck package3 truck2 s1 (1)
disembark-truck driver3 truck2 s1 (1)
walk driver3 s1 p2-1 (1)
walk driver3 p2-1 s2 (1)
board-truck driver3 truck3 s2 (1)
drive-truck truck3 s2 s0 driver3 (1)"
driverlog,"(define (domain driverlog)
  (:requirements :strips) 
  (:predicates         (OBJ ?obj)
                       (TRUCK ?truck)
                       (LOCATION ?loc)
                (driver ?d)
                (at ?obj ?loc)
                (in ?obj1 ?obj)
                (driving ?d ?v)
                (link ?x ?y) (path ?x ?y)
                (empty ?v)
)


(:action LOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
  :parameters
   (?truck
    ?loc-from
    ?loc-to
    ?driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
  :parameters
   (?driver
    ?loc-from
    ?loc-to)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
        (at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
","(define (problem DLOG-2-3-6)
        (:domain driverlog)
        (:objects
        driver1
        driver2
        truck1
        truck2
        truck3
        package1
        package2
        package3
        package4
        package5
        package6
        s0
        s1
        s2
        s3
        s4
        p0-1
        p1-2
        p1-3
        p3-2
        p3-4
        p4-0
        )
        (:init
        (at driver1 s4)
        (DRIVER driver1)
        (at driver2 s1)
        (DRIVER driver2)
        (at truck1 s2)
        (empty truck1)
        (TRUCK truck1)
        (at truck2 s0)
        (empty truck2)
        (TRUCK truck2)
        (at truck3 s3)
        (empty truck3)
        (TRUCK truck3)
        (at package1 s2)
        (OBJ package1)
        (at package2 s1)
        (OBJ package2)
        (at package3 s3)
        (OBJ package3)
        (at package4 s0)
        (OBJ package4)
        (at package5 s1)
        (OBJ package5)
        (at package6 s1)
        (OBJ package6)
        (LOCATION s0)
        (LOCATION s1)
        (LOCATION s2)
        (LOCATION s3)
        (LOCATION s4)
        (LOCATION p0-1)
        (LOCATION p1-2)
        (LOCATION p1-3)
        (LOCATION p3-2)
        (LOCATION p3-4)
        (LOCATION p4-0)
        (path s0 p0-1)
        (path p0-1 s0)
        (path s1 p0-1)
        (path p0-1 s1)
        (path s1 p1-2)
        (path p1-2 s1)
        (path s2 p1-2)
        (path p1-2 s2)
        (path s1 p1-3)
        (path p1-3 s1)
        (path s3 p1-3)
        (path p1-3 s3)
        (path s3 p3-2)
        (path p3-2 s3)
        (path s2 p3-2)
        (path p3-2 s2)
        (path s3 p3-4)
        (path p3-4 s3)
        (path s4 p3-4)
        (path p3-4 s4)
        (path s4 p4-0)
        (path p4-0 s4)
        (path s0 p4-0)
        (path p4-0 s0)
        (link s0 s2)
        (link s2 s0)
        (link s0 s3)
        (link s3 s0)
        (link s1 s0)
        (link s0 s1)
        (link s2 s1)
        (link s1 s2)
        (link s3 s2)
        (link s2 s3)
        (link s4 s0)
        (link s0 s4)
        (link s4 s2)
        (link s2 s4)
        (link s4 s3)
        (link s3 s4)
)
        (:goal (and
        (at driver1 s3)
        (at driver2 s4)
        (at truck1 s3)
        (at truck2 s3)
        (at package1 s3)
        (at package2 s2)
        (at package3 s1)
        (at package4 s0)
        (at package5 s1)
        (at package6 s1)
        ))


)
","walk driver1 s4 p4-0 (1)
walk driver2 s1 p1-2 (1)
walk driver1 p4-0 s0 (1)
board-truck driver1 truck2 s0 (1)
drive-truck truck2 s0 s3 driver1 (1)
walk driver2 p1-2 s2 (1)
load-truck package1 truck1 s2 (1)
load-truck package3 truck2 s3 (1)
drive-truck truck2 s3 s0 driver1 (1)
drive-truck truck2 s0 s1 driver1 (1)
unload-truck package3 truck2 s1 (1)
load-truck package2 truck2 s1 (1)
drive-truck truck2 s1 s2 driver1 (1)
unload-truck package2 truck2 s2 (1)
drive-truck truck2 s2 s3 driver1 (1)
board-truck driver2 truck1 s2 (1)
drive-truck truck1 s2 s3 driver2 (1)
unload-truck package1 truck1 s3 (1)
disembark-truck driver1 truck2 s3 (1)
disembark-truck driver2 truck1 s3 (1)
walk driver2 s3 p3-4 (1)
walk driver2 p3-4 s4 (1)"
driverlog,"(define (domain driverlog)
  (:requirements :strips) 
  (:predicates         (OBJ ?obj)
                       (TRUCK ?truck)
                       (LOCATION ?loc)
                (driver ?d)
                (at ?obj ?loc)
                (in ?obj1 ?obj)
                (driving ?d ?v)
                (link ?x ?y) (path ?x ?y)
                (empty ?v)
)


(:action LOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
  :parameters
   (?truck
    ?loc-from
    ?loc-to
    ?driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
  :parameters
   (?driver
    ?loc-from
    ?loc-to)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
        (at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
","(define (problem DLOG-2-3-6)
        (:domain driverlog)
        (:objects
        driver1
        driver2
        truck1
        truck2
        truck3
        package1
        package2
        package3
        package4
        package5
        package6
        s0
        s1
        s2
        s3
        s4
        s5
        p1-0
        p1-4
        p1-5
        p2-1
        p2-3
        p3-0
        p3-1
        p3-5
        p4-5
        )
        (:init
        (at driver1 s4)
        (DRIVER driver1)
        (at driver2 s0)
        (DRIVER driver2)
        (at truck1 s0)
        (empty truck1)
        (TRUCK truck1)
        (at truck2 s4)
        (empty truck2)
        (TRUCK truck2)
        (at truck3 s5)
        (empty truck3)
        (TRUCK truck3)
        (at package1 s1)
        (OBJ package1)
        (at package2 s0)
        (OBJ package2)
        (at package3 s4)
        (OBJ package3)
        (at package4 s4)
        (OBJ package4)
        (at package5 s4)
        (OBJ package5)
        (at package6 s2)
        (OBJ package6)
        (LOCATION s0)
        (LOCATION s1)
        (LOCATION s2)
        (LOCATION s3)
        (LOCATION s4)
        (LOCATION s5)
        (LOCATION p1-0)
        (LOCATION p1-4)
        (LOCATION p1-5)
        (LOCATION p2-1)
        (LOCATION p2-3)
        (LOCATION p3-0)
        (LOCATION p3-1)
        (LOCATION p3-5)
        (LOCATION p4-5)
        (path s1 p1-0)
        (path p1-0 s1)
        (path s0 p1-0)
        (path p1-0 s0)
        (path s1 p1-4)
        (path p1-4 s1)
        (path s4 p1-4)
        (path p1-4 s4)
        (path s1 p1-5)
        (path p1-5 s1)
        (path s5 p1-5)
        (path p1-5 s5)
        (path s2 p2-1)
        (path p2-1 s2)
        (path s1 p2-1)
        (path p2-1 s1)
        (path s2 p2-3)
        (path p2-3 s2)
        (path s3 p2-3)
        (path p2-3 s3)
        (path s3 p3-0)
        (path p3-0 s3)
        (path s0 p3-0)
        (path p3-0 s0)
        (path s3 p3-1)
        (path p3-1 s3)
        (path s1 p3-1)
        (path p3-1 s1)
        (path s3 p3-5)
        (path p3-5 s3)
        (path s5 p3-5)
        (path p3-5 s5)
        (path s4 p4-5)
        (path p4-5 s4)
        (path s5 p4-5)
        (path p4-5 s5)
        (link s0 s5)
        (link s5 s0)
        (link s1 s0)
        (link s0 s1)
        (link s1 s2)
        (link s2 s1)
        (link s1 s4)
        (link s4 s1)
        (link s1 s5)
        (link s5 s1)
        (link s2 s0)
        (link s0 s2)
        (link s3 s0)
        (link s0 s3)
        (link s3 s1)
        (link s1 s3)
        (link s3 s2)
        (link s2 s3)
        (link s3 s4)
        (link s4 s3)
        (link s4 s0)
        (link s0 s4)
        (link s5 s3)
        (link s3 s5)
        (link s5 s4)
        (link s4 s5)
)
        (:goal (and
        (at driver1 s1)
        (at driver2 s0)
        (at package1 s5)
        (at package2 s1)
        (at package3 s5)
        (at package4 s1)
        (at package5 s3)
        (at package6 s2)
        ))


)
","load-truck package5 truck2 s4 (1)
board-truck driver1 truck2 s4 (1)
load-truck package4 truck2 s4 (1)
load-truck package3 truck2 s4 (1)
drive-truck truck2 s4 s0 driver1 (1)
load-truck package2 truck2 s0 (1)
drive-truck truck2 s0 s3 driver1 (1)
unload-truck package5 truck2 s3 (1)
drive-truck truck2 s3 s1 driver1 (1)
unload-truck package4 truck2 s1 (1)
unload-truck package2 truck2 s1 (1)
load-truck package1 truck2 s1 (1)
drive-truck truck2 s1 s5 driver1 (1)
unload-truck package3 truck2 s5 (1)
unload-truck package1 truck2 s5 (1)
drive-truck truck2 s5 s1 driver1 (1)
disembark-truck driver1 truck2 s1 (1)"
driverlog,"(define (domain driverlog)
  (:requirements :strips) 
  (:predicates         (OBJ ?obj)
                       (TRUCK ?truck)
                       (LOCATION ?loc)
                (driver ?d)
                (at ?obj ?loc)
                (in ?obj1 ?obj)
                (driving ?d ?v)
                (link ?x ?y) (path ?x ?y)
                (empty ?v)
)


(:action LOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
  :parameters
   (?truck
    ?loc-from
    ?loc-to
    ?driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
  :parameters
   (?driver
    ?loc-from
    ?loc-to)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
        (at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
","(define (problem DLOG-2-3-6)
        (:domain driverlog)
        (:objects
        driver1
        driver2
        truck1
        truck2
        truck3
        package1
        package2
        package3
        package4
        package5
        package6
        s0
        s1
        s2
        s3
        s4
        s5
        s6
        p0-3
        p1-0
        p1-5
        p2-3
        p2-6
        p3-4
        p4-0
        p4-1
        p4-2
        p5-0
        p6-3
        )
        (:init
        (at driver1 s6)
        (DRIVER driver1)
        (at driver2 s0)
        (DRIVER driver2)
        (at truck1 s0)
        (empty truck1)
        (TRUCK truck1)
        (at truck2 s2)
        (empty truck2)
        (TRUCK truck2)
        (at truck3 s2)
        (empty truck3)
        (TRUCK truck3)
        (at package1 s6)
        (OBJ package1)
        (at package2 s2)
        (OBJ package2)
        (at package3 s3)
        (OBJ package3)
        (at package4 s0)
        (OBJ package4)
        (at package5 s5)
        (OBJ package5)
        (at package6 s5)
        (OBJ package6)
        (LOCATION s0)
        (LOCATION s1)
        (LOCATION s2)
        (LOCATION s3)
        (LOCATION s4)
        (LOCATION s5)
        (LOCATION s6)
        (LOCATION p0-3)
        (LOCATION p1-0)
        (LOCATION p1-5)
        (LOCATION p2-3)
        (LOCATION p2-6)
        (LOCATION p3-4)
        (LOCATION p4-0)
        (LOCATION p4-1)
        (LOCATION p4-2)
        (LOCATION p5-0)
        (LOCATION p6-3)
        (path s0 p0-3)
        (path p0-3 s0)
        (path s3 p0-3)
        (path p0-3 s3)
        (path s1 p1-0)
        (path p1-0 s1)
        (path s0 p1-0)
        (path p1-0 s0)
        (path s1 p1-5)
        (path p1-5 s1)
        (path s5 p1-5)
        (path p1-5 s5)
        (path s2 p2-3)
        (path p2-3 s2)
        (path s3 p2-3)
        (path p2-3 s3)
        (path s2 p2-6)
        (path p2-6 s2)
        (path s6 p2-6)
        (path p2-6 s6)
        (path s3 p3-4)
        (path p3-4 s3)
        (path s4 p3-4)
        (path p3-4 s4)
        (path s4 p4-0)
        (path p4-0 s4)
        (path s0 p4-0)
        (path p4-0 s0)
        (path s4 p4-1)
        (path p4-1 s4)
        (path s1 p4-1)
        (path p4-1 s1)
        (path s4 p4-2)
        (path p4-2 s4)
        (path s2 p4-2)
        (path p4-2 s2)
        (path s5 p5-0)
        (path p5-0 s5)
        (path s0 p5-0)
        (path p5-0 s0)
        (path s6 p6-3)
        (path p6-3 s6)
        (path s3 p6-3)
        (path p6-3 s3)
        (link s0 s2)
        (link s2 s0)
        (link s0 s5)
        (link s5 s0)
        (link s1 s0)
        (link s0 s1)
        (link s1 s3)
        (link s3 s1)
        (link s1 s4)
        (link s4 s1)
        (link s1 s6)
        (link s6 s1)
        (link s2 s1)
        (link s1 s2)
        (link s2 s4)
        (link s4 s2)
        (link s3 s6)
        (link s6 s3)
        (link s4 s0)
        (link s0 s4)
        (link s5 s1)
        (link s1 s5)
        (link s5 s2)
        (link s2 s5)
        (link s6 s0)
        (link s0 s6)
        (link s6 s2)
        (link s2 s6)
        (link s6 s4)
        (link s4 s6)
        (link s6 s5)
        (link s5 s6)
)
        (:goal (and
        (at driver2 s4)
        (at truck2 s4)
        (at package1 s6)
        (at package2 s3)
        (at package3 s4)
        (at package4 s6)
        (at package5 s1)
        ))


)
","board-truck driver2 truck1 s0 (1)
load-truck package4 truck1 s0 (1)
drive-truck truck1 s0 s6 driver2 (1)
unload-truck package4 truck1 s6 (1)
drive-truck truck1 s6 s2 driver2 (1)
disembark-truck driver2 truck1 s2 (1)
board-truck driver2 truck2 s2 (1)
load-truck package2 truck2 s2 (1)
drive-truck truck2 s2 s5 driver2 (1)
load-truck package5 truck2 s5 (1)
drive-truck truck2 s5 s1 driver2 (1)
unload-truck package5 truck2 s1 (1)
drive-truck truck2 s1 s3 driver2 (1)
load-truck package3 truck2 s3 (1)
unload-truck package2 truck2 s3 (1)
drive-truck truck2 s3 s1 driver2 (1)
drive-truck truck2 s1 s4 driver2 (1)
disembark-truck driver2 truck2 s4 (1)
unload-truck package3 truck2 s4 (1)"
driverlog,"(define (domain driverlog)
  (:requirements :strips) 
  (:predicates         (OBJ ?obj)
                       (TRUCK ?truck)
                       (LOCATION ?loc)
                (driver ?d)
                (at ?obj ?loc)
                (in ?obj1 ?obj)
                (driving ?d ?v)
                (link ?x ?y) (path ?x ?y)
                (empty ?v)
)


(:action LOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
  :parameters
   (?truck
    ?loc-from
    ?loc-to
    ?driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
  :parameters
   (?driver
    ?loc-from
    ?loc-to)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
        (at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
","(define (problem DLOG-2-3-6)
        (:domain driverlog)
        (:objects
        driver1
        driver2
        truck1
        truck2
        truck3
        package1
        package2
        package3
        package4
        package5
        package6
        s0
        s1
        s2
        s3
        s4
        s5
        s6
        s7
        s8
        s9
        s10
        s11
        p0-2
        p0-8
        p1-4
        p2-3
        p2-6
        p2-7
        p3-1
        p3-9
        p4-0
        p5-0
        p6-4
        p6-7
        p6-8
        p6-10
        p6-11
        p7-1
        p7-10
        p8-4
        p8-11
        p9-7
        p10-0
        p11-0
        p11-1
        p11-4
        p11-10
        )
        (:init
        (at driver1 s0)
        (DRIVER driver1)
        (at driver2 s9)
        (DRIVER driver2)
        (at truck1 s3)
        (empty truck1)
        (TRUCK truck1)
        (at truck2 s9)
        (empty truck2)
        (TRUCK truck2)
        (at truck3 s2)
        (empty truck3)
        (TRUCK truck3)
        (at package1 s4)
        (OBJ package1)
        (at package2 s6)
        (OBJ package2)
        (at package3 s5)
        (OBJ package3)
        (at package4 s6)
        (OBJ package4)
        (at package5 s0)
        (OBJ package5)
        (at package6 s2)
        (OBJ package6)
        (LOCATION s0)
        (LOCATION s1)
        (LOCATION s2)
        (LOCATION s3)
        (LOCATION s4)
        (LOCATION s5)
        (LOCATION s6)
        (LOCATION s7)
        (LOCATION s8)
        (LOCATION s9)
        (LOCATION s10)
        (LOCATION s11)
        (LOCATION p0-2)
        (LOCATION p0-8)
        (LOCATION p1-4)
        (LOCATION p2-3)
        (LOCATION p2-6)
        (LOCATION p2-7)
        (LOCATION p3-1)
        (LOCATION p3-9)
        (LOCATION p4-0)
        (LOCATION p5-0)
        (LOCATION p6-4)
        (LOCATION p6-7)
        (LOCATION p6-8)
        (LOCATION p6-10)
        (LOCATION p6-11)
        (LOCATION p7-1)
        (LOCATION p7-10)
        (LOCATION p8-4)
        (LOCATION p8-11)
        (LOCATION p9-7)
        (LOCATION p10-0)
        (LOCATION p11-0)
        (LOCATION p11-1)
        (LOCATION p11-4)
        (LOCATION p11-10)
        (path s0 p0-2)
        (path p0-2 s0)
        (path s2 p0-2)
        (path p0-2 s2)
        (path s0 p0-8)
        (path p0-8 s0)
        (path s8 p0-8)
        (path p0-8 s8)
        (path s1 p1-4)
        (path p1-4 s1)
        (path s4 p1-4)
        (path p1-4 s4)
        (path s2 p2-3)
        (path p2-3 s2)
        (path s3 p2-3)
        (path p2-3 s3)
        (path s2 p2-6)
        (path p2-6 s2)
        (path s6 p2-6)
        (path p2-6 s6)
        (path s2 p2-7)
        (path p2-7 s2)
        (path s7 p2-7)
        (path p2-7 s7)
        (path s3 p3-1)
        (path p3-1 s3)
        (path s1 p3-1)
        (path p3-1 s1)
        (path s3 p3-9)
        (path p3-9 s3)
        (path s9 p3-9)
        (path p3-9 s9)
        (path s4 p4-0)
        (path p4-0 s4)
        (path s0 p4-0)
        (path p4-0 s0)
        (path s5 p5-0)
        (path p5-0 s5)
        (path s0 p5-0)
        (path p5-0 s0)
        (path s6 p6-4)
        (path p6-4 s6)
        (path s4 p6-4)
        (path p6-4 s4)
        (path s6 p6-7)
        (path p6-7 s6)
        (path s7 p6-7)
        (path p6-7 s7)
        (path s6 p6-8)
        (path p6-8 s6)
        (path s8 p6-8)
        (path p6-8 s8)
        (path s6 p6-10)
        (path p6-10 s6)
        (path s10 p6-10)
        (path p6-10 s10)
        (path s6 p6-11)
        (path p6-11 s6)
        (path s11 p6-11)
        (path p6-11 s11)
        (path s7 p7-1)
        (path p7-1 s7)
        (path s1 p7-1)
        (path p7-1 s1)
        (path s7 p7-10)
        (path p7-10 s7)
        (path s10 p7-10)
        (path p7-10 s10)
        (path s8 p8-4)
        (path p8-4 s8)
        (path s4 p8-4)
        (path p8-4 s4)
        (path s8 p8-11)
        (path p8-11 s8)
        (path s11 p8-11)
        (path p8-11 s11)
        (path s9 p9-7)
        (path p9-7 s9)
        (path s7 p9-7)
        (path p9-7 s7)
        (path s10 p10-0)
        (path p10-0 s10)
        (path s0 p10-0)
        (path p10-0 s0)
        (path s11 p11-0)
        (path p11-0 s11)
        (path s0 p11-0)
        (path p11-0 s0)
        (path s11 p11-1)
        (path p11-1 s11)
        (path s1 p11-1)
        (path p11-1 s1)
        (path s11 p11-4)
        (path p11-4 s11)
        (path s4 p11-4)
        (path p11-4 s4)
        (path s11 p11-10)
        (path p11-10 s11)
        (path s10 p11-10)
        (path p11-10 s10)
        (link s0 s2)
        (link s2 s0)
        (link s0 s4)
        (link s4 s0)
        (link s0 s7)
        (link s7 s0)
        (link s1 s4)
        (link s4 s1)
        (link s1 s9)
        (link s9 s1)
        (link s2 s3)
        (link s3 s2)
        (link s2 s5)
        (link s5 s2)
        (link s3 s0)
        (link s0 s3)
        (link s3 s8)
        (link s8 s3)
        (link s4 s7)
        (link s7 s4)
        (link s5 s3)
        (link s3 s5)
        (link s5 s4)
        (link s4 s5)
        (link s5 s8)
        (link s8 s5)
        (link s5 s10)
        (link s10 s5)
        (link s6 s4)
        (link s4 s6)
        (link s7 s1)
        (link s1 s7)
        (link s7 s9)
        (link s9 s7)
        (link s7 s11)
        (link s11 s7)
        (link s8 s2)
        (link s2 s8)
        (link s8 s4)
        (link s4 s8)
        (link s8 s7)
        (link s7 s8)
        (link s8 s9)
        (link s9 s8)
        (link s9 s11)
        (link s11 s9)
        (link s10 s0)
        (link s0 s10)
        (link s10 s1)
        (link s1 s10)
        (link s10 s6)
        (link s6 s10)
        (link s10 s8)
        (link s8 s10)
        (link s11 s0)
        (link s0 s11)
        (link s11 s1)
        (link s1 s11)
        (link s11 s3)
        (link s3 s11)
        (link s11 s6)
        (link s6 s11)
)
        (:goal (and
        (at driver1 s11)
        (at truck2 s8)
        (at truck3 s4)
        (at package1 s5)
        (at package2 s0)
        (at package3 s4)
        (at package4 s0)
        (at package6 s5)
        ))


)
","load-truck package6 truck3 s2 (1)
board-truck driver2 truck2 s9 (1)
drive-truck truck2 s9 s8 driver2 (1)
walk driver1 s0 p0-2 (1)
walk driver1 p0-2 s2 (1)
board-truck driver1 truck3 s2 (1)
drive-truck truck3 s2 s5 driver1 (1)
unload-truck package6 truck3 s5 (1)
load-truck package3 truck3 s5 (1)
drive-truck truck3 s5 s4 driver1 (1)
unload-truck package3 truck3 s4 (1)
load-truck package1 truck3 s4 (1)
drive-truck truck3 s4 s6 driver1 (1)
load-truck package4 truck3 s6 (1)
load-truck package2 truck3 s6 (1)
drive-truck truck3 s6 s4 driver1 (1)
drive-truck truck3 s4 s5 driver1 (1)
unload-truck package1 truck3 s5 (1)
drive-truck truck3 s5 s4 driver1 (1)
drive-truck truck3 s4 s0 driver1 (1)
unload-truck package4 truck3 s0 (1)
unload-truck package2 truck3 s0 (1)
drive-truck truck3 s0 s4 driver1 (1)
disembark-truck driver1 truck3 s4 (1)
walk driver1 s4 p11-4 (1)
walk driver1 p11-4 s11 (1)"
driverlog,"(define (domain driverlog)
  (:requirements :strips) 
  (:predicates         (OBJ ?obj)
                       (TRUCK ?truck)
                       (LOCATION ?loc)
                (driver ?d)
                (at ?obj ?loc)
                (in ?obj1 ?obj)
                (driving ?d ?v)
                (link ?x ?y) (path ?x ?y)
                (empty ?v)
)


(:action LOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
  :parameters
   (?obj
    ?truck
    ?loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
  :parameters
   (?driver
    ?truck
    ?loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
  :parameters
   (?truck
    ?loc-from
    ?loc-to
    ?driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
  :parameters
   (?driver
    ?loc-from
    ?loc-to)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
        (at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
","(define (problem DLOG-3-3-6)
        (:domain driverlog)
        (:objects
        driver1
        driver2
        driver3
        truck1
        truck2
        truck3
        package1
        package2
        package3
        package4
        package5
        package6
        s0
        s1
        s2
        s3
        s4
        s5
        s6
        s7
        s8
        s9
        p0-1
        p1-2
        p2-3
        p2-5
        p3-2
        p3-7
        p4-6
        p4-7
        p6-2
        p6-5
        p6-8
        p7-9
        p8-3
        p8-5
        p9-4
        )
        (:init
        (at driver1 s9)
        (DRIVER driver1)
        (at driver2 s2)
        (DRIVER driver2)
        (at driver3 s2)
        (DRIVER driver3)
        (at truck1 s2)
        (empty truck1)
        (TRUCK truck1)
        (at truck2 s1)
        (empty truck2)
        (TRUCK truck2)
        (at truck3 s8)
        (empty truck3)
        (TRUCK truck3)
        (at package1 s5)
        (OBJ package1)
        (at package2 s5)
        (OBJ package2)
        (at package3 s9)
        (OBJ package3)
        (at package4 s3)
        (OBJ package4)
        (at package5 s1)
        (OBJ package5)
        (at package6 s4)
        (OBJ package6)
        (LOCATION s0)
        (LOCATION s1)
        (LOCATION s2)
        (LOCATION s3)
        (LOCATION s4)
        (LOCATION s5)
        (LOCATION s6)
        (LOCATION s7)
        (LOCATION s8)
        (LOCATION s9)
        (LOCATION p0-1)
        (LOCATION p1-2)
        (LOCATION p2-3)
        (LOCATION p2-5)
        (LOCATION p3-2)
        (LOCATION p3-7)
        (LOCATION p4-6)
        (LOCATION p4-7)
        (LOCATION p6-2)
        (LOCATION p6-5)
        (LOCATION p6-8)
        (LOCATION p7-9)
        (LOCATION p8-3)
        (LOCATION p8-5)
        (LOCATION p9-4)
        (path s0 p0-1)
        (path p0-1 s0)
        (path s1 p0-1)
        (path p0-1 s1)
        (path s1 p1-2)
        (path p1-2 s1)
        (path s2 p1-2)
        (path p1-2 s2)
        (path s2 p2-3)
        (path p2-3 s2)
        (path s3 p2-3)
        (path p2-3 s3)
        (path s2 p2-5)
        (path p2-5 s2)
        (path s5 p2-5)
        (path p2-5 s5)
        (path s3 p3-7)
        (path p3-7 s3)
        (path s7 p3-7)
        (path p3-7 s7)
        (path s4 p4-6)
        (path p4-6 s4)
        (path s6 p4-6)
        (path p4-6 s6)
        (path s4 p4-7)
        (path p4-7 s4)
        (path s7 p4-7)
        (path p4-7 s7)
        (path s6 p6-2)
        (path p6-2 s6)
        (path s2 p6-2)
        (path p6-2 s2)
        (path s6 p6-5)
        (path p6-5 s6)
        (path s5 p6-5)
        (path p6-5 s5)
        (path s6 p6-8)
        (path p6-8 s6)
        (path s8 p6-8)
        (path p6-8 s8)
        (path s7 p7-9)
        (path p7-9 s7)
        (path s9 p7-9)
        (path p7-9 s9)
        (path s8 p8-3)
        (path p8-3 s8)
        (path s3 p8-3)
        (path p8-3 s3)
        (path s8 p8-5)
        (path p8-5 s8)
        (path s5 p8-5)
        (path p8-5 s5)
        (path s9 p9-4)
        (path p9-4 s9)
        (path s4 p9-4)
        (path p9-4 s4)
        (link s0 s1)
        (link s1 s0)
        (link s0 s2)
        (link s2 s0)
        (link s0 s5)
        (link s5 s0)
        (link s0 s7)
        (link s7 s0)
        (link s0 s8)
        (link s8 s0)
        (link s1 s3)
        (link s3 s1)
        (link s1 s5)
        (link s5 s1)
        (link s1 s6)
        (link s6 s1)
        (link s2 s3)
        (link s3 s2)
        (link s3 s0)
        (link s0 s3)
        (link s3 s9)
        (link s9 s3)
        (link s4 s1)
        (link s1 s4)
        (link s4 s9)
        (link s9 s4)
        (link s5 s4)
        (link s4 s5)
        (link s6 s3)
        (link s3 s6)
        (link s6 s4)
        (link s4 s6)
        (link s6 s5)
        (link s5 s6)
        (link s7 s1)
        (link s1 s7)
        (link s7 s6)
        (link s6 s7)
        (link s7 s8)
        (link s8 s7)
        (link s8 s1)
        (link s1 s8)
        (link s8 s4)
        (link s4 s8)
        (link s8 s6)
        (link s6 s8)
        (link s9 s7)
        (link s7 s9)
        (link s9 s8)
        (link s8 s9)
)
        (:goal (and
        (at driver3 s1)
        (at truck1 s6)
        (at truck3 s3)
        (at package1 s0)
        (at package2 s0)
        (at package3 s4)
        (at package4 s4)
        (at package5 s3)
        (at package6 s5)
        ))


)
","board-truck driver2 truck1 s2 (1)
drive-truck truck1 s2 s3 driver2 (1)
load-truck package4 truck1 s3 (1)
drive-truck truck1 s3 s9 driver2 (1)
load-truck package3 truck1 s9 (1)
drive-truck truck1 s9 s4 driver2 (1)
load-truck package6 truck1 s4 (1)
unload-truck package4 truck1 s4 (1)
unload-truck package3 truck1 s4 (1)
drive-truck truck1 s4 s5 driver2 (1)
unload-truck package6 truck1 s5 (1)
load-truck package2 truck1 s5 (1)
load-truck package1 truck1 s5 (1)
drive-truck truck1 s5 s0 driver2 (1)
unload-truck package2 truck1 s0 (1)
unload-truck package1 truck1 s0 (1)
drive-truck truck1 s0 s8 driver2 (1)
walk driver3 s2 p1-2 (1)
walk driver3 p1-2 s1 (1)
drive-truck truck1 s8 s6 driver2 (1)
disembark-truck driver2 truck1 s6 (1)
walk driver2 s6 p6-8 (1)
walk driver2 p6-8 s8 (1)
board-truck driver2 truck3 s8 (1)
drive-truck truck3 s8 s1 driver2 (1)
load-truck package5 truck3 s1 (1)
drive-truck truck3 s1 s3 driver2 (1)
unload-truck package5 truck3 s3 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f2-p1-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 - passenger
             f0 f1 - floor)


(:init
(above f0 f1)



(origin p0 f1)
(destin p0 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
))
)


","up f0 f1 (1)
board f1 p0 (1)
down f1 f0 (1)
depart f0 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f2-p1-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 - passenger
             f0 f1 - floor)


(:init
(above f0 f1)



(origin p0 f0)
(destin p0 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
))
)


","board f0 p0 (1)
up f0 f1 (1)
depart f1 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f2-p1-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 - passenger
             f0 f1 - floor)


(:init
(above f0 f1)



(origin p0 f1)
(destin p0 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
))
)


","up f0 f1 (1)
board f1 p0 (1)
down f1 f0 (1)
depart f0 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f2-p1-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 - passenger
             f0 f1 - floor)


(:init
(above f0 f1)



(origin p0 f1)
(destin p0 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
))
)


","up f0 f1 (1)
board f1 p0 (1)
down f1 f0 (1)
depart f0 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f2-p1-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 - passenger
             f0 f1 - floor)


(:init
(above f0 f1)



(origin p0 f1)
(destin p0 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
))
)


","up f0 f1 (1)
board f1 p0 (1)
down f1 f0 (1)
depart f0 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f4-p2-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 - passenger
             f0 f1 f2 f3 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)

(above f1 f2)
(above f1 f3)

(above f2 f3)



(origin p0 f3)
(destin p0 f2)

(origin p1 f1)
(destin p1 f3)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
))
)


","up f0 f1 (1)
board f1 p1 (1)
up f1 f3 (1)
board f3 p0 (1)
depart f3 p1 (1)
down f3 f2 (1)
depart f2 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f4-p2-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 - passenger
             f0 f1 f2 f3 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)

(above f1 f2)
(above f1 f3)

(above f2 f3)



(origin p0 f0)
(destin p0 f1)

(origin p1 f3)
(destin p1 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
))
)


","board f0 p0 (1)
up f0 f1 (1)
depart f1 p0 (1)
up f1 f3 (1)
board f3 p1 (1)
down f3 f0 (1)
depart f0 p1 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f4-p2-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 - passenger
             f0 f1 f2 f3 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)

(above f1 f2)
(above f1 f3)

(above f2 f3)



(origin p0 f3)
(destin p0 f0)

(origin p1 f0)
(destin p1 f2)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
))
)


","board f0 p1 (1)
up f0 f2 (1)
depart f2 p1 (1)
up f2 f3 (1)
board f3 p0 (1)
down f3 f0 (1)
depart f0 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f4-p2-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 - passenger
             f0 f1 f2 f3 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)

(above f1 f2)
(above f1 f3)

(above f2 f3)



(origin p0 f1)
(destin p0 f3)

(origin p1 f2)
(destin p1 f3)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
))
)


","up f0 f1 (1)
board f1 p0 (1)
up f1 f2 (1)
board f2 p1 (1)
up f2 f3 (1)
depart f3 p1 (1)
depart f3 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f4-p2-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 - passenger
             f0 f1 f2 f3 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)

(above f1 f2)
(above f1 f3)

(above f2 f3)



(origin p0 f3)
(destin p0 f2)

(origin p1 f2)
(destin p1 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
))
)


","up f0 f3 (1)
board f3 p0 (1)
down f3 f2 (1)
board f2 p1 (1)
depart f2 p0 (1)
down f2 f0 (1)
depart f0 p1 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f6-p3-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 - passenger
             f0 f1 f2 f3 f4 f5 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)

(above f2 f3)
(above f2 f4)
(above f2 f5)

(above f3 f4)
(above f3 f5)

(above f4 f5)



(origin p0 f1)
(destin p0 f4)

(origin p1 f3)
(destin p1 f1)

(origin p2 f5)
(destin p2 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
))
)


","up f0 f3 (1)
board f3 p1 (1)
up f3 f5 (1)
board f5 p2 (1)
down f5 f1 (1)
board f1 p0 (1)
depart f1 p2 (1)
depart f1 p1 (1)
up f1 f4 (1)
depart f4 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f6-p3-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 - passenger
             f0 f1 f2 f3 f4 f5 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)

(above f2 f3)
(above f2 f4)
(above f2 f5)

(above f3 f4)
(above f3 f5)

(above f4 f5)



(origin p0 f2)
(destin p0 f5)

(origin p1 f5)
(destin p1 f2)

(origin p2 f4)
(destin p2 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
))
)


","up f0 f4 (1)
board f4 p2 (1)
down f4 f1 (1)
depart f1 p2 (1)
up f1 f2 (1)
board f2 p0 (1)
up f2 f5 (1)
board f5 p1 (1)
depart f5 p0 (1)
down f5 f2 (1)
depart f2 p1 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f6-p3-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 - passenger
             f0 f1 f2 f3 f4 f5 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)

(above f2 f3)
(above f2 f4)
(above f2 f5)

(above f3 f4)
(above f3 f5)

(above f4 f5)



(origin p0 f1)
(destin p0 f0)

(origin p1 f4)
(destin p1 f0)

(origin p2 f3)
(destin p2 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
))
)


","up f0 f1 (1)
board f1 p0 (1)
up f1 f3 (1)
board f3 p2 (1)
up f3 f4 (1)
board f4 p1 (1)
down f4 f0 (1)
depart f0 p2 (1)
depart f0 p1 (1)
depart f0 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f6-p3-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 - passenger
             f0 f1 f2 f3 f4 f5 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)

(above f2 f3)
(above f2 f4)
(above f2 f5)

(above f3 f4)
(above f3 f5)

(above f4 f5)



(origin p0 f5)
(destin p0 f0)

(origin p1 f1)
(destin p1 f3)

(origin p2 f0)
(destin p2 f5)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
))
)


","board f0 p2 (1)
up f0 f1 (1)
board f1 p1 (1)
up f1 f3 (1)
depart f3 p1 (1)
up f3 f5 (1)
board f5 p0 (1)
depart f5 p2 (1)
down f5 f0 (1)
depart f0 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f6-p3-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 - passenger
             f0 f1 f2 f3 f4 f5 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)

(above f2 f3)
(above f2 f4)
(above f2 f5)

(above f3 f4)
(above f3 f5)

(above f4 f5)



(origin p0 f3)
(destin p0 f0)

(origin p1 f2)
(destin p1 f0)

(origin p2 f0)
(destin p2 f4)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
))
)


","board f0 p2 (1)
up f0 f2 (1)
board f2 p1 (1)
up f2 f3 (1)
board f3 p0 (1)
down f3 f0 (1)
depart f0 p1 (1)
depart f0 p0 (1)
up f0 f4 (1)
depart f4 p2 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f8-p4-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)

(above f4 f5)
(above f4 f6)
(above f4 f7)

(above f5 f6)
(above f5 f7)

(above f6 f7)



(origin p0 f7)
(destin p0 f6)

(origin p1 f1)
(destin p1 f3)

(origin p2 f1)
(destin p2 f7)

(origin p3 f2)
(destin p3 f4)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
))
)


","up f0 f1 (1)
board f1 p1 (1)
board f1 p2 (1)
up f1 f2 (1)
board f2 p3 (1)
up f2 f3 (1)
depart f3 p1 (1)
up f3 f4 (1)
depart f4 p3 (1)
up f4 f7 (1)
board f7 p0 (1)
depart f7 p2 (1)
down f7 f6 (1)
depart f6 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f8-p4-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)

(above f4 f5)
(above f4 f6)
(above f4 f7)

(above f5 f6)
(above f5 f7)

(above f6 f7)



(origin p0 f0)
(destin p0 f5)

(origin p1 f7)
(destin p1 f4)

(origin p2 f0)
(destin p2 f7)

(origin p3 f1)
(destin p3 f6)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
))
)


","board f0 p0 (1)
board f0 p2 (1)
up f0 f1 (1)
board f1 p3 (1)
up f1 f5 (1)
depart f5 p0 (1)
up f5 f6 (1)
depart f6 p3 (1)
up f6 f7 (1)
board f7 p1 (1)
depart f7 p2 (1)
down f7 f4 (1)
depart f4 p1 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f8-p4-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)

(above f4 f5)
(above f4 f6)
(above f4 f7)

(above f5 f6)
(above f5 f7)

(above f6 f7)



(origin p0 f3)
(destin p0 f0)

(origin p1 f4)
(destin p1 f2)

(origin p2 f1)
(destin p2 f6)

(origin p3 f6)
(destin p3 f7)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
))
)


","up f0 f1 (1)
board f1 p2 (1)
up f1 f3 (1)
board f3 p0 (1)
down f3 f0 (1)
depart f0 p0 (1)
up f0 f4 (1)
board f4 p1 (1)
down f4 f2 (1)
depart f2 p1 (1)
up f2 f6 (1)
board f6 p3 (1)
depart f6 p2 (1)
up f6 f7 (1)
depart f7 p3 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f8-p4-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)

(above f4 f5)
(above f4 f6)
(above f4 f7)

(above f5 f6)
(above f5 f7)

(above f6 f7)



(origin p0 f1)
(destin p0 f7)

(origin p1 f6)
(destin p1 f3)

(origin p2 f3)
(destin p2 f4)

(origin p3 f5)
(destin p3 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
))
)


","up f0 f1 (1)
board f1 p0 (1)
up f1 f5 (1)
board f5 p3 (1)
down f5 f0 (1)
depart f0 p3 (1)
up f0 f6 (1)
board f6 p1 (1)
down f6 f3 (1)
board f3 p2 (1)
depart f3 p1 (1)
up f3 f4 (1)
depart f4 p2 (1)
up f4 f7 (1)
depart f7 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f8-p4-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)

(above f4 f5)
(above f4 f6)
(above f4 f7)

(above f5 f6)
(above f5 f7)

(above f6 f7)



(origin p0 f7)
(destin p0 f2)

(origin p1 f2)
(destin p1 f4)

(origin p2 f6)
(destin p2 f3)

(origin p3 f5)
(destin p3 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
))
)


","up f0 f5 (1)
board f5 p3 (1)
down f5 f1 (1)
depart f1 p3 (1)
up f1 f6 (1)
board f6 p2 (1)
down f6 f3 (1)
depart f3 p2 (1)
up f3 f7 (1)
board f7 p0 (1)
down f7 f2 (1)
board f2 p1 (1)
depart f2 p0 (1)
up f2 f4 (1)
depart f4 p1 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f10-p5-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)

(above f6 f7)
(above f6 f8)
(above f6 f9)

(above f7 f8)
(above f7 f9)

(above f8 f9)



(origin p0 f3)
(destin p0 f6)

(origin p1 f7)
(destin p1 f5)

(origin p2 f3)
(destin p2 f5)

(origin p3 f6)
(destin p3 f2)

(origin p4 f9)
(destin p4 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
))
)


","up f0 f3 (1)
board f3 p0 (1)
board f3 p2 (1)
up f3 f6 (1)
board f6 p3 (1)
depart f6 p0 (1)
down f6 f2 (1)
depart f2 p3 (1)
up f2 f7 (1)
board f7 p1 (1)
down f7 f5 (1)
depart f5 p2 (1)
depart f5 p1 (1)
up f5 f9 (1)
board f9 p4 (1)
down f9 f1 (1)
depart f1 p4 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f10-p5-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)

(above f6 f7)
(above f6 f8)
(above f6 f9)

(above f7 f8)
(above f7 f9)

(above f8 f9)



(origin p0 f0)
(destin p0 f1)

(origin p1 f9)
(destin p1 f4)

(origin p2 f6)
(destin p2 f3)

(origin p3 f5)
(destin p3 f0)

(origin p4 f1)
(destin p4 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
))
)


","board f0 p0 (1)
up f0 f1 (1)
board f1 p4 (1)
depart f1 p0 (1)
up f1 f5 (1)
board f5 p3 (1)
down f5 f0 (1)
depart f0 p4 (1)
depart f0 p3 (1)
up f0 f6 (1)
board f6 p2 (1)
down f6 f3 (1)
depart f3 p2 (1)
up f3 f9 (1)
board f9 p1 (1)
down f9 f4 (1)
depart f4 p1 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f10-p5-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)

(above f6 f7)
(above f6 f8)
(above f6 f9)

(above f7 f8)
(above f7 f9)

(above f8 f9)



(origin p0 f3)
(destin p0 f0)

(origin p1 f4)
(destin p1 f2)

(origin p2 f3)
(destin p2 f4)

(origin p3 f0)
(destin p3 f4)

(origin p4 f9)
(destin p4 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
))
)


","board f0 p3 (1)
up f0 f3 (1)
board f3 p0 (1)
board f3 p2 (1)
up f3 f4 (1)
board f4 p1 (1)
depart f4 p3 (1)
depart f4 p2 (1)
down f4 f2 (1)
depart f2 p1 (1)
up f2 f9 (1)
board f9 p4 (1)
down f9 f0 (1)
depart f0 p4 (1)
depart f0 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f10-p5-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)

(above f6 f7)
(above f6 f8)
(above f6 f9)

(above f7 f8)
(above f7 f9)

(above f8 f9)



(origin p0 f3)
(destin p0 f5)

(origin p1 f6)
(destin p1 f9)

(origin p2 f9)
(destin p2 f8)

(origin p3 f5)
(destin p3 f8)

(origin p4 f1)
(destin p4 f2)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
))
)


","up f0 f1 (1)
board f1 p4 (1)
up f1 f2 (1)
depart f2 p4 (1)
up f2 f3 (1)
board f3 p0 (1)
up f3 f5 (1)
board f5 p3 (1)
depart f5 p0 (1)
up f5 f6 (1)
board f6 p1 (1)
up f6 f9 (1)
board f9 p2 (1)
depart f9 p1 (1)
down f9 f8 (1)
depart f8 p3 (1)
depart f8 p2 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f10-p5-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)

(above f6 f7)
(above f6 f8)
(above f6 f9)

(above f7 f8)
(above f7 f9)

(above f8 f9)



(origin p0 f5)
(destin p0 f1)

(origin p1 f2)
(destin p1 f0)

(origin p2 f2)
(destin p2 f8)

(origin p3 f7)
(destin p3 f5)

(origin p4 f9)
(destin p4 f4)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
))
)


","up f0 f2 (1)
board f2 p1 (1)
board f2 p2 (1)
down f2 f0 (1)
depart f0 p1 (1)
up f0 f7 (1)
board f7 p3 (1)
down f7 f5 (1)
board f5 p0 (1)
depart f5 p3 (1)
down f5 f1 (1)
depart f1 p0 (1)
up f1 f8 (1)
depart f8 p2 (1)
up f8 f9 (1)
board f9 p4 (1)
down f9 f4 (1)
depart f4 p4 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f12-p6-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)

(above f8 f9)
(above f8 f10)
(above f8 f11)

(above f9 f10)
(above f9 f11)

(above f10 f11)



(origin p0 f7)
(destin p0 f10)

(origin p1 f9)
(destin p1 f7)

(origin p2 f5)
(destin p2 f7)

(origin p3 f10)
(destin p3 f0)

(origin p4 f9)
(destin p4 f1)

(origin p5 f2)
(destin p5 f7)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
))
)


","up f0 f2 (1)
board f2 p5 (1)
up f2 f5 (1)
board f5 p2 (1)
up f5 f9 (1)
board f9 p1 (1)
board f9 p4 (1)
down f9 f1 (1)
depart f1 p4 (1)
up f1 f7 (1)
board f7 p0 (1)
depart f7 p5 (1)
depart f7 p2 (1)
depart f7 p1 (1)
up f7 f10 (1)
board f10 p3 (1)
depart f10 p0 (1)
down f10 f0 (1)
depart f0 p3 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f12-p6-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)

(above f8 f9)
(above f8 f10)
(above f8 f11)

(above f9 f10)
(above f9 f11)

(above f10 f11)



(origin p0 f8)
(destin p0 f5)

(origin p1 f11)
(destin p1 f8)

(origin p2 f4)
(destin p2 f7)

(origin p3 f1)
(destin p3 f10)

(origin p4 f1)
(destin p4 f7)

(origin p5 f0)
(destin p5 f4)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
))
)


","board f0 p5 (1)
up f0 f1 (1)
board f1 p3 (1)
board f1 p4 (1)
up f1 f10 (1)
depart f10 p3 (1)
down f10 f4 (1)
board f4 p2 (1)
depart f4 p5 (1)
up f4 f11 (1)
board f11 p1 (1)
down f11 f7 (1)
depart f7 p4 (1)
depart f7 p2 (1)
up f7 f8 (1)
board f8 p0 (1)
depart f8 p1 (1)
down f8 f5 (1)
depart f5 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f12-p6-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)

(above f8 f9)
(above f8 f10)
(above f8 f11)

(above f9 f10)
(above f9 f11)

(above f10 f11)



(origin p0 f7)
(destin p0 f0)

(origin p1 f4)
(destin p1 f6)

(origin p2 f9)
(destin p2 f6)

(origin p3 f2)
(destin p3 f7)

(origin p4 f3)
(destin p4 f2)

(origin p5 f11)
(destin p5 f7)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
))
)


","up f0 f11 (1)
board f11 p5 (1)
down f11 f3 (1)
board f3 p4 (1)
down f3 f2 (1)
board f2 p3 (1)
depart f2 p4 (1)
up f2 f4 (1)
board f4 p1 (1)
up f4 f7 (1)
board f7 p0 (1)
depart f7 p5 (1)
depart f7 p3 (1)
down f7 f0 (1)
depart f0 p0 (1)
up f0 f9 (1)
board f9 p2 (1)
down f9 f6 (1)
depart f6 p2 (1)
depart f6 p1 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f12-p6-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)

(above f8 f9)
(above f8 f10)
(above f8 f11)

(above f9 f10)
(above f9 f11)

(above f10 f11)



(origin p0 f5)
(destin p0 f11)

(origin p1 f6)
(destin p1 f7)

(origin p2 f3)
(destin p2 f0)

(origin p3 f5)
(destin p3 f0)

(origin p4 f3)
(destin p4 f8)

(origin p5 f7)
(destin p5 f6)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
))
)


","up f0 f3 (1)
board f3 p2 (1)
board f3 p4 (1)
up f3 f5 (1)
board f5 p0 (1)
board f5 p3 (1)
down f5 f0 (1)
depart f0 p3 (1)
depart f0 p2 (1)
up f0 f11 (1)
depart f11 p0 (1)
down f11 f8 (1)
depart f8 p4 (1)
down f8 f6 (1)
board f6 p1 (1)
up f6 f7 (1)
board f7 p5 (1)
depart f7 p1 (1)
down f7 f6 (1)
depart f6 p5 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f12-p6-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)

(above f8 f9)
(above f8 f10)
(above f8 f11)

(above f9 f10)
(above f9 f11)

(above f10 f11)



(origin p0 f3)
(destin p0 f6)

(origin p1 f2)
(destin p1 f0)

(origin p2 f6)
(destin p2 f10)

(origin p3 f11)
(destin p3 f9)

(origin p4 f9)
(destin p4 f8)

(origin p5 f2)
(destin p5 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
))
)

","up f0 f11 (1)
board f11 p3 (1)
down f11 f2 (1)
board f2 p1 (1)
board f2 p5 (1)
down f2 f0 (1)
depart f0 p1 (1)
up f0 f1 (1)
depart f1 p5 (1)
up f1 f3 (1)
board f3 p0 (1)
up f3 f6 (1)
board f6 p2 (1)
depart f6 p0 (1)
up f6 f10 (1)
depart f10 p2 (1)
down f10 f9 (1)
board f9 p4 (1)
depart f9 p3 (1)
down f9 f8 (1)
depart f8 p4 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f14-p7-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)

(above f10 f11)
(above f10 f12)
(above f10 f13)

(above f11 f12)
(above f11 f13)

(above f12 f13)



(origin p0 f1)
(destin p0 f4)

(origin p1 f9)
(destin p1 f5)

(origin p2 f1)
(destin p2 f3)

(origin p3 f10)
(destin p3 f2)

(origin p4 f1)
(destin p4 f3)

(origin p5 f2)
(destin p5 f5)

(origin p6 f6)
(destin p6 f11)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
))
)


","up f0 f1 (1)
board f1 p0 (1)
board f1 p2 (1)
board f1 p4 (1)
up f1 f10 (1)
board f10 p3 (1)
down f10 f2 (1)
board f2 p5 (1)
depart f2 p3 (1)
up f2 f3 (1)
depart f3 p4 (1)
depart f3 p2 (1)
up f3 f4 (1)
depart f4 p0 (1)
up f4 f6 (1)
board f6 p6 (1)
up f6 f11 (1)
depart f11 p6 (1)
down f11 f9 (1)
board f9 p1 (1)
down f9 f5 (1)
depart f5 p5 (1)
depart f5 p1 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f14-p7-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)

(above f10 f11)
(above f10 f12)
(above f10 f13)

(above f11 f12)
(above f11 f13)

(above f12 f13)



(origin p0 f8)
(destin p0 f1)

(origin p1 f7)
(destin p1 f10)

(origin p2 f2)
(destin p2 f7)

(origin p3 f13)
(destin p3 f2)

(origin p4 f9)
(destin p4 f5)

(origin p5 f6)
(destin p5 f4)

(origin p6 f1)
(destin p6 f5)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
))
)


","up f0 f13 (1)
board f13 p3 (1)
down f13 f2 (1)
board f2 p2 (1)
depart f2 p3 (1)
up f2 f6 (1)
board f6 p5 (1)
down f6 f4 (1)
depart f4 p5 (1)
up f4 f7 (1)
board f7 p1 (1)
depart f7 p2 (1)
up f7 f10 (1)
depart f10 p1 (1)
down f10 f8 (1)
board f8 p0 (1)
down f8 f1 (1)
board f1 p6 (1)
depart f1 p0 (1)
up f1 f9 (1)
board f9 p4 (1)
down f9 f5 (1)
depart f5 p6 (1)
depart f5 p4 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f14-p7-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)

(above f10 f11)
(above f10 f12)
(above f10 f13)

(above f11 f12)
(above f11 f13)

(above f12 f13)



(origin p0 f9)
(destin p0 f8)

(origin p1 f0)
(destin p1 f2)

(origin p2 f13)
(destin p2 f2)

(origin p3 f2)
(destin p3 f4)

(origin p4 f1)
(destin p4 f7)

(origin p5 f2)
(destin p5 f9)

(origin p6 f13)
(destin p6 f6)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
))
)


","board f0 p1 (1)
up f0 f1 (1)
board f1 p4 (1)
up f1 f13 (1)
board f13 p2 (1)
board f13 p6 (1)
down f13 f2 (1)
board f2 p3 (1)
board f2 p5 (1)
depart f2 p2 (1)
depart f2 p1 (1)
up f2 f4 (1)
depart f4 p3 (1)
up f4 f6 (1)
depart f6 p6 (1)
up f6 f7 (1)
depart f7 p4 (1)
up f7 f9 (1)
board f9 p0 (1)
depart f9 p5 (1)
down f9 f8 (1)
depart f8 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f14-p7-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)

(above f10 f11)
(above f10 f12)
(above f10 f13)

(above f11 f12)
(above f11 f13)

(above f12 f13)



(origin p0 f7)
(destin p0 f5)

(origin p1 f0)
(destin p1 f13)

(origin p2 f9)
(destin p2 f6)

(origin p3 f7)
(destin p3 f2)

(origin p4 f13)
(destin p4 f12)

(origin p5 f5)
(destin p5 f12)

(origin p6 f0)
(destin p6 f8)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
))
)


","board f0 p1 (1)
board f0 p6 (1)
up f0 f13 (1)
board f13 p4 (1)
depart f13 p1 (1)
down f13 f7 (1)
board f7 p0 (1)
board f7 p3 (1)
down f7 f2 (1)
depart f2 p3 (1)
up f2 f5 (1)
board f5 p5 (1)
depart f5 p0 (1)
up f5 f12 (1)
depart f12 p5 (1)
depart f12 p4 (1)
down f12 f8 (1)
depart f8 p6 (1)
up f8 f9 (1)
board f9 p2 (1)
down f9 f6 (1)
depart f6 p2 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f14-p7-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)

(above f10 f11)
(above f10 f12)
(above f10 f13)

(above f11 f12)
(above f11 f13)

(above f12 f13)



(origin p0 f5)
(destin p0 f13)

(origin p1 f12)
(destin p1 f10)

(origin p2 f0)
(destin p2 f6)

(origin p3 f7)
(destin p3 f1)

(origin p4 f3)
(destin p4 f4)

(origin p5 f8)
(destin p5 f11)

(origin p6 f8)
(destin p6 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
))
)


","board f0 p2 (1)
up f0 f12 (1)
board f12 p1 (1)
down f12 f10 (1)
depart f10 p1 (1)
down f10 f3 (1)
board f3 p4 (1)
up f3 f4 (1)
depart f4 p4 (1)
up f4 f5 (1)
board f5 p0 (1)
up f5 f13 (1)
depart f13 p0 (1)
down f13 f6 (1)
depart f6 p2 (1)
up f6 f7 (1)
board f7 p3 (1)
up f7 f8 (1)
board f8 p5 (1)
board f8 p6 (1)
down f8 f1 (1)
depart f1 p6 (1)
depart f1 p3 (1)
up f1 f11 (1)
depart f11 p5 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f16-p8-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)

(above f12 f13)
(above f12 f14)
(above f12 f15)

(above f13 f14)
(above f13 f15)

(above f14 f15)



(origin p0 f7)
(destin p0 f6)

(origin p1 f9)
(destin p1 f3)

(origin p2 f1)
(destin p2 f15)

(origin p3 f10)
(destin p3 f12)

(origin p4 f9)
(destin p4 f13)

(origin p5 f10)
(destin p5 f11)

(origin p6 f2)
(destin p6 f11)

(origin p7 f3)
(destin p7 f6)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
))
)


","up f0 f1 (1)
board f1 p2 (1)
up f1 f10 (1)
board f10 p3 (1)
board f10 p5 (1)
down f10 f2 (1)
board f2 p6 (1)
up f2 f11 (1)
depart f11 p6 (1)
depart f11 p5 (1)
down f11 f7 (1)
board f7 p0 (1)
up f7 f12 (1)
depart f12 p3 (1)
down f12 f9 (1)
board f9 p1 (1)
board f9 p4 (1)
down f9 f3 (1)
board f3 p7 (1)
depart f3 p1 (1)
up f3 f13 (1)
depart f13 p4 (1)
down f13 f6 (1)
depart f6 p7 (1)
depart f6 p0 (1)
up f6 f15 (1)
depart f15 p2 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f16-p8-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)

(above f12 f13)
(above f12 f14)
(above f12 f15)

(above f13 f14)
(above f13 f15)

(above f14 f15)



(origin p0 f8)
(destin p0 f5)

(origin p1 f7)
(destin p1 f12)

(origin p2 f0)
(destin p2 f7)

(origin p3 f1)
(destin p3 f6)

(origin p4 f5)
(destin p4 f3)

(origin p5 f4)
(destin p5 f13)

(origin p6 f3)
(destin p6 f2)

(origin p7 f13)
(destin p7 f4)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
))
)


","board f0 p2 (1)
up f0 f1 (1)
board f1 p3 (1)
up f1 f6 (1)
depart f6 p3 (1)
up f6 f7 (1)
board f7 p1 (1)
depart f7 p2 (1)
up f7 f12 (1)
depart f12 p1 (1)
down f12 f8 (1)
board f8 p0 (1)
down f8 f5 (1)
board f5 p4 (1)
depart f5 p0 (1)
down f5 f3 (1)
board f3 p6 (1)
depart f3 p4 (1)
down f3 f2 (1)
depart f2 p6 (1)
up f2 f13 (1)
board f13 p7 (1)
down f13 f4 (1)
board f4 p5 (1)
depart f4 p7 (1)
up f4 f13 (1)
depart f13 p5 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f16-p8-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)

(above f12 f13)
(above f12 f14)
(above f12 f15)

(above f13 f14)
(above f13 f15)

(above f14 f15)



(origin p0 f11)
(destin p0 f0)

(origin p1 f4)
(destin p1 f10)

(origin p2 f9)
(destin p2 f14)

(origin p3 f6)
(destin p3 f14)

(origin p4 f15)
(destin p4 f7)

(origin p5 f10)
(destin p5 f11)

(origin p6 f15)
(destin p6 f2)

(origin p7 f2)
(destin p7 f14)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
))
)


","up f0 f15 (1)
board f15 p4 (1)
board f15 p6 (1)
down f15 f2 (1)
board f2 p7 (1)
depart f2 p6 (1)
up f2 f4 (1)
board f4 p1 (1)
up f4 f10 (1)
board f10 p5 (1)
depart f10 p1 (1)
down f10 f6 (1)
board f6 p3 (1)
up f6 f11 (1)
board f11 p0 (1)
depart f11 p5 (1)
down f11 f0 (1)
depart f0 p0 (1)
up f0 f7 (1)
depart f7 p4 (1)
up f7 f9 (1)
board f9 p2 (1)
up f9 f14 (1)
depart f14 p7 (1)
depart f14 p3 (1)
depart f14 p2 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f16-p8-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)

(above f12 f13)
(above f12 f14)
(above f12 f15)

(above f13 f14)
(above f13 f15)

(above f14 f15)



(origin p0 f1)
(destin p0 f15)

(origin p1 f14)
(destin p1 f3)

(origin p2 f3)
(destin p2 f12)

(origin p3 f5)
(destin p3 f0)

(origin p4 f3)
(destin p4 f8)

(origin p5 f7)
(destin p5 f6)

(origin p6 f0)
(destin p6 f14)

(origin p7 f10)
(destin p7 f11)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
))
)


","board f0 p6 (1)
up f0 f1 (1)
board f1 p0 (1)
up f1 f10 (1)
board f10 p7 (1)
down f10 f5 (1)
board f5 p3 (1)
down f5 f0 (1)
depart f0 p3 (1)
up f0 f11 (1)
depart f11 p7 (1)
down f11 f7 (1)
board f7 p5 (1)
down f7 f6 (1)
depart f6 p5 (1)
up f6 f14 (1)
board f14 p1 (1)
depart f14 p6 (1)
down f14 f3 (1)
board f3 p2 (1)
board f3 p4 (1)
depart f3 p1 (1)
up f3 f12 (1)
depart f12 p2 (1)
down f12 f8 (1)
depart f8 p4 (1)
up f8 f15 (1)
depart f15 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f16-p8-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)

(above f12 f13)
(above f12 f14)
(above f12 f15)

(above f13 f14)
(above f13 f15)

(above f14 f15)



(origin p0 f15)
(destin p0 f7)

(origin p1 f2)
(destin p1 f4)

(origin p2 f14)
(destin p2 f6)

(origin p3 f11)
(destin p3 f13)

(origin p4 f1)
(destin p4 f0)

(origin p5 f6)
(destin p5 f13)

(origin p6 f6)
(destin p6 f3)

(origin p7 f14)
(destin p7 f13)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
))
)


","up f0 f1 (1)
board f1 p4 (1)
down f1 f0 (1)
depart f0 p4 (1)
up f0 f11 (1)
board f11 p3 (1)
down f11 f2 (1)
board f2 p1 (1)
up f2 f14 (1)
board f14 p2 (1)
board f14 p7 (1)
down f14 f4 (1)
depart f4 p1 (1)
up f4 f15 (1)
board f15 p0 (1)
down f15 f6 (1)
board f6 p5 (1)
board f6 p6 (1)
depart f6 p2 (1)
down f6 f3 (1)
depart f3 p6 (1)
up f3 f13 (1)
depart f13 p7 (1)
depart f13 p5 (1)
depart f13 p3 (1)
down f13 f7 (1)
depart f7 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f18-p9-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)

(above f14 f15)
(above f14 f16)
(above f14 f17)

(above f15 f16)
(above f15 f17)

(above f16 f17)



(origin p0 f1)
(destin p0 f16)

(origin p1 f9)
(destin p1 f7)

(origin p2 f5)
(destin p2 f7)

(origin p3 f10)
(destin p3 f12)

(origin p4 f15)
(destin p4 f1)

(origin p5 f14)
(destin p5 f13)

(origin p6 f14)
(destin p6 f7)

(origin p7 f5)
(destin p7 f4)

(origin p8 f6)
(destin p8 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
))
)


","up f0 f10 (1)
board f10 p3 (1)
down f10 f5 (1)
board f5 p2 (1)
board f5 p7 (1)
down f5 f4 (1)
depart f4 p7 (1)
up f4 f12 (1)
depart f12 p3 (1)
down f12 f6 (1)
board f6 p8 (1)
down f6 f0 (1)
depart f0 p8 (1)
up f0 f14 (1)
board f14 p5 (1)
board f14 p6 (1)
down f14 f13 (1)
depart f13 p5 (1)
down f13 f9 (1)
board f9 p1 (1)
down f9 f7 (1)
depart f7 p6 (1)
depart f7 p2 (1)
depart f7 p1 (1)
up f7 f15 (1)
board f15 p4 (1)
down f15 f1 (1)
board f1 p0 (1)
depart f1 p4 (1)
up f1 f16 (1)
depart f16 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f18-p9-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)

(above f14 f15)
(above f14 f16)
(above f14 f17)

(above f15 f16)
(above f15 f17)

(above f16 f17)



(origin p0 f2)
(destin p0 f5)

(origin p1 f17)
(destin p1 f2)

(origin p2 f16)
(destin p2 f1)

(origin p3 f1)
(destin p3 f10)

(origin p4 f13)
(destin p4 f7)

(origin p5 f0)
(destin p5 f4)

(origin p6 f17)
(destin p6 f0)

(origin p7 f7)
(destin p7 f10)

(origin p8 f6)
(destin p8 f12)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
))
)


","board f0 p5 (1)
up f0 f13 (1)
board f13 p4 (1)
down f13 f4 (1)
depart f4 p5 (1)
up f4 f16 (1)
board f16 p2 (1)
down f16 f1 (1)
board f1 p3 (1)
depart f1 p2 (1)
up f1 f17 (1)
board f17 p1 (1)
board f17 p6 (1)
down f17 f0 (1)
depart f0 p6 (1)
up f0 f2 (1)
board f2 p0 (1)
depart f2 p1 (1)
up f2 f5 (1)
depart f5 p0 (1)
up f5 f6 (1)
board f6 p8 (1)
up f6 f12 (1)
depart f12 p8 (1)
down f12 f7 (1)
board f7 p7 (1)
depart f7 p4 (1)
up f7 f10 (1)
depart f10 p7 (1)
depart f10 p3 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f18-p9-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)

(above f14 f15)
(above f14 f16)
(above f14 f17)

(above f15 f16)
(above f15 f17)

(above f16 f17)



(origin p0 f13)
(destin p0 f12)

(origin p1 f16)
(destin p1 f0)

(origin p2 f3)
(destin p2 f12)

(origin p3 f2)
(destin p3 f14)

(origin p4 f7)
(destin p4 f3)

(origin p5 f8)
(destin p5 f5)

(origin p6 f13)
(destin p6 f8)

(origin p7 f0)
(destin p7 f12)

(origin p8 f1)
(destin p8 f9)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
))
)


","board f0 p7 (1)
up f0 f1 (1)
board f1 p8 (1)
up f1 f13 (1)
board f13 p0 (1)
board f13 p6 (1)
down f13 f2 (1)
board f2 p3 (1)
up f2 f14 (1)
depart f14 p3 (1)
down f14 f7 (1)
board f7 p4 (1)
down f7 f3 (1)
board f3 p2 (1)
depart f3 p4 (1)
up f3 f12 (1)
depart f12 p7 (1)
depart f12 p2 (1)
depart f12 p0 (1)
down f12 f8 (1)
board f8 p5 (1)
depart f8 p6 (1)
down f8 f5 (1)
depart f5 p5 (1)
up f5 f16 (1)
board f16 p1 (1)
down f16 f0 (1)
depart f0 p1 (1)
up f0 f9 (1)
depart f9 p8 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f18-p9-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)

(above f14 f15)
(above f14 f16)
(above f14 f17)

(above f15 f16)
(above f15 f17)

(above f16 f17)



(origin p0 f11)
(destin p0 f0)

(origin p1 f13)
(destin p1 f3)

(origin p2 f6)
(destin p2 f5)

(origin p3 f6)
(destin p3 f15)

(origin p4 f14)
(destin p4 f7)

(origin p5 f6)
(destin p5 f16)

(origin p6 f12)
(destin p6 f4)

(origin p7 f1)
(destin p7 f8)

(origin p8 f1)
(destin p8 f8)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
))
)


","up f0 f1 (1)
board f1 p7 (1)
board f1 p8 (1)
up f1 f11 (1)
board f11 p0 (1)
down f11 f0 (1)
depart f0 p0 (1)
up f0 f12 (1)
board f12 p6 (1)
down f12 f4 (1)
depart f4 p6 (1)
up f4 f13 (1)
board f13 p1 (1)
down f13 f3 (1)
depart f3 p1 (1)
up f3 f14 (1)
board f14 p4 (1)
down f14 f6 (1)
board f6 p2 (1)
board f6 p3 (1)
board f6 p5 (1)
down f6 f5 (1)
depart f5 p2 (1)
up f5 f15 (1)
depart f15 p3 (1)
down f15 f7 (1)
depart f7 p4 (1)
up f7 f16 (1)
depart f16 p5 (1)
down f16 f8 (1)
depart f8 p8 (1)
depart f8 p7 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f18-p9-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)

(above f14 f15)
(above f14 f16)
(above f14 f17)

(above f15 f16)
(above f15 f17)

(above f16 f17)



(origin p0 f9)
(destin p0 f15)

(origin p1 f12)
(destin p1 f2)

(origin p2 f0)
(destin p2 f10)

(origin p3 f17)
(destin p3 f15)

(origin p4 f3)
(destin p4 f2)

(origin p5 f2)
(destin p5 f1)

(origin p6 f2)
(destin p6 f3)

(origin p7 f0)
(destin p7 f15)

(origin p8 f2)
(destin p8 f13)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
))
)


","board f0 p2 (1)
board f0 p7 (1)
up f0 f10 (1)
depart f10 p2 (1)
down f10 f9 (1)
board f9 p0 (1)
up f9 f12 (1)
board f12 p1 (1)
up f12 f17 (1)
board f17 p3 (1)
down f17 f15 (1)
depart f15 p7 (1)
depart f15 p3 (1)
depart f15 p0 (1)
down f15 f2 (1)
board f2 p5 (1)
board f2 p6 (1)
board f2 p8 (1)
depart f2 p1 (1)
down f2 f1 (1)
depart f1 p5 (1)
up f1 f13 (1)
depart f13 p8 (1)
down f13 f3 (1)
board f3 p4 (1)
depart f3 p6 (1)
down f3 f2 (1)
depart f2 p4 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f20-p10-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)

(above f16 f17)
(above f16 f18)
(above f16 f19)

(above f17 f18)
(above f17 f19)

(above f18 f19)



(origin p0 f3)
(destin p0 f6)

(origin p1 f17)
(destin p1 f15)

(origin p2 f13)
(destin p2 f15)

(origin p3 f6)
(destin p3 f12)

(origin p4 f9)
(destin p4 f1)

(origin p5 f2)
(destin p5 f7)

(origin p6 f10)
(destin p6 f19)

(origin p7 f3)
(destin p7 f6)

(origin p8 f0)
(destin p8 f6)

(origin p9 f12)
(destin p9 f16)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
))
)


","board f0 p8 (1)
up f0 f10 (1)
board f10 p6 (1)
down f10 f2 (1)
board f2 p5 (1)
up f2 f13 (1)
board f13 p2 (1)
down f13 f3 (1)
board f3 p0 (1)
board f3 p7 (1)
up f3 f17 (1)
board f17 p1 (1)
down f17 f15 (1)
depart f15 p2 (1)
depart f15 p1 (1)
down f15 f6 (1)
board f6 p3 (1)
depart f6 p8 (1)
depart f6 p7 (1)
depart f6 p0 (1)
up f6 f12 (1)
board f12 p9 (1)
depart f12 p3 (1)
down f12 f7 (1)
depart f7 p5 (1)
up f7 f16 (1)
depart f16 p9 (1)
down f16 f9 (1)
board f9 p4 (1)
down f9 f1 (1)
depart f1 p4 (1)
up f1 f19 (1)
depart f19 p6 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f20-p10-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)

(above f16 f17)
(above f16 f18)
(above f16 f19)

(above f17 f18)
(above f17 f19)

(above f18 f19)



(origin p0 f0)
(destin p0 f1)

(origin p1 f19)
(destin p1 f4)

(origin p2 f16)
(destin p2 f3)

(origin p3 f5)
(destin p3 f10)

(origin p4 f1)
(destin p4 f11)

(origin p5 f0)
(destin p5 f8)

(origin p6 f17)
(destin p6 f7)

(origin p7 f10)
(destin p7 f1)

(origin p8 f0)
(destin p8 f18)

(origin p9 f10)
(destin p9 f3)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
))
)


","board f0 p0 (1)
board f0 p5 (1)
board f0 p8 (1)
up f0 f16 (1)
board f16 p2 (1)
down f16 f5 (1)
board f5 p3 (1)
up f5 f10 (1)
board f10 p7 (1)
board f10 p9 (1)
depart f10 p3 (1)
down f10 f1 (1)
board f1 p4 (1)
depart f1 p7 (1)
depart f1 p0 (1)
up f1 f11 (1)
depart f11 p4 (1)
down f11 f3 (1)
depart f3 p9 (1)
depart f3 p2 (1)
up f3 f17 (1)
board f17 p6 (1)
down f17 f7 (1)
depart f7 p6 (1)
up f7 f18 (1)
depart f18 p8 (1)
down f18 f8 (1)
depart f8 p5 (1)
up f8 f19 (1)
board f19 p1 (1)
down f19 f4 (1)
depart f4 p1 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f20-p10-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)

(above f16 f17)
(above f16 f18)
(above f16 f19)

(above f17 f18)
(above f17 f19)

(above f18 f19)



(origin p0 f3)
(destin p0 f0)

(origin p1 f4)
(destin p1 f2)

(origin p2 f13)
(destin p2 f14)

(origin p3 f10)
(destin p3 f14)

(origin p4 f19)
(destin p4 f10)

(origin p5 f3)
(destin p5 f11)

(origin p6 f2)
(destin p6 f6)

(origin p7 f14)
(destin p7 f5)

(origin p8 f15)
(destin p8 f4)

(origin p9 f0)
(destin p9 f5)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
))
)


","board f0 p9 (1)
up f0 f13 (1)
board f13 p2 (1)
down f13 f3 (1)
board f3 p0 (1)
board f3 p5 (1)
down f3 f0 (1)
depart f0 p0 (1)
up f0 f11 (1)
depart f11 p5 (1)
up f11 f15 (1)
board f15 p8 (1)
down f15 f4 (1)
board f4 p1 (1)
depart f4 p8 (1)
down f4 f2 (1)
board f2 p6 (1)
depart f2 p1 (1)
up f2 f19 (1)
board f19 p4 (1)
down f19 f10 (1)
board f10 p3 (1)
depart f10 p4 (1)
down f10 f6 (1)
depart f6 p6 (1)
up f6 f14 (1)
board f14 p7 (1)
depart f14 p3 (1)
depart f14 p2 (1)
down f14 f5 (1)
depart f5 p9 (1)
depart f5 p7 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f20-p10-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)

(above f16 f17)
(above f16 f18)
(above f16 f19)

(above f17 f18)
(above f17 f19)

(above f18 f19)



(origin p0 f13)
(destin p0 f15)

(origin p1 f6)
(destin p1 f19)

(origin p2 f19)
(destin p2 f8)

(origin p3 f5)
(destin p3 f8)

(origin p4 f11)
(destin p4 f12)

(origin p5 f11)
(destin p5 f14)

(origin p6 f4)
(destin p6 f6)

(origin p7 f2)
(destin p7 f7)

(origin p8 f8)
(destin p8 f3)

(origin p9 f10)
(destin p9 f8)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
))
)


","up f0 f10 (1)
board f10 p9 (1)
down f10 f2 (1)
board f2 p7 (1)
up f2 f11 (1)
board f11 p4 (1)
board f11 p5 (1)
down f11 f4 (1)
board f4 p6 (1)
up f4 f12 (1)
depart f12 p4 (1)
down f12 f5 (1)
board f5 p3 (1)
up f5 f13 (1)
board f13 p0 (1)
down f13 f6 (1)
board f6 p1 (1)
depart f6 p6 (1)
up f6 f14 (1)
depart f14 p5 (1)
down f14 f7 (1)
depart f7 p7 (1)
up f7 f15 (1)
depart f15 p0 (1)
up f15 f19 (1)
board f19 p2 (1)
depart f19 p1 (1)
down f19 f8 (1)
board f8 p8 (1)
depart f8 p9 (1)
depart f8 p3 (1)
depart f8 p2 (1)
down f8 f3 (1)
depart f3 p8 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f20-p10-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)

(above f16 f17)
(above f16 f18)
(above f16 f19)

(above f17 f18)
(above f17 f19)

(above f18 f19)



(origin p0 f15)
(destin p0 f11)

(origin p1 f2)
(destin p1 f0)

(origin p2 f2)
(destin p2 f18)

(origin p3 f7)
(destin p3 f5)

(origin p4 f9)
(destin p4 f4)

(origin p5 f10)
(destin p5 f9)

(origin p6 f2)
(destin p6 f19)

(origin p7 f18)
(destin p7 f13)

(origin p8 f0)
(destin p8 f13)

(origin p9 f3)
(destin p9 f9)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
))
)


","board f0 p8 (1)
up f0 f10 (1)
board f10 p5 (1)
down f10 f2 (1)
board f2 p1 (1)
board f2 p2 (1)
board f2 p6 (1)
down f2 f0 (1)
depart f0 p1 (1)
up f0 f15 (1)
board f15 p0 (1)
down f15 f11 (1)
depart f11 p0 (1)
down f11 f3 (1)
board f3 p9 (1)
up f3 f18 (1)
board f18 p7 (1)
depart f18 p2 (1)
down f18 f13 (1)
depart f13 p8 (1)
depart f13 p7 (1)
down f13 f7 (1)
board f7 p3 (1)
down f7 f5 (1)
depart f5 p3 (1)
up f5 f19 (1)
depart f19 p6 (1)
down f19 f9 (1)
board f9 p4 (1)
depart f9 p9 (1)
depart f9 p5 (1)
down f9 f4 (1)
depart f4 p4 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f22-p11-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)

(above f18 f19)
(above f18 f20)
(above f18 f21)

(above f19 f20)
(above f19 f21)

(above f20 f21)



(origin p0 f17)
(destin p0 f10)

(origin p1 f17)
(destin p1 f13)

(origin p2 f1)
(destin p2 f15)

(origin p3 f0)
(destin p3 f6)

(origin p4 f3)
(destin p4 f1)

(origin p5 f8)
(destin p5 f7)

(origin p6 f16)
(destin p6 f3)

(origin p7 f7)
(destin p7 f4)

(origin p8 f20)
(destin p8 f10)

(origin p9 f2)
(destin p9 f0)

(origin p10 f21)
(destin p10 f8)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
))
)


","board f0 p3 (1)
up f0 f16 (1)
board f16 p6 (1)
down f16 f2 (1)
board f2 p9 (1)
down f2 f0 (1)
depart f0 p9 (1)
up f0 f17 (1)
board f17 p0 (1)
board f17 p1 (1)
down f17 f13 (1)
depart f13 p1 (1)
down f13 f3 (1)
board f3 p4 (1)
depart f3 p6 (1)
down f3 f1 (1)
board f1 p2 (1)
depart f1 p4 (1)
up f1 f15 (1)
depart f15 p2 (1)
down f15 f6 (1)
depart f6 p3 (1)
up f6 f20 (1)
board f20 p8 (1)
down f20 f10 (1)
depart f10 p8 (1)
depart f10 p0 (1)
up f10 f21 (1)
board f21 p10 (1)
down f21 f8 (1)
board f8 p5 (1)
depart f8 p10 (1)
down f8 f7 (1)
board f7 p7 (1)
depart f7 p5 (1)
down f7 f4 (1)
depart f4 p7 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f22-p11-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)

(above f18 f19)
(above f18 f20)
(above f18 f21)

(above f19 f20)
(above f19 f21)

(above f20 f21)



(origin p0 f0)
(destin p0 f1)

(origin p1 f11)
(destin p1 f16)

(origin p2 f4)
(destin p2 f17)

(origin p3 f13)
(destin p3 f18)

(origin p4 f17)
(destin p4 f7)

(origin p5 f20)
(destin p5 f2)

(origin p6 f15)
(destin p6 f17)

(origin p7 f4)
(destin p7 f15)

(origin p8 f14)
(destin p8 f2)

(origin p9 f14)
(destin p9 f17)

(origin p10 f16)
(destin p10 f13)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
))
)


","board f0 p0 (1)
up f0 f1 (1)
depart f1 p0 (1)
up f1 f11 (1)
board f11 p1 (1)
down f11 f4 (1)
board f4 p2 (1)
board f4 p7 (1)
up f4 f14 (1)
board f14 p8 (1)
board f14 p9 (1)
up f14 f15 (1)
board f15 p6 (1)
depart f15 p7 (1)
up f15 f16 (1)
board f16 p10 (1)
depart f16 p1 (1)
down f16 f13 (1)
board f13 p3 (1)
depart f13 p10 (1)
up f13 f17 (1)
board f17 p4 (1)
depart f17 p9 (1)
depart f17 p6 (1)
depart f17 p2 (1)
down f17 f7 (1)
depart f7 p4 (1)
up f7 f18 (1)
depart f18 p3 (1)
up f18 f20 (1)
board f20 p5 (1)
down f20 f2 (1)
depart f2 p8 (1)
depart f2 p5 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f22-p11-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)

(above f18 f19)
(above f18 f20)
(above f18 f21)

(above f19 f20)
(above f19 f21)

(above f20 f21)



(origin p0 f21)
(destin p0 f12)

(origin p1 f2)
(destin p1 f0)

(origin p2 f21)
(destin p2 f8)

(origin p3 f12)
(destin p3 f20)

(origin p4 f3)
(destin p4 f7)

(origin p5 f16)
(destin p5 f1)

(origin p6 f7)
(destin p6 f10)

(origin p7 f18)
(destin p7 f10)

(origin p8 f9)
(destin p8 f1)

(origin p9 f16)
(destin p9 f17)

(origin p10 f4)
(destin p10 f14)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
))
)


","up f0 f16 (1)
board f16 p5 (1)
board f16 p9 (1)
down f16 f2 (1)
board f2 p1 (1)
down f2 f0 (1)
depart f0 p1 (1)
up f0 f17 (1)
depart f17 p9 (1)
down f17 f3 (1)
board f3 p4 (1)
up f3 f18 (1)
board f18 p7 (1)
down f18 f4 (1)
board f4 p10 (1)
up f4 f14 (1)
depart f14 p10 (1)
down f14 f7 (1)
board f7 p6 (1)
depart f7 p4 (1)
up f7 f10 (1)
depart f10 p7 (1)
depart f10 p6 (1)
down f10 f9 (1)
board f9 p8 (1)
down f9 f1 (1)
depart f1 p8 (1)
depart f1 p5 (1)
up f1 f21 (1)
board f21 p0 (1)
board f21 p2 (1)
down f21 f12 (1)
board f12 p3 (1)
depart f12 p0 (1)
down f12 f8 (1)
depart f8 p2 (1)
up f8 f20 (1)
depart f20 p3 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f22-p11-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)

(above f18 f19)
(above f18 f20)
(above f18 f21)

(above f19 f20)
(above f19 f21)

(above f20 f21)



(origin p0 f13)
(destin p0 f19)

(origin p1 f6)
(destin p1 f21)

(origin p2 f1)
(destin p2 f8)

(origin p3 f17)
(destin p3 f12)

(origin p4 f15)
(destin p4 f18)

(origin p5 f9)
(destin p5 f8)

(origin p6 f6)
(destin p6 f10)

(origin p7 f18)
(destin p7 f11)

(origin p8 f8)
(destin p8 f9)

(origin p9 f14)
(destin p9 f4)

(origin p10 f14)
(destin p10 f11)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
))
)


","up f0 f1 (1)
board f1 p2 (1)
up f1 f13 (1)
board f13 p0 (1)
down f13 f6 (1)
board f6 p1 (1)
board f6 p6 (1)
up f6 f10 (1)
depart f10 p6 (1)
up f10 f14 (1)
board f14 p10 (1)
board f14 p9 (1)
down f14 f4 (1)
depart f4 p9 (1)
up f4 f15 (1)
board f15 p4 (1)
up f15 f17 (1)
board f17 p3 (1)
down f17 f12 (1)
depart f12 p3 (1)
up f12 f18 (1)
board f18 p7 (1)
depart f18 p4 (1)
down f18 f11 (1)
depart f11 p7 (1)
depart f11 p10 (1)
up f11 f19 (1)
depart f19 p0 (1)
up f19 f21 (1)
depart f21 p1 (1)
down f21 f8 (1)
board f8 p8 (1)
depart f8 p2 (1)
up f8 f9 (1)
board f9 p5 (1)
depart f9 p8 (1)
down f9 f8 (1)
depart f8 p5 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f22-p11-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)

(above f18 f19)
(above f18 f20)
(above f18 f21)

(above f19 f20)
(above f19 f21)

(above f20 f21)



(origin p0 f15)
(destin p0 f9)

(origin p1 f14)
(destin p1 f0)

(origin p2 f18)
(destin p2 f4)

(origin p3 f16)
(destin p3 f21)

(origin p4 f21)
(destin p4 f15)

(origin p5 f8)
(destin p5 f10)

(origin p6 f17)
(destin p6 f8)

(origin p7 f21)
(destin p7 f4)

(origin p8 f19)
(destin p8 f16)

(origin p9 f5)
(destin p9 f21)

(origin p10 f19)
(destin p10 f16)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
))
)


","up f0 f14 (1)
board f14 p1 (1)
down f14 f0 (1)
depart f0 p1 (1)
up f0 f17 (1)
board f17 p6 (1)
down f17 f5 (1)
board f5 p9 (1)
up f5 f18 (1)
board f18 p2 (1)
down f18 f8 (1)
board f8 p5 (1)
depart f8 p6 (1)
up f8 f10 (1)
depart f10 p5 (1)
up f10 f19 (1)
board f19 p10 (1)
board f19 p8 (1)
down f19 f16 (1)
board f16 p3 (1)
depart f16 p8 (1)
depart f16 p10 (1)
up f16 f21 (1)
board f21 p4 (1)
board f21 p7 (1)
depart f21 p9 (1)
depart f21 p3 (1)
down f21 f15 (1)
board f15 p0 (1)
depart f15 p4 (1)
down f15 f4 (1)
depart f4 p7 (1)
depart f4 p2 (1)
up f4 f9 (1)
depart f9 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f24-p12-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)

(above f20 f21)
(above f20 f22)
(above f20 f23)

(above f21 f22)
(above f21 f23)

(above f22 f23)



(origin p0 f7)
(destin p0 f22)

(origin p1 f9)
(destin p1 f19)

(origin p2 f17)
(destin p2 f7)

(origin p3 f10)
(destin p3 f12)

(origin p4 f9)
(destin p4 f13)

(origin p5 f2)
(destin p5 f19)

(origin p6 f2)
(destin p6 f19)

(origin p7 f11)
(destin p7 f22)

(origin p8 f12)
(destin p8 f18)

(origin p9 f4)
(destin p9 f16)

(origin p10 f11)
(destin p10 f8)

(origin p11 f15)
(destin p11 f21)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
))
)


","up f0 f10 (1)
board f10 p3 (1)
down f10 f2 (1)
board f2 p5 (1)
board f2 p6 (1)
up f2 f11 (1)
board f11 p10 (1)
board f11 p7 (1)
down f11 f4 (1)
board f4 p9 (1)
up f4 f12 (1)
board f12 p8 (1)
depart f12 p3 (1)
down f12 f8 (1)
depart f8 p10 (1)
up f8 f15 (1)
board f15 p11 (1)
down f15 f9 (1)
board f9 p1 (1)
board f9 p4 (1)
up f9 f13 (1)
depart f13 p4 (1)
up f13 f16 (1)
depart f16 p9 (1)
up f16 f17 (1)
board f17 p2 (1)
down f17 f7 (1)
board f7 p0 (1)
depart f7 p2 (1)
up f7 f18 (1)
depart f18 p8 (1)
up f18 f19 (1)
depart f19 p6 (1)
depart f19 p5 (1)
depart f19 p1 (1)
up f19 f21 (1)
depart f21 p11 (1)
up f21 f22 (1)
depart f22 p7 (1)
depart f22 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f24-p12-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)

(above f20 f21)
(above f20 f22)
(above f20 f23)

(above f21 f22)
(above f21 f23)

(above f22 f23)



(origin p0 f8)
(destin p0 f5)

(origin p1 f23)
(destin p1 f20)

(origin p2 f16)
(destin p2 f7)

(origin p3 f1)
(destin p3 f22)

(origin p4 f13)
(destin p4 f19)

(origin p5 f12)
(destin p5 f4)

(origin p6 f5)
(destin p6 f11)

(origin p7 f18)
(destin p7 f13)

(origin p8 f4)
(destin p8 f18)

(origin p9 f6)
(destin p9 f15)

(origin p10 f22)
(destin p10 f5)

(origin p11 f4)
(destin p11 f23)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
))
)


","up f0 f1 (1)
board f1 p3 (1)
up f1 f12 (1)
board f12 p5 (1)
down f12 f4 (1)
board f4 p11 (1)
board f4 p8 (1)
depart f4 p5 (1)
up f4 f16 (1)
board f16 p2 (1)
down f16 f6 (1)
board f6 p9 (1)
up f6 f15 (1)
depart f15 p9 (1)
down f15 f7 (1)
depart f7 p2 (1)
up f7 f18 (1)
board f18 p7 (1)
depart f18 p8 (1)
down f18 f13 (1)
board f13 p4 (1)
depart f13 p7 (1)
down f13 f8 (1)
board f8 p0 (1)
up f8 f19 (1)
depart f19 p4 (1)
up f19 f22 (1)
board f22 p10 (1)
depart f22 p3 (1)
down f22 f5 (1)
board f5 p6 (1)
depart f5 p10 (1)
depart f5 p0 (1)
up f5 f11 (1)
depart f11 p6 (1)
up f11 f23 (1)
board f23 p1 (1)
depart f23 p11 (1)
down f23 f20 (1)
depart f20 p1 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f24-p12-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)

(above f20 f21)
(above f20 f22)
(above f20 f23)

(above f21 f22)
(above f21 f23)

(above f22 f23)



(origin p0 f19)
(destin p0 f0)

(origin p1 f4)
(destin p1 f18)

(origin p2 f9)
(destin p2 f6)

(origin p3 f14)
(destin p3 f7)

(origin p4 f15)
(destin p4 f2)

(origin p5 f11)
(destin p5 f7)

(origin p6 f2)
(destin p6 f18)

(origin p7 f6)
(destin p7 f1)

(origin p8 f15)
(destin p8 f12)

(origin p9 f0)
(destin p9 f1)

(origin p10 f8)
(destin p10 f16)

(origin p11 f0)
(destin p11 f17)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
))
)


","board f0 p11 (1)
board f0 p9 (1)
up f0 f11 (1)
board f11 p5 (1)
down f11 f4 (1)
board f4 p1 (1)
up f4 f14 (1)
board f14 p3 (1)
down f14 f7 (1)
depart f7 p5 (1)
depart f7 p3 (1)
up f7 f15 (1)
board f15 p4 (1)
board f15 p8 (1)
down f15 f12 (1)
depart f12 p8 (1)
down f12 f2 (1)
board f2 p6 (1)
depart f2 p4 (1)
up f2 f17 (1)
depart f17 p11 (1)
down f17 f8 (1)
board f8 p10 (1)
up f8 f16 (1)
depart f16 p10 (1)
down f16 f9 (1)
board f9 p2 (1)
down f9 f6 (1)
board f6 p7 (1)
depart f6 p2 (1)
down f6 f1 (1)
depart f1 p9 (1)
depart f1 p7 (1)
up f1 f18 (1)
depart f18 p6 (1)
depart f18 p1 (1)
up f18 f19 (1)
board f19 p0 (1)
down f19 f0 (1)
depart f0 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f24-p12-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)

(above f20 f21)
(above f20 f22)
(above f20 f23)

(above f21 f22)
(above f21 f23)

(above f22 f23)



(origin p0 f17)
(destin p0 f23)

(origin p1 f6)
(destin p1 f19)

(origin p2 f3)
(destin p2 f12)

(origin p3 f5)
(destin p3 f0)

(origin p4 f3)
(destin p4 f8)

(origin p5 f7)
(destin p5 f6)

(origin p6 f16)
(destin p6 f6)

(origin p7 f10)
(destin p7 f19)

(origin p8 f20)
(destin p8 f7)

(origin p9 f14)
(destin p9 f12)

(origin p10 f16)
(destin p10 f5)

(origin p11 f0)
(destin p11 f11)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
))
)


","board f0 p11 (1)
up f0 f10 (1)
board f10 p7 (1)
down f10 f3 (1)
board f3 p2 (1)
board f3 p4 (1)
up f3 f11 (1)
depart f11 p11 (1)
down f11 f8 (1)
depart f8 p4 (1)
up f8 f14 (1)
board f14 p9 (1)
down f14 f12 (1)
depart f12 p9 (1)
depart f12 p2 (1)
up f12 f16 (1)
board f16 p10 (1)
board f16 p6 (1)
down f16 f5 (1)
board f5 p3 (1)
depart f5 p10 (1)
down f5 f0 (1)
depart f0 p3 (1)
up f0 f17 (1)
board f17 p0 (1)
up f17 f20 (1)
board f20 p8 (1)
down f20 f7 (1)
board f7 p5 (1)
depart f7 p8 (1)
down f7 f6 (1)
board f6 p1 (1)
depart f6 p6 (1)
depart f6 p5 (1)
up f6 f19 (1)
depart f19 p7 (1)
depart f19 p1 (1)
up f19 f23 (1)
depart f23 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f24-p12-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)

(above f20 f21)
(above f20 f22)
(above f20 f23)

(above f21 f22)
(above f21 f23)

(above f22 f23)



(origin p0 f15)
(destin p0 f18)

(origin p1 f2)
(destin p1 f12)

(origin p2 f6)
(destin p2 f22)

(origin p3 f11)
(destin p3 f21)

(origin p4 f9)
(destin p4 f8)

(origin p5 f14)
(destin p5 f13)

(origin p6 f14)
(destin p6 f3)

(origin p7 f6)
(destin p7 f21)

(origin p8 f20)
(destin p8 f1)

(origin p9 f7)
(destin p9 f1)

(origin p10 f18)
(destin p10 f1)

(origin p11 f4)
(destin p11 f18)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
))
)


","up f0 f11 (1)
board f11 p3 (1)
down f11 f2 (1)
board f2 p1 (1)
up f2 f12 (1)
depart f12 p1 (1)
down f12 f4 (1)
board f4 p11 (1)
up f4 f14 (1)
board f14 p5 (1)
board f14 p6 (1)
down f14 f13 (1)
depart f13 p5 (1)
down f13 f3 (1)
depart f3 p6 (1)
up f3 f15 (1)
board f15 p0 (1)
down f15 f6 (1)
board f6 p2 (1)
board f6 p7 (1)
up f6 f18 (1)
board f18 p10 (1)
depart f18 p11 (1)
depart f18 p0 (1)
down f18 f7 (1)
board f7 p9 (1)
up f7 f20 (1)
board f20 p8 (1)
down f20 f1 (1)
depart f1 p9 (1)
depart f1 p8 (1)
depart f1 p10 (1)
up f1 f21 (1)
depart f21 p7 (1)
depart f21 p3 (1)
down f21 f9 (1)
board f9 p4 (1)
down f9 f8 (1)
depart f8 p4 (1)
up f8 f22 (1)
depart f22 p2 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f26-p13-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)

(above f22 f23)
(above f22 f24)
(above f22 f25)

(above f23 f24)
(above f23 f25)

(above f24 f25)



(origin p0 f13)
(destin p0 f22)

(origin p1 f11)
(destin p1 f17)

(origin p2 f1)
(destin p2 f12)

(origin p3 f16)
(destin p3 f1)

(origin p4 f7)
(destin p4 f2)

(origin p5 f3)
(destin p5 f0)

(origin p6 f17)
(destin p6 f25)

(origin p7 f14)
(destin p7 f22)

(origin p8 f10)
(destin p8 f24)

(origin p9 f7)
(destin p9 f8)

(origin p10 f3)
(destin p10 f16)

(origin p11 f18)
(destin p11 f2)

(origin p12 f3)
(destin p12 f23)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
))
)


","board f0 p10 (1)
up f0 f1 (1)
board f1 p2 (1)
board f1 p4 (1)
up f1 f10 (1)
board f10 p3 (1)
down f10 f6 (1)
board f6 p6 (1)
up f6 f11 (1)
depart f11 p6 (1)
down f11 f9 (1)
board f9 p1 (1)
board f9 p11 (1)
down f9 f2 (1)
board f2 p5 (1)
depart f2 p11 (1)
up f2 f15 (1)
board f15 p0 (1)
board f15 p13 (1)
up f15 f16 (1)
board f16 p9 (1)
depart f16 p3 (1)
down f16 f3 (1)
depart f3 p9 (1)
depart f3 p2 (1)
up f3 f17 (1)
depart f17 p4 (1)
up f17 f18 (1)
depart f18 p0 (1)
up f18 f19 (1)
depart f19 p5 (1)
depart f19 p13 (1)
depart f19 p10 (1)
depart f19 p1 (1)
up f19 f24 (1)
board f24 p8 (1)
down f24 f22 (1)
depart f22 p8 (1)
up f22 f26 (1)
board f26 p12 (1)
up f26 f27 (1)
board f27 p7 (1)
depart f27 p12 (1)
down f27 f14 (1)
depart f14 p7 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f26-p13-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)

(above f22 f23)
(above f22 f24)
(above f22 f25)

(above f23 f24)
(above f23 f25)

(above f24 f25)



(origin p0 f20)
(destin p0 f1)

(origin p1 f9)
(destin p1 f22)

(origin p2 f16)
(destin p2 f23)

(origin p3 f7)
(destin p3 f22)

(origin p4 f5)
(destin p4 f3)

(origin p5 f12)
(destin p5 f24)

(origin p6 f25)
(destin p6 f1)

(origin p7 f8)
(destin p7 f21)

(origin p8 f16)
(destin p8 f22)

(origin p9 f22)
(destin p9 f3)

(origin p10 f12)
(destin p10 f3)

(origin p11 f24)
(destin p11 f13)

(origin p12 f22)
(destin p12 f9)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
))
)


","up f0 f12 (1)
board f12 p10 (1)
board f12 p5 (1)
down f12 f5 (1)
board f5 p4 (1)
up f5 f16 (1)
board f16 p2 (1)
board f16 p8 (1)
down f16 f7 (1)
board f7 p3 (1)
up f7 f20 (1)
board f20 p0 (1)
down f20 f8 (1)
board f8 p7 (1)
up f8 f21 (1)
depart f21 p7 (1)
up f21 f23 (1)
depart f23 p2 (1)
up f23 f24 (1)
board f24 p11 (1)
depart f24 p5 (1)
down f24 f13 (1)
depart f13 p11 (1)
up f13 f25 (1)
board f25 p6 (1)
down f25 f1 (1)
depart f1 p6 (1)
depart f1 p0 (1)
up f1 f22 (1)
board f22 p12 (1)
board f22 p9 (1)
depart f22 p8 (1)
depart f22 p3 (1)
down f22 f3 (1)
depart f3 p9 (1)
depart f3 p4 (1)
depart f3 p10 (1)
up f3 f9 (1)
board f9 p1 (1)
depart f9 p12 (1)
up f9 f22 (1)
depart f22 p1 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f26-p13-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)

(above f22 f23)
(above f22 f24)
(above f22 f25)

(above f23 f24)
(above f23 f25)

(above f24 f25)



(origin p0 f19)
(destin p0 f2)

(origin p1 f18)
(destin p1 f2)

(origin p2 f13)
(destin p2 f14)

(origin p3 f10)
(destin p3 f20)

(origin p4 f13)
(destin p4 f5)

(origin p5 f18)
(destin p5 f7)

(origin p6 f19)
(destin p6 f8)

(origin p7 f8)
(destin p7 f4)

(origin p8 f25)
(destin p8 f1)

(origin p9 f12)
(destin p9 f15)

(origin p10 f16)
(destin p10 f6)

(origin p11 f22)
(destin p11 f23)

(origin p12 f9)
(destin p12 f6)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
))
)


","up f0 f10 (1)
board f10 p3 (1)
down f10 f9 (1)
board f9 p12 (1)
up f9 f12 (1)
board f12 p9 (1)
up f12 f13 (1)
board f13 p2 (1)
board f13 p4 (1)
down f13 f5 (1)
depart f5 p4 (1)
up f5 f14 (1)
depart f14 p2 (1)
up f14 f15 (1)
depart f15 p9 (1)
up f15 f16 (1)
board f16 p10 (1)
down f16 f6 (1)
depart f6 p12 (1)
depart f6 p10 (1)
up f6 f18 (1)
board f18 p1 (1)
board f18 p5 (1)
down f18 f7 (1)
depart f7 p5 (1)
up f7 f19 (1)
board f19 p0 (1)
board f19 p6 (1)
down f19 f2 (1)
depart f2 p1 (1)
depart f2 p0 (1)
up f2 f20 (1)
depart f20 p3 (1)
down f20 f8 (1)
board f8 p7 (1)
depart f8 p6 (1)
down f8 f4 (1)
depart f4 p7 (1)
up f4 f22 (1)
board f22 p11 (1)
up f22 f23 (1)
depart f23 p11 (1)
up f23 f25 (1)
board f25 p8 (1)
down f25 f1 (1)
depart f1 p8 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f26-p13-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)

(above f22 f23)
(above f22 f24)
(above f22 f25)

(above f23 f24)
(above f23 f25)

(above f24 f25)



(origin p0 f23)
(destin p0 f15)

(origin p1 f8)
(destin p1 f3)

(origin p2 f21)
(destin p2 f22)

(origin p3 f1)
(destin p3 f6)

(origin p4 f21)
(destin p4 f4)

(origin p5 f23)
(destin p5 f14)

(origin p6 f6)
(destin p6 f16)

(origin p7 f23)
(destin p7 f24)

(origin p8 f25)
(destin p8 f24)

(origin p9 f18)
(destin p9 f14)

(origin p10 f13)
(destin p10 f2)

(origin p11 f1)
(destin p11 f2)

(origin p12 f10)
(destin p12 f18)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
))
)


","up f0 f1 (1)
board f1 p11 (1)
board f1 p3 (1)
up f1 f10 (1)
board f10 p12 (1)
down f10 f6 (1)
board f6 p6 (1)
depart f6 p3 (1)
up f6 f13 (1)
board f13 p10 (1)
down f13 f2 (1)
depart f2 p11 (1)
depart f2 p10 (1)
up f2 f16 (1)
depart f16 p6 (1)
down f16 f8 (1)
board f8 p1 (1)
down f8 f3 (1)
depart f3 p1 (1)
up f3 f18 (1)
board f18 p9 (1)
depart f18 p12 (1)
up f18 f21 (1)
board f21 p2 (1)
board f21 p4 (1)
down f21 f4 (1)
depart f4 p4 (1)
up f4 f22 (1)
depart f22 p2 (1)
up f22 f23 (1)
board f23 p0 (1)
board f23 p5 (1)
board f23 p7 (1)
down f23 f14 (1)
depart f14 p9 (1)
depart f14 p5 (1)
up f14 f15 (1)
depart f15 p0 (1)
up f15 f25 (1)
board f25 p8 (1)
down f25 f24 (1)
depart f24 p8 (1)
depart f24 p7 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f26-p13-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)

(above f22 f23)
(above f22 f24)
(above f22 f25)

(above f23 f24)
(above f23 f25)

(above f24 f25)



(origin p0 f5)
(destin p0 f7)

(origin p1 f4)
(destin p1 f8)

(origin p2 f10)
(destin p2 f8)

(origin p3 f10)
(destin p3 f19)

(origin p4 f17)
(destin p4 f19)

(origin p5 f0)
(destin p5 f12)

(origin p6 f9)
(destin p6 f22)

(origin p7 f9)
(destin p7 f4)

(origin p8 f7)
(destin p8 f2)

(origin p9 f21)
(destin p9 f17)

(origin p10 f6)
(destin p10 f9)

(origin p11 f10)
(destin p11 f24)

(origin p12 f3)
(destin p12 f2)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
))
)


","board f0 p5 (1)
up f0 f10 (1)
board f10 p11 (1)
board f10 p2 (1)
board f10 p3 (1)
down f10 f3 (1)
board f3 p12 (1)
up f3 f12 (1)
depart f12 p5 (1)
down f12 f5 (1)
board f5 p0 (1)
up f5 f21 (1)
board f21 p9 (1)
down f21 f17 (1)
board f17 p4 (1)
depart f17 p9 (1)
down f17 f6 (1)
board f6 p10 (1)
up f6 f19 (1)
depart f19 p4 (1)
depart f19 p3 (1)
down f19 f7 (1)
board f7 p8 (1)
depart f7 p0 (1)
down f7 f2 (1)
depart f2 p8 (1)
depart f2 p12 (1)
up f2 f24 (1)
depart f24 p11 (1)
down f24 f9 (1)
board f9 p6 (1)
board f9 p7 (1)
depart f9 p10 (1)
down f9 f4 (1)
board f4 p1 (1)
depart f4 p7 (1)
up f4 f22 (1)
depart f22 p6 (1)
down f22 f8 (1)
depart f8 p2 (1)
depart f8 p1 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f28-p14-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)

(above f24 f25)
(above f24 f26)
(above f24 f27)

(above f25 f26)
(above f25 f27)

(above f26 f27)



(origin p0 f15)
(destin p0 f18)

(origin p1 f9)
(destin p1 f19)

(origin p2 f1)
(destin p2 f3)

(origin p3 f10)
(destin p3 f16)

(origin p4 f1)
(destin p4 f17)

(origin p5 f2)
(destin p5 f19)

(origin p6 f6)
(destin p6 f11)

(origin p7 f27)
(destin p7 f14)

(origin p8 f24)
(destin p8 f22)

(origin p9 f16)
(destin p9 f3)

(origin p10 f0)
(destin p10 f19)

(origin p11 f9)
(destin p11 f2)

(origin p12 f26)
(destin p12 f27)

(origin p13 f15)
(destin p13 f19)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
))
)


","board f0 p10 (1)
up f0 f1 (1)
board f1 p2 (1)
board f1 p4 (1)
up f1 f10 (1)
board f10 p3 (1)
down f10 f6 (1)
board f6 p6 (1)
up f6 f11 (1)
depart f11 p6 (1)
down f11 f9 (1)
board f9 p1 (1)
board f9 p11 (1)
down f9 f2 (1)
board f2 p5 (1)
depart f2 p11 (1)
up f2 f15 (1)
board f15 p0 (1)
board f15 p13 (1)
up f15 f16 (1)
board f16 p9 (1)
depart f16 p3 (1)
down f16 f3 (1)
depart f3 p9 (1)
depart f3 p2 (1)
up f3 f17 (1)
depart f17 p4 (1)
up f17 f18 (1)
depart f18 p0 (1)
up f18 f19 (1)
depart f19 p5 (1)
depart f19 p13 (1)
depart f19 p10 (1)
depart f19 p1 (1)
up f19 f24 (1)
board f24 p8 (1)
down f24 f22 (1)
depart f22 p8 (1)
up f22 f26 (1)
board f26 p12 (1)
up f26 f27 (1)
board f27 p7 (1)
depart f27 p12 (1)
down f27 f14 (1)
depart f14 p7 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f28-p14-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)

(above f24 f25)
(above f24 f26)
(above f24 f27)

(above f25 f26)
(above f25 f27)

(above f26 f27)



(origin p0 f8)
(destin p0 f1)

(origin p1 f7)
(destin p1 f24)

(origin p2 f16)
(destin p2 f7)

(origin p3 f13)
(destin p3 f2)

(origin p4 f9)
(destin p4 f19)

(origin p5 f20)
(destin p5 f4)

(origin p6 f1)
(destin p6 f19)

(origin p7 f22)
(destin p7 f21)

(origin p8 f12)
(destin p8 f26)

(origin p9 f22)
(destin p9 f19)

(origin p10 f2)
(destin p10 f17)

(origin p11 f16)
(destin p11 f23)

(origin p12 f14)
(destin p12 f9)

(origin p13 f3)
(destin p13 f9)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
))
)


","up f0 f12 (1)
board f12 p8 (1)
down f12 f3 (1)
board f3 p13 (1)
up f3 f13 (1)
board f13 p3 (1)
down f13 f2 (1)
board f2 p10 (1)
depart f2 p3 (1)
up f2 f14 (1)
board f14 p12 (1)
down f14 f8 (1)
board f8 p0 (1)
down f8 f1 (1)
board f1 p6 (1)
depart f1 p0 (1)
up f1 f16 (1)
board f16 p11 (1)
board f16 p2 (1)
down f16 f7 (1)
board f7 p1 (1)
depart f7 p2 (1)
up f7 f17 (1)
depart f17 p10 (1)
down f17 f9 (1)
board f9 p4 (1)
depart f9 p13 (1)
depart f9 p12 (1)
up f9 f20 (1)
board f20 p5 (1)
down f20 f4 (1)
depart f4 p5 (1)
up f4 f22 (1)
board f22 p7 (1)
board f22 p9 (1)
down f22 f19 (1)
depart f19 p9 (1)
depart f19 p6 (1)
depart f19 p4 (1)
up f19 f21 (1)
depart f21 p7 (1)
up f21 f23 (1)
depart f23 p11 (1)
up f23 f24 (1)
depart f24 p1 (1)
up f24 f26 (1)
depart f26 p8 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f28-p14-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)

(above f24 f25)
(above f24 f26)
(above f24 f27)

(above f25 f26)
(above f25 f27)

(above f26 f27)



(origin p0 f23)
(destin p0 f8)

(origin p1 f0)
(destin p1 f2)

(origin p2 f13)
(destin p2 f2)

(origin p3 f2)
(destin p3 f18)

(origin p4 f15)
(destin p4 f7)

(origin p5 f2)
(destin p5 f23)

(origin p6 f27)
(destin p6 f6)

(origin p7 f10)
(destin p7 f22)

(origin p8 f1)
(destin p8 f19)

(origin p9 f16)
(destin p9 f21)

(origin p10 f12)
(destin p10 f4)

(origin p11 f21)
(destin p11 f15)

(origin p12 f26)
(destin p12 f14)

(origin p13 f3)
(destin p13 f11)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
))
)


","board f0 p1 (1)
up f0 f1 (1)
board f1 p8 (1)
up f1 f10 (1)
board f10 p7 (1)
down f10 f3 (1)
board f3 p13 (1)
up f3 f11 (1)
depart f11 p13 (1)
up f11 f12 (1)
board f12 p10 (1)
down f12 f4 (1)
depart f4 p10 (1)
up f4 f13 (1)
board f13 p2 (1)
down f13 f2 (1)
board f2 p3 (1)
board f2 p5 (1)
depart f2 p2 (1)
depart f2 p1 (1)
up f2 f16 (1)
board f16 p9 (1)
up f16 f18 (1)
depart f18 p3 (1)
up f18 f19 (1)
depart f19 p8 (1)
up f19 f21 (1)
board f21 p11 (1)
depart f21 p9 (1)
down f21 f15 (1)
board f15 p4 (1)
depart f15 p11 (1)
down f15 f7 (1)
depart f7 p4 (1)
up f7 f22 (1)
depart f22 p7 (1)
up f22 f23 (1)
board f23 p0 (1)
depart f23 p5 (1)
down f23 f8 (1)
depart f8 p0 (1)
up f8 f26 (1)
board f26 p12 (1)
down f26 f14 (1)
depart f14 p12 (1)
up f14 f27 (1)
board f27 p6 (1)
down f27 f6 (1)
depart f6 p6 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f28-p14-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)

(above f24 f25)
(above f24 f26)
(above f24 f27)

(above f25 f26)
(above f25 f27)

(above f26 f27)



(origin p0 f21)
(destin p0 f19)

(origin p1 f14)
(destin p1 f27)

(origin p2 f23)
(destin p2 f20)

(origin p3 f21)
(destin p3 f16)

(origin p4 f27)
(destin p4 f12)

(origin p5 f19)
(destin p5 f26)

(origin p6 f0)
(destin p6 f22)

(origin p7 f22)
(destin p7 f15)

(origin p8 f20)
(destin p8 f15)

(origin p9 f18)
(destin p9 f16)

(origin p10 f8)
(destin p10 f21)

(origin p11 f8)
(destin p11 f27)

(origin p12 f12)
(destin p12 f10)

(origin p13 f18)
(destin p13 f14)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
))
)


","board f0 p6 (1)
up f0 f18 (1)
board f18 p13 (1)
board f18 p9 (1)
down f18 f14 (1)
board f14 p1 (1)
depart f14 p13 (1)
down f14 f8 (1)
board f8 p10 (1)
board f8 p11 (1)
up f8 f21 (1)
board f21 p0 (1)
board f21 p3 (1)
depart f21 p10 (1)
down f21 f16 (1)
depart f16 p9 (1)
depart f16 p3 (1)
up f16 f19 (1)
board f19 p5 (1)
depart f19 p0 (1)
up f19 f22 (1)
board f22 p7 (1)
depart f22 p6 (1)
up f22 f23 (1)
board f23 p2 (1)
down f23 f20 (1)
board f20 p8 (1)
depart f20 p2 (1)
down f20 f15 (1)
depart f15 p8 (1)
depart f15 p7 (1)
up f15 f26 (1)
depart f26 p5 (1)
up f26 f27 (1)
board f27 p4 (1)
depart f27 p11 (1)
depart f27 p1 (1)
down f27 f12 (1)
board f12 p12 (1)
depart f12 p4 (1)
down f12 f10 (1)
depart f10 p12 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f28-p14-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)

(above f24 f25)
(above f24 f26)
(above f24 f27)

(above f25 f26)
(above f25 f27)

(above f26 f27)



(origin p0 f19)
(destin p0 f27)

(origin p1 f26)
(destin p1 f10)

(origin p2 f0)
(destin p2 f14)

(origin p3 f6)
(destin p3 f7)

(origin p4 f1)
(destin p4 f17)

(origin p5 f4)
(destin p5 f22)

(origin p6 f25)
(destin p6 f22)

(origin p7 f15)
(destin p7 f6)

(origin p8 f9)
(destin p8 f24)

(origin p9 f5)
(destin p9 f15)

(origin p10 f9)
(destin p10 f14)

(origin p11 f17)
(destin p11 f24)

(origin p12 f22)
(destin p12 f15)

(origin p13 f20)
(destin p13 f27)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
))
)


","board f0 p2 (1)
up f0 f1 (1)
board f1 p4 (1)
up f1 f17 (1)
board f17 p11 (1)
depart f17 p4 (1)
down f17 f4 (1)
board f4 p5 (1)
up f4 f19 (1)
board f19 p0 (1)
down f19 f5 (1)
board f5 p9 (1)
up f5 f20 (1)
board f20 p13 (1)
down f20 f9 (1)
board f9 p10 (1)
board f9 p8 (1)
up f9 f14 (1)
depart f14 p2 (1)
depart f14 p10 (1)
up f14 f24 (1)
depart f24 p8 (1)
depart f24 p11 (1)
up f24 f25 (1)
board f25 p6 (1)
down f25 f22 (1)
board f22 p12 (1)
depart f22 p6 (1)
depart f22 p5 (1)
down f22 f15 (1)
board f15 p7 (1)
depart f15 p9 (1)
depart f15 p12 (1)
down f15 f6 (1)
board f6 p3 (1)
depart f6 p7 (1)
up f6 f26 (1)
board f26 p1 (1)
down f26 f10 (1)
depart f10 p1 (1)
down f10 f7 (1)
depart f7 p3 (1)
up f7 f27 (1)
depart f27 p13 (1)
depart f27 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f30-p15-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)

(above f26 f27)
(above f26 f28)
(above f26 f29)

(above f27 f28)
(above f27 f29)

(above f28 f29)



(origin p0 f13)
(destin p0 f16)

(origin p1 f27)
(destin p1 f25)

(origin p2 f23)
(destin p2 f25)

(origin p3 f16)
(destin p3 f12)

(origin p4 f9)
(destin p4 f1)

(origin p5 f2)
(destin p5 f7)

(origin p6 f20)
(destin p6 f19)

(origin p7 f23)
(destin p7 f16)

(origin p8 f0)
(destin p8 f6)

(origin p9 f22)
(destin p9 f16)

(origin p10 f11)
(destin p10 f8)

(origin p11 f27)
(destin p11 f9)

(origin p12 f2)
(destin p12 f20)

(origin p13 f2)
(destin p13 f13)

(origin p14 f7)
(destin p14 f25)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
))
)


","board f0 p2 (1)
up f0 f1 (1)
board f1 p4 (1)
up f1 f17 (1)
board f17 p11 (1)
depart f17 p4 (1)
down f17 f4 (1)
board f4 p5 (1)
up f4 f19 (1)
board f19 p0 (1)
down f19 f5 (1)
board f5 p9 (1)
up f5 f20 (1)
board f20 p13 (1)
down f20 f9 (1)
board f9 p10 (1)
board f9 p8 (1)
up f9 f14 (1)
depart f14 p2 (1)
depart f14 p10 (1)
up f14 f24 (1)
depart f24 p8 (1)
depart f24 p11 (1)
up f24 f25 (1)
board f25 p6 (1)
down f25 f22 (1)
board f22 p12 (1)
depart f22 p6 (1)
depart f22 p5 (1)
down f22 f15 (1)
board f15 p7 (1)
depart f15 p9 (1)
depart f15 p12 (1)
down f15 f6 (1)
board f6 p3 (1)
depart f6 p7 (1)
up f6 f26 (1)
board f26 p1 (1)
down f26 f10 (1)
depart f10 p1 (1)
down f10 f7 (1)
depart f7 p3 (1)
up f7 f27 (1)
depart f27 p13 (1)
depart f27 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f30-p15-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)

(above f26 f27)
(above f26 f28)
(above f26 f29)

(above f27 f28)
(above f27 f29)

(above f28 f29)



(origin p0 f20)
(destin p0 f11)

(origin p1 f29)
(destin p1 f14)

(origin p2 f16)
(destin p2 f13)

(origin p3 f25)
(destin p3 f10)

(origin p4 f1)
(destin p4 f0)

(origin p5 f28)
(destin p5 f17)

(origin p6 f17)
(destin p6 f0)

(origin p7 f1)
(destin p7 f10)

(origin p8 f18)
(destin p8 f0)

(origin p9 f3)
(destin p9 f4)

(origin p10 f11)
(destin p10 f22)

(origin p11 f5)
(destin p11 f6)

(origin p12 f13)
(destin p12 f1)

(origin p13 f27)
(destin p13 f17)

(origin p14 f14)
(destin p14 f26)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
))
)


","up f0 f16 (1)
board f16 p2 (1)
down f16 f13 (1)
board f13 p12 (1)
depart f13 p2 (1)
down f13 f1 (1)
board f1 p4 (1)
board f1 p7 (1)
depart f1 p12 (1)
up f1 f18 (1)
board f18 p8 (1)
down f18 f3 (1)
board f3 p9 (1)
up f3 f20 (1)
board f20 p0 (1)
down f20 f11 (1)
board f11 p10 (1)
depart f11 p0 (1)
down f11 f4 (1)
depart f4 p9 (1)
up f4 f22 (1)
depart f22 p10 (1)
down f22 f5 (1)
board f5 p11 (1)
up f5 f25 (1)
board f25 p3 (1)
down f25 f10 (1)
depart f10 p7 (1)
depart f10 p3 (1)
down f10 f6 (1)
depart f6 p11 (1)
up f6 f27 (1)
board f27 p13 (1)
up f27 f28 (1)
board f28 p5 (1)
down f28 f17 (1)
board f17 p6 (1)
depart f17 p5 (1)
depart f17 p13 (1)
down f17 f0 (1)
depart f0 p8 (1)
depart f0 p6 (1)
depart f0 p4 (1)
up f0 f29 (1)
board f29 p1 (1)
down f29 f14 (1)
board f14 p14 (1)
depart f14 p1 (1)
up f14 f26 (1)
depart f26 p14 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f30-p15-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)

(above f26 f27)
(above f26 f28)
(above f26 f29)

(above f27 f28)
(above f27 f29)

(above f28 f29)



(origin p0 f13)
(destin p0 f0)

(origin p1 f4)
(destin p1 f12)

(origin p2 f3)
(destin p2 f24)

(origin p3 f20)
(destin p3 f14)

(origin p4 f19)
(destin p4 f9)

(origin p5 f20)
(destin p5 f23)

(origin p6 f1)
(destin p6 f2)

(origin p7 f6)
(destin p7 f24)

(origin p8 f25)
(destin p8 f15)

(origin p9 f24)
(destin p9 f0)

(origin p10 f25)
(destin p10 f8)

(origin p11 f28)
(destin p11 f24)

(origin p12 f23)
(destin p12 f21)

(origin p13 f8)
(destin p13 f24)

(origin p14 f27)
(destin p14 f13)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
))
)


","up f0 f1 (1)
board f1 p6 (1)
up f1 f19 (1)
board f19 p4 (1)
down f19 f2 (1)
depart f2 p6 (1)
up f2 f20 (1)
board f20 p3 (1)
board f20 p5 (1)
down f20 f14 (1)
depart f14 p3 (1)
down f14 f3 (1)
board f3 p2 (1)
up f3 f23 (1)
board f23 p12 (1)
depart f23 p5 (1)
down f23 f21 (1)
depart f21 p12 (1)
down f21 f4 (1)
board f4 p1 (1)
up f4 f12 (1)
depart f12 p1 (1)
down f12 f6 (1)
board f6 p7 (1)
up f6 f25 (1)
board f25 p10 (1)
board f25 p8 (1)
down f25 f15 (1)
depart f15 p8 (1)
down f15 f8 (1)
board f8 p13 (1)
depart f8 p10 (1)
up f8 f27 (1)
board f27 p14 (1)
down f27 f13 (1)
board f13 p0 (1)
depart f13 p14 (1)
down f13 f9 (1)
depart f9 p4 (1)
up f9 f28 (1)
board f28 p11 (1)
down f28 f24 (1)
board f24 p9 (1)
depart f24 p7 (1)
depart f24 p2 (1)
depart f24 p13 (1)
depart f24 p11 (1)
down f24 f0 (1)
depart f0 p9 (1)
depart f0 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f30-p15-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)

(above f26 f27)
(above f26 f28)
(above f26 f29)

(above f27 f28)
(above f27 f29)

(above f28 f29)



(origin p0 f23)
(destin p0 f5)

(origin p1 f6)
(destin p1 f19)

(origin p2 f9)
(destin p2 f18)

(origin p3 f5)
(destin p3 f18)

(origin p4 f21)
(destin p4 f2)

(origin p5 f1)
(destin p5 f24)

(origin p6 f4)
(destin p6 f6)

(origin p7 f22)
(destin p7 f7)

(origin p8 f8)
(destin p8 f13)

(origin p9 f20)
(destin p9 f18)

(origin p10 f28)
(destin p10 f23)

(origin p11 f12)
(destin p11 f29)

(origin p12 f28)
(destin p12 f22)

(origin p13 f28)
(destin p13 f12)

(origin p14 f17)
(destin p14 f23)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
))
)


","up f0 f1 (1)
board f1 p5 (1)
up f1 f17 (1)
board f17 p14 (1)
down f17 f4 (1)
board f4 p6 (1)
up f4 f20 (1)
board f20 p9 (1)
down f20 f6 (1)
board f6 p1 (1)
depart f6 p6 (1)
up f6 f19 (1)
depart f19 p1 (1)
down f19 f8 (1)
board f8 p8 (1)
up f8 f13 (1)
depart f13 p8 (1)
down f13 f9 (1)
board f9 p2 (1)
up f9 f21 (1)
board f21 p4 (1)
down f21 f2 (1)
depart f2 p4 (1)
up f2 f24 (1)
depart f24 p5 (1)
up f24 f28 (1)
board f28 p10 (1)
board f28 p12 (1)
board f28 p13 (1)
down f28 f12 (1)
board f12 p11 (1)
depart f12 p13 (1)
up f12 f22 (1)
board f22 p7 (1)
depart f22 p12 (1)
down f22 f7 (1)
depart f7 p7 (1)
up f7 f23 (1)
board f23 p0 (1)
depart f23 p14 (1)
depart f23 p10 (1)
down f23 f5 (1)
board f5 p3 (1)
depart f5 p0 (1)
up f5 f18 (1)
depart f18 p9 (1)
depart f18 p3 (1)
depart f18 p2 (1)
up f18 f29 (1)
depart f29 p11 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f30-p15-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)

(above f26 f27)
(above f26 f28)
(above f26 f29)

(above f27 f28)
(above f27 f29)

(above f28 f29)



(origin p0 f15)
(destin p0 f21)

(origin p1 f12)
(destin p1 f2)

(origin p2 f0)
(destin p2 f12)

(origin p3 f28)
(destin p3 f17)

(origin p4 f15)
(destin p4 f9)

(origin p5 f14)
(destin p5 f20)

(origin p6 f19)
(destin p6 f2)

(origin p7 f9)
(destin p7 f18)

(origin p8 f3)
(destin p8 f20)

(origin p9 f13)
(destin p9 f19)

(origin p10 f18)
(destin p10 f13)

(origin p11 f28)
(destin p11 f12)

(origin p12 f27)
(destin p12 f10)

(origin p13 f27)
(destin p13 f19)

(origin p14 f8)
(destin p14 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
))
)


","board f0 p2 (1)
up f0 f14 (1)
board f14 p5 (1)
down f14 f3 (1)
board f3 p8 (1)
up f3 f15 (1)
board f15 p0 (1)
board f15 p4 (1)
down f15 f8 (1)
board f8 p14 (1)
down f8 f0 (1)
depart f0 p14 (1)
up f0 f20 (1)
depart f20 p8 (1)
depart f20 p5 (1)
down f20 f9 (1)
board f9 p7 (1)
depart f9 p4 (1)
up f9 f18 (1)
board f18 p10 (1)
depart f18 p7 (1)
down f18 f13 (1)
board f13 p9 (1)
depart f13 p10 (1)
up f13 f21 (1)
depart f21 p0 (1)
up f21 f27 (1)
board f27 p12 (1)
board f27 p13 (1)
down f27 f10 (1)
depart f10 p12 (1)
up f10 f19 (1)
board f19 p6 (1)
depart f19 p9 (1)
depart f19 p13 (1)
up f19 f28 (1)
board f28 p11 (1)
board f28 p3 (1)
down f28 f12 (1)
board f12 p1 (1)
depart f12 p2 (1)
depart f12 p11 (1)
down f12 f2 (1)
depart f2 p6 (1)
depart f2 p1 (1)
up f2 f17 (1)
depart f17 p3 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f32-p16-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 p15 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 
             f30 f31 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)
(above f0 f30)
(above f0 f31)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)
(above f1 f30)
(above f1 f31)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)
(above f2 f30)
(above f2 f31)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)
(above f3 f30)
(above f3 f31)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)
(above f4 f30)
(above f4 f31)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)
(above f5 f30)
(above f5 f31)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)
(above f6 f30)
(above f6 f31)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)
(above f7 f30)
(above f7 f31)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)
(above f8 f30)
(above f8 f31)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)
(above f9 f30)
(above f9 f31)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)
(above f10 f30)
(above f10 f31)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)
(above f11 f30)
(above f11 f31)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)
(above f12 f30)
(above f12 f31)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)
(above f13 f30)
(above f13 f31)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)
(above f14 f30)
(above f14 f31)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)
(above f15 f30)
(above f15 f31)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)
(above f16 f30)
(above f16 f31)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)
(above f17 f30)
(above f17 f31)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)
(above f18 f30)
(above f18 f31)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)
(above f19 f30)
(above f19 f31)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)
(above f20 f30)
(above f20 f31)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)
(above f21 f30)
(above f21 f31)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)
(above f22 f30)
(above f22 f31)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)
(above f23 f30)
(above f23 f31)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)
(above f24 f30)
(above f24 f31)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)
(above f25 f30)
(above f25 f31)

(above f26 f27)
(above f26 f28)
(above f26 f29)
(above f26 f30)
(above f26 f31)

(above f27 f28)
(above f27 f29)
(above f27 f30)
(above f27 f31)

(above f28 f29)
(above f28 f30)
(above f28 f31)

(above f29 f30)
(above f29 f31)

(above f30 f31)



(origin p0 f7)
(destin p0 f6)

(origin p1 f9)
(destin p1 f19)

(origin p2 f17)
(destin p2 f31)

(origin p3 f10)
(destin p3 f12)

(origin p4 f9)
(destin p4 f13)

(origin p5 f26)
(destin p5 f11)

(origin p6 f18)
(destin p6 f27)

(origin p7 f3)
(destin p7 f6)

(origin p8 f28)
(destin p8 f2)

(origin p9 f20)
(destin p9 f24)

(origin p10 f27)
(destin p10 f8)

(origin p11 f7)
(destin p11 f13)

(origin p12 f22)
(destin p12 f26)

(origin p13 f14)
(destin p13 f3)

(origin p14 f19)
(destin p14 f31)

(origin p15 f9)
(destin p15 f26)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
(served p15)
))
)


","up f0 f10 (1)
board f10 p3 (1)
down f10 f7 (1)
board f7 p0 (1)
board f7 p11 (1)
up f7 f12 (1)
depart f12 p3 (1)
down f12 f9 (1)
board f9 p1 (1)
board f9 p15 (1)
board f9 p4 (1)
up f9 f13 (1)
depart f13 p4 (1)
depart f13 p11 (1)
up f13 f14 (1)
board f14 p13 (1)
down f14 f3 (1)
board f3 p7 (1)
depart f3 p13 (1)
up f3 f17 (1)
board f17 p2 (1)
down f17 f6 (1)
depart f6 p7 (1)
depart f6 p0 (1)
up f6 f18 (1)
board f18 p6 (1)
up f18 f19 (1)
board f19 p14 (1)
depart f19 p1 (1)
up f19 f20 (1)
board f20 p9 (1)
up f20 f22 (1)
board f22 p12 (1)
up f22 f24 (1)
depart f24 p9 (1)
up f24 f26 (1)
board f26 p5 (1)
depart f26 p15 (1)
depart f26 p12 (1)
down f26 f11 (1)
depart f11 p5 (1)
up f11 f27 (1)
board f27 p10 (1)
depart f27 p6 (1)
down f27 f8 (1)
depart f8 p10 (1)
up f8 f28 (1)
board f28 p8 (1)
down f28 f2 (1)
depart f2 p8 (1)
up f2 f31 (1)
depart f31 p2 (1)
depart f31 p14 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f32-p16-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 p15 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 
             f30 f31 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)
(above f0 f30)
(above f0 f31)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)
(above f1 f30)
(above f1 f31)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)
(above f2 f30)
(above f2 f31)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)
(above f3 f30)
(above f3 f31)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)
(above f4 f30)
(above f4 f31)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)
(above f5 f30)
(above f5 f31)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)
(above f6 f30)
(above f6 f31)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)
(above f7 f30)
(above f7 f31)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)
(above f8 f30)
(above f8 f31)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)
(above f9 f30)
(above f9 f31)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)
(above f10 f30)
(above f10 f31)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)
(above f11 f30)
(above f11 f31)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)
(above f12 f30)
(above f12 f31)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)
(above f13 f30)
(above f13 f31)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)
(above f14 f30)
(above f14 f31)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)
(above f15 f30)
(above f15 f31)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)
(above f16 f30)
(above f16 f31)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)
(above f17 f30)
(above f17 f31)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)
(above f18 f30)
(above f18 f31)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)
(above f19 f30)
(above f19 f31)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)
(above f20 f30)
(above f20 f31)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)
(above f21 f30)
(above f21 f31)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)
(above f22 f30)
(above f22 f31)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)
(above f23 f30)
(above f23 f31)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)
(above f24 f30)
(above f24 f31)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)
(above f25 f30)
(above f25 f31)

(above f26 f27)
(above f26 f28)
(above f26 f29)
(above f26 f30)
(above f26 f31)

(above f27 f28)
(above f27 f29)
(above f27 f30)
(above f27 f31)

(above f28 f29)
(above f28 f30)
(above f28 f31)

(above f29 f30)
(above f29 f31)

(above f30 f31)



(origin p0 f24)
(destin p0 f5)

(origin p1 f23)
(destin p1 f28)

(origin p2 f0)
(destin p2 f23)

(origin p3 f17)
(destin p3 f22)

(origin p4 f21)
(destin p4 f3)

(origin p5 f20)
(destin p5 f29)

(origin p6 f19)
(destin p6 f18)

(origin p7 f13)
(destin p7 f4)

(origin p8 f2)
(destin p8 f22)

(origin p9 f23)
(destin p9 f14)

(origin p10 f13)
(destin p10 f20)

(origin p11 f31)
(destin p11 f18)

(origin p12 f13)
(destin p12 f11)

(origin p13 f17)
(destin p13 f3)

(origin p14 f28)
(destin p14 f30)

(origin p15 f28)
(destin p15 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
(served p15)
))
)


","board f0 p2 (1)
up f0 f13 (1)
board f13 p10 (1)
board f13 p12 (1)
board f13 p7 (1)
down f13 f11 (1)
depart f11 p12 (1)
down f11 f2 (1)
board f2 p8 (1)
up f2 f17 (1)
board f17 p13 (1)
board f17 p3 (1)
down f17 f4 (1)
depart f4 p7 (1)
up f4 f19 (1)
board f19 p6 (1)
up f19 f20 (1)
board f20 p5 (1)
depart f20 p10 (1)
up f20 f21 (1)
board f21 p4 (1)
down f21 f3 (1)
depart f3 p4 (1)
depart f3 p13 (1)
up f3 f22 (1)
depart f22 p8 (1)
depart f22 p3 (1)
up f22 f23 (1)
board f23 p1 (1)
board f23 p9 (1)
depart f23 p2 (1)
down f23 f14 (1)
depart f14 p9 (1)
up f14 f24 (1)
board f24 p0 (1)
down f24 f5 (1)
depart f5 p0 (1)
up f5 f28 (1)
board f28 p14 (1)
board f28 p15 (1)
depart f28 p1 (1)
down f28 f1 (1)
depart f1 p15 (1)
up f1 f29 (1)
depart f29 p5 (1)
up f29 f30 (1)
depart f30 p14 (1)
up f30 f31 (1)
board f31 p11 (1)
down f31 f18 (1)
depart f18 p6 (1)
depart f18 p11 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f32-p16-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 p15 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 
             f30 f31 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)
(above f0 f30)
(above f0 f31)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)
(above f1 f30)
(above f1 f31)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)
(above f2 f30)
(above f2 f31)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)
(above f3 f30)
(above f3 f31)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)
(above f4 f30)
(above f4 f31)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)
(above f5 f30)
(above f5 f31)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)
(above f6 f30)
(above f6 f31)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)
(above f7 f30)
(above f7 f31)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)
(above f8 f30)
(above f8 f31)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)
(above f9 f30)
(above f9 f31)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)
(above f10 f30)
(above f10 f31)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)
(above f11 f30)
(above f11 f31)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)
(above f12 f30)
(above f12 f31)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)
(above f13 f30)
(above f13 f31)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)
(above f14 f30)
(above f14 f31)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)
(above f15 f30)
(above f15 f31)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)
(above f16 f30)
(above f16 f31)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)
(above f17 f30)
(above f17 f31)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)
(above f18 f30)
(above f18 f31)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)
(above f19 f30)
(above f19 f31)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)
(above f20 f30)
(above f20 f31)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)
(above f21 f30)
(above f21 f31)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)
(above f22 f30)
(above f22 f31)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)
(above f23 f30)
(above f23 f31)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)
(above f24 f30)
(above f24 f31)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)
(above f25 f30)
(above f25 f31)

(above f26 f27)
(above f26 f28)
(above f26 f29)
(above f26 f30)
(above f26 f31)

(above f27 f28)
(above f27 f29)
(above f27 f30)
(above f27 f31)

(above f28 f29)
(above f28 f30)
(above f28 f31)

(above f29 f30)
(above f29 f31)

(above f30 f31)



(origin p0 f11)
(destin p0 f16)

(origin p1 f4)
(destin p1 f10)

(origin p2 f25)
(destin p2 f14)

(origin p3 f22)
(destin p3 f14)

(origin p4 f15)
(destin p4 f23)

(origin p5 f10)
(destin p5 f27)

(origin p6 f31)
(destin p6 f18)

(origin p7 f2)
(destin p7 f30)

(origin p8 f9)
(destin p8 f31)

(origin p9 f28)
(destin p9 f8)

(origin p10 f9)
(destin p10 f0)

(origin p11 f24)
(destin p11 f16)

(origin p12 f1)
(destin p12 f19)

(origin p13 f22)
(destin p13 f30)

(origin p14 f7)
(destin p14 f3)

(origin p15 f14)
(destin p15 f19)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
(served p15)
))
)


","up f0 f1 (1)
board f1 p12 (1)
up f1 f11 (1)
board f11 p0 (1)
down f11 f2 (1)
board f2 p7 (1)
up f2 f15 (1)
board f15 p4 (1)
down f15 f4 (1)
board f4 p1 (1)
up f4 f10 (1)
board f10 p5 (1)
depart f10 p1 (1)
down f10 f7 (1)
board f7 p14 (1)
down f7 f3 (1)
depart f3 p14 (1)
up f3 f22 (1)
board f22 p13 (1)
board f22 p3 (1)
down f22 f9 (1)
board f9 p10 (1)
board f9 p8 (1)
down f9 f0 (1)
depart f0 p10 (1)
up f0 f23 (1)
depart f23 p4 (1)
up f23 f24 (1)
board f24 p11 (1)
down f24 f16 (1)
depart f16 p11 (1)
depart f16 p0 (1)
up f16 f25 (1)
board f25 p2 (1)
down f25 f14 (1)
board f14 p15 (1)
depart f14 p3 (1)
depart f14 p2 (1)
up f14 f19 (1)
depart f19 p15 (1)
depart f19 p12 (1)
up f19 f27 (1)
depart f27 p5 (1)
up f27 f28 (1)
board f28 p9 (1)
down f28 f8 (1)
depart f8 p9 (1)
up f8 f30 (1)
depart f30 p7 (1)
depart f30 p13 (1)
up f30 f31 (1)
board f31 p6 (1)
depart f31 p8 (1)
down f31 f18 (1)
depart f18 p6 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f32-p16-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 p15 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 
             f30 f31 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)
(above f0 f30)
(above f0 f31)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)
(above f1 f30)
(above f1 f31)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)
(above f2 f30)
(above f2 f31)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)
(above f3 f30)
(above f3 f31)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)
(above f4 f30)
(above f4 f31)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)
(above f5 f30)
(above f5 f31)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)
(above f6 f30)
(above f6 f31)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)
(above f7 f30)
(above f7 f31)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)
(above f8 f30)
(above f8 f31)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)
(above f9 f30)
(above f9 f31)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)
(above f10 f30)
(above f10 f31)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)
(above f11 f30)
(above f11 f31)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)
(above f12 f30)
(above f12 f31)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)
(above f13 f30)
(above f13 f31)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)
(above f14 f30)
(above f14 f31)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)
(above f15 f30)
(above f15 f31)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)
(above f16 f30)
(above f16 f31)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)
(above f17 f30)
(above f17 f31)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)
(above f18 f30)
(above f18 f31)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)
(above f19 f30)
(above f19 f31)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)
(above f20 f30)
(above f20 f31)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)
(above f21 f30)
(above f21 f31)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)
(above f22 f30)
(above f22 f31)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)
(above f23 f30)
(above f23 f31)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)
(above f24 f30)
(above f24 f31)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)
(above f25 f30)
(above f25 f31)

(above f26 f27)
(above f26 f28)
(above f26 f29)
(above f26 f30)
(above f26 f31)

(above f27 f28)
(above f27 f29)
(above f27 f30)
(above f27 f31)

(above f28 f29)
(above f28 f30)
(above f28 f31)

(above f29 f30)
(above f29 f31)

(above f30 f31)



(origin p0 f1)
(destin p0 f15)

(origin p1 f14)
(destin p1 f19)

(origin p2 f19)
(destin p2 f12)

(origin p3 f21)
(destin p3 f0)

(origin p4 f19)
(destin p4 f8)

(origin p5 f23)
(destin p5 f6)

(origin p6 f0)
(destin p6 f14)

(origin p7 f10)
(destin p7 f27)

(origin p8 f28)
(destin p8 f23)

(origin p9 f6)
(destin p9 f4)

(origin p10 f24)
(destin p10 f21)

(origin p11 f0)
(destin p11 f19)

(origin p12 f24)
(destin p12 f22)

(origin p13 f30)
(destin p13 f18)

(origin p14 f13)
(destin p14 f25)

(origin p15 f23)
(destin p15 f14)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
(served p15)
))
)


","board f0 p11 (1)
board f0 p6 (1)
up f0 f1 (1)
board f1 p0 (1)
up f1 f10 (1)
board f10 p7 (1)
up f10 f13 (1)
board f13 p14 (1)
up f13 f15 (1)
depart f15 p0 (1)
up f15 f24 (1)
board f24 p10 (1)
board f24 p12 (1)
down f24 f21 (1)
board f21 p3 (1)
depart f21 p10 (1)
down f21 f0 (1)
depart f0 p3 (1)
up f0 f22 (1)
depart f22 p12 (1)
up f22 f25 (1)
depart f25 p14 (1)
up f25 f27 (1)
depart f27 p7 (1)
up f27 f28 (1)
board f28 p8 (1)
down f28 f23 (1)
board f23 p15 (1)
board f23 p5 (1)
depart f23 p8 (1)
down f23 f14 (1)
board f14 p1 (1)
depart f14 p6 (1)
depart f14 p15 (1)
down f14 f6 (1)
board f6 p9 (1)
depart f6 p5 (1)
down f6 f4 (1)
depart f4 p9 (1)
up f4 f19 (1)
board f19 p2 (1)
board f19 p4 (1)
depart f19 p11 (1)
depart f19 p1 (1)
down f19 f12 (1)
depart f12 p2 (1)
down f12 f8 (1)
depart f8 p4 (1)
up f8 f30 (1)
board f30 p13 (1)
down f30 f18 (1)
depart f18 p13 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f32-p16-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 p15 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 
             f30 f31 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)
(above f0 f30)
(above f0 f31)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)
(above f1 f30)
(above f1 f31)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)
(above f2 f30)
(above f2 f31)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)
(above f3 f30)
(above f3 f31)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)
(above f4 f30)
(above f4 f31)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)
(above f5 f30)
(above f5 f31)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)
(above f6 f30)
(above f6 f31)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)
(above f7 f30)
(above f7 f31)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)
(above f8 f30)
(above f8 f31)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)
(above f9 f30)
(above f9 f31)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)
(above f10 f30)
(above f10 f31)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)
(above f11 f30)
(above f11 f31)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)
(above f12 f30)
(above f12 f31)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)
(above f13 f30)
(above f13 f31)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)
(above f14 f30)
(above f14 f31)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)
(above f15 f30)
(above f15 f31)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)
(above f16 f30)
(above f16 f31)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)
(above f17 f30)
(above f17 f31)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)
(above f18 f30)
(above f18 f31)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)
(above f19 f30)
(above f19 f31)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)
(above f20 f30)
(above f20 f31)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)
(above f21 f30)
(above f21 f31)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)
(above f22 f30)
(above f22 f31)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)
(above f23 f30)
(above f23 f31)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)
(above f24 f30)
(above f24 f31)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)
(above f25 f30)
(above f25 f31)

(above f26 f27)
(above f26 f28)
(above f26 f29)
(above f26 f30)
(above f26 f31)

(above f27 f28)
(above f27 f29)
(above f27 f30)
(above f27 f31)

(above f28 f29)
(above f28 f30)
(above f28 f31)

(above f29 f30)
(above f29 f31)

(above f30 f31)



(origin p0 f31)
(destin p0 f7)

(origin p1 f18)
(destin p1 f2)

(origin p2 f4)
(destin p2 f14)

(origin p3 f6)
(destin p3 f27)

(origin p4 f29)
(destin p4 f17)

(origin p5 f0)
(destin p5 f6)

(origin p6 f29)
(destin p6 f22)

(origin p7 f19)
(destin p7 f30)

(origin p8 f29)
(destin p8 f28)

(origin p9 f25)
(destin p9 f7)

(origin p10 f1)
(destin p10 f26)

(origin p11 f17)
(destin p11 f12)

(origin p12 f26)
(destin p12 f11)

(origin p13 f8)
(destin p13 f23)

(origin p14 f23)
(destin p14 f26)

(origin p15 f14)
(destin p15 f23)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
(served p15)
))
)


","board f0 p5 (1)
up f0 f1 (1)
board f1 p10 (1)
up f1 f18 (1)
board f18 p1 (1)
down f18 f2 (1)
depart f2 p1 (1)
up f2 f19 (1)
board f19 p7 (1)
down f19 f4 (1)
board f4 p2 (1)
up f4 f14 (1)
board f14 p15 (1)
depart f14 p2 (1)
down f14 f6 (1)
board f6 p3 (1)
depart f6 p5 (1)
up f6 f25 (1)
board f25 p9 (1)
down f25 f8 (1)
board f8 p13 (1)
up f8 f23 (1)
board f23 p14 (1)
depart f23 p15 (1)
depart f23 p13 (1)
up f23 f26 (1)
board f26 p12 (1)
depart f26 p14 (1)
depart f26 p10 (1)
down f26 f11 (1)
depart f11 p12 (1)
up f11 f27 (1)
depart f27 p3 (1)
up f27 f29 (1)
board f29 p4 (1)
board f29 p6 (1)
board f29 p8 (1)
down f29 f17 (1)
board f17 p11 (1)
depart f17 p4 (1)
down f17 f12 (1)
depart f12 p11 (1)
up f12 f22 (1)
depart f22 p6 (1)
up f22 f28 (1)
depart f28 p8 (1)
up f28 f30 (1)
depart f30 p7 (1)
up f30 f31 (1)
board f31 p0 (1)
down f31 f7 (1)
depart f7 p9 (1)
depart f7 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f34-p17-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 p15 p16 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 
             f30 f31 f32 f33 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)
(above f0 f30)
(above f0 f31)
(above f0 f32)
(above f0 f33)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)
(above f1 f30)
(above f1 f31)
(above f1 f32)
(above f1 f33)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)
(above f2 f30)
(above f2 f31)
(above f2 f32)
(above f2 f33)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)
(above f3 f30)
(above f3 f31)
(above f3 f32)
(above f3 f33)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)
(above f4 f30)
(above f4 f31)
(above f4 f32)
(above f4 f33)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)
(above f5 f30)
(above f5 f31)
(above f5 f32)
(above f5 f33)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)
(above f6 f30)
(above f6 f31)
(above f6 f32)
(above f6 f33)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)
(above f7 f30)
(above f7 f31)
(above f7 f32)
(above f7 f33)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)
(above f8 f30)
(above f8 f31)
(above f8 f32)
(above f8 f33)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)
(above f9 f30)
(above f9 f31)
(above f9 f32)
(above f9 f33)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)
(above f10 f30)
(above f10 f31)
(above f10 f32)
(above f10 f33)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)
(above f11 f30)
(above f11 f31)
(above f11 f32)
(above f11 f33)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)
(above f12 f30)
(above f12 f31)
(above f12 f32)
(above f12 f33)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)
(above f13 f30)
(above f13 f31)
(above f13 f32)
(above f13 f33)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)
(above f14 f30)
(above f14 f31)
(above f14 f32)
(above f14 f33)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)
(above f15 f30)
(above f15 f31)
(above f15 f32)
(above f15 f33)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)
(above f16 f30)
(above f16 f31)
(above f16 f32)
(above f16 f33)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)
(above f17 f30)
(above f17 f31)
(above f17 f32)
(above f17 f33)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)
(above f18 f30)
(above f18 f31)
(above f18 f32)
(above f18 f33)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)
(above f19 f30)
(above f19 f31)
(above f19 f32)
(above f19 f33)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)
(above f20 f30)
(above f20 f31)
(above f20 f32)
(above f20 f33)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)
(above f21 f30)
(above f21 f31)
(above f21 f32)
(above f21 f33)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)
(above f22 f30)
(above f22 f31)
(above f22 f32)
(above f22 f33)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)
(above f23 f30)
(above f23 f31)
(above f23 f32)
(above f23 f33)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)
(above f24 f30)
(above f24 f31)
(above f24 f32)
(above f24 f33)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)
(above f25 f30)
(above f25 f31)
(above f25 f32)
(above f25 f33)

(above f26 f27)
(above f26 f28)
(above f26 f29)
(above f26 f30)
(above f26 f31)
(above f26 f32)
(above f26 f33)

(above f27 f28)
(above f27 f29)
(above f27 f30)
(above f27 f31)
(above f27 f32)
(above f27 f33)

(above f28 f29)
(above f28 f30)
(above f28 f31)
(above f28 f32)
(above f28 f33)

(above f29 f30)
(above f29 f31)
(above f29 f32)
(above f29 f33)

(above f30 f31)
(above f30 f32)
(above f30 f33)

(above f31 f32)
(above f31 f33)

(above f32 f33)



(origin p0 f27)
(destin p0 f32)

(origin p1 f9)
(destin p1 f17)

(origin p2 f15)
(destin p2 f3)

(origin p3 f20)
(destin p3 f14)

(origin p4 f11)
(destin p4 f19)

(origin p5 f22)
(destin p5 f31)

(origin p6 f20)
(destin p6 f19)

(origin p7 f29)
(destin p7 f22)

(origin p8 f28)
(destin p8 f30)

(origin p9 f6)
(destin p9 f14)

(origin p10 f1)
(destin p10 f8)

(origin p11 f19)
(destin p11 f5)

(origin p12 f14)
(destin p12 f22)

(origin p13 f8)
(destin p13 f21)

(origin p14 f31)
(destin p14 f11)

(origin p15 f17)
(destin p15 f32)

(origin p16 f10)
(destin p16 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
(served p15)
(served p16)
))
)


","up f0 f1 (1)
board f1 p10 (1)
up f1 f10 (1)
board f10 p16 (1)
down f10 f0 (1)
depart f0 p16 (1)
up f0 f15 (1)
board f15 p2 (1)
down f15 f3 (1)
depart f3 p2 (1)
up f3 f20 (1)
board f20 p3 (1)
board f20 p6 (1)
down f20 f6 (1)
board f6 p9 (1)
up f6 f14 (1)
board f14 p12 (1)
depart f14 p9 (1)
depart f14 p3 (1)
down f14 f8 (1)
board f8 p13 (1)
depart f8 p10 (1)
up f8 f21 (1)
depart f21 p13 (1)
down f21 f9 (1)
board f9 p1 (1)
up f9 f17 (1)
board f17 p15 (1)
depart f17 p1 (1)
up f17 f27 (1)
board f27 p0 (1)
up f27 f28 (1)
board f28 p8 (1)
up f28 f29 (1)
board f29 p7 (1)
down f29 f22 (1)
board f22 p5 (1)
depart f22 p7 (1)
depart f22 p12 (1)
up f22 f30 (1)
depart f30 p8 (1)
up f30 f31 (1)
board f31 p14 (1)
depart f31 p5 (1)
down f31 f11 (1)
board f11 p4 (1)
depart f11 p14 (1)
up f11 f19 (1)
board f19 p11 (1)
depart f19 p6 (1)
depart f19 p4 (1)
down f19 f5 (1)
depart f5 p11 (1)
up f5 f32 (1)
depart f32 p15 (1)
depart f32 p0 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f34-p17-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 p15 p16 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 
             f30 f31 f32 f33 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)
(above f0 f30)
(above f0 f31)
(above f0 f32)
(above f0 f33)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)
(above f1 f30)
(above f1 f31)
(above f1 f32)
(above f1 f33)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)
(above f2 f30)
(above f2 f31)
(above f2 f32)
(above f2 f33)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)
(above f3 f30)
(above f3 f31)
(above f3 f32)
(above f3 f33)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)
(above f4 f30)
(above f4 f31)
(above f4 f32)
(above f4 f33)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)
(above f5 f30)
(above f5 f31)
(above f5 f32)
(above f5 f33)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)
(above f6 f30)
(above f6 f31)
(above f6 f32)
(above f6 f33)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)
(above f7 f30)
(above f7 f31)
(above f7 f32)
(above f7 f33)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)
(above f8 f30)
(above f8 f31)
(above f8 f32)
(above f8 f33)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)
(above f9 f30)
(above f9 f31)
(above f9 f32)
(above f9 f33)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)
(above f10 f30)
(above f10 f31)
(above f10 f32)
(above f10 f33)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)
(above f11 f30)
(above f11 f31)
(above f11 f32)
(above f11 f33)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)
(above f12 f30)
(above f12 f31)
(above f12 f32)
(above f12 f33)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)
(above f13 f30)
(above f13 f31)
(above f13 f32)
(above f13 f33)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)
(above f14 f30)
(above f14 f31)
(above f14 f32)
(above f14 f33)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)
(above f15 f30)
(above f15 f31)
(above f15 f32)
(above f15 f33)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)
(above f16 f30)
(above f16 f31)
(above f16 f32)
(above f16 f33)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)
(above f17 f30)
(above f17 f31)
(above f17 f32)
(above f17 f33)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)
(above f18 f30)
(above f18 f31)
(above f18 f32)
(above f18 f33)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)
(above f19 f30)
(above f19 f31)
(above f19 f32)
(above f19 f33)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)
(above f20 f30)
(above f20 f31)
(above f20 f32)
(above f20 f33)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)
(above f21 f30)
(above f21 f31)
(above f21 f32)
(above f21 f33)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)
(above f22 f30)
(above f22 f31)
(above f22 f32)
(above f22 f33)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)
(above f23 f30)
(above f23 f31)
(above f23 f32)
(above f23 f33)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)
(above f24 f30)
(above f24 f31)
(above f24 f32)
(above f24 f33)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)
(above f25 f30)
(above f25 f31)
(above f25 f32)
(above f25 f33)

(above f26 f27)
(above f26 f28)
(above f26 f29)
(above f26 f30)
(above f26 f31)
(above f26 f32)
(above f26 f33)

(above f27 f28)
(above f27 f29)
(above f27 f30)
(above f27 f31)
(above f27 f32)
(above f27 f33)

(above f28 f29)
(above f28 f30)
(above f28 f31)
(above f28 f32)
(above f28 f33)

(above f29 f30)
(above f29 f31)
(above f29 f32)
(above f29 f33)

(above f30 f31)
(above f30 f32)
(above f30 f33)

(above f31 f32)
(above f31 f33)

(above f32 f33)



(origin p0 f30)
(destin p0 f7)

(origin p1 f19)
(destin p1 f14)

(origin p2 f0)
(destin p2 f3)

(origin p3 f17)
(destin p3 f8)

(origin p4 f25)
(destin p4 f5)

(origin p5 f4)
(destin p5 f28)

(origin p6 f3)
(destin p6 f31)

(origin p7 f16)
(destin p7 f25)

(origin p8 f4)
(destin p8 f14)

(origin p9 f10)
(destin p9 f31)

(origin p10 f8)
(destin p10 f31)

(origin p11 f8)
(destin p11 f23)

(origin p12 f10)
(destin p12 f15)

(origin p13 f33)
(destin p13 f3)

(origin p14 f25)
(destin p14 f26)

(origin p15 f18)
(destin p15 f22)

(origin p16 f7)
(destin p16 f3)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
(served p15)
(served p16)
))
)


","board f0 p2 (1)
up f0 f10 (1)
board f10 p12 (1)
board f10 p9 (1)
down f10 f4 (1)
board f4 p5 (1)
board f4 p8 (1)
up f4 f15 (1)
depart f15 p12 (1)
up f15 f16 (1)
board f16 p7 (1)
up f16 f17 (1)
board f17 p3 (1)
down f17 f8 (1)
board f8 p10 (1)
board f8 p11 (1)
depart f8 p3 (1)
up f8 f18 (1)
board f18 p15 (1)
up f18 f19 (1)
board f19 p1 (1)
down f19 f14 (1)
depart f14 p8 (1)
depart f14 p1 (1)
up f14 f22 (1)
depart f22 p15 (1)
up f22 f23 (1)
depart f23 p11 (1)
up f23 f25 (1)
board f25 p14 (1)
board f25 p4 (1)
depart f25 p7 (1)
down f25 f5 (1)
depart f5 p4 (1)
up f5 f26 (1)
depart f26 p14 (1)
up f26 f28 (1)
depart f28 p5 (1)
up f28 f30 (1)
board f30 p0 (1)
down f30 f7 (1)
board f7 p16 (1)
depart f7 p0 (1)
up f7 f33 (1)
board f33 p13 (1)
down f33 f3 (1)
board f3 p6 (1)
depart f3 p2 (1)
depart f3 p16 (1)
depart f3 p13 (1)
up f3 f31 (1)
depart f31 p9 (1)
depart f31 p6 (1)
depart f31 p10 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f34-p17-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 p15 p16 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 
             f30 f31 f32 f33 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)
(above f0 f30)
(above f0 f31)
(above f0 f32)
(above f0 f33)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)
(above f1 f30)
(above f1 f31)
(above f1 f32)
(above f1 f33)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)
(above f2 f30)
(above f2 f31)
(above f2 f32)
(above f2 f33)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)
(above f3 f30)
(above f3 f31)
(above f3 f32)
(above f3 f33)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)
(above f4 f30)
(above f4 f31)
(above f4 f32)
(above f4 f33)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)
(above f5 f30)
(above f5 f31)
(above f5 f32)
(above f5 f33)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)
(above f6 f30)
(above f6 f31)
(above f6 f32)
(above f6 f33)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)
(above f7 f30)
(above f7 f31)
(above f7 f32)
(above f7 f33)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)
(above f8 f30)
(above f8 f31)
(above f8 f32)
(above f8 f33)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)
(above f9 f30)
(above f9 f31)
(above f9 f32)
(above f9 f33)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)
(above f10 f30)
(above f10 f31)
(above f10 f32)
(above f10 f33)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)
(above f11 f30)
(above f11 f31)
(above f11 f32)
(above f11 f33)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)
(above f12 f30)
(above f12 f31)
(above f12 f32)
(above f12 f33)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)
(above f13 f30)
(above f13 f31)
(above f13 f32)
(above f13 f33)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)
(above f14 f30)
(above f14 f31)
(above f14 f32)
(above f14 f33)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)
(above f15 f30)
(above f15 f31)
(above f15 f32)
(above f15 f33)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)
(above f16 f30)
(above f16 f31)
(above f16 f32)
(above f16 f33)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)
(above f17 f30)
(above f17 f31)
(above f17 f32)
(above f17 f33)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)
(above f18 f30)
(above f18 f31)
(above f18 f32)
(above f18 f33)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)
(above f19 f30)
(above f19 f31)
(above f19 f32)
(above f19 f33)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)
(above f20 f30)
(above f20 f31)
(above f20 f32)
(above f20 f33)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)
(above f21 f30)
(above f21 f31)
(above f21 f32)
(above f21 f33)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)
(above f22 f30)
(above f22 f31)
(above f22 f32)
(above f22 f33)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)
(above f23 f30)
(above f23 f31)
(above f23 f32)
(above f23 f33)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)
(above f24 f30)
(above f24 f31)
(above f24 f32)
(above f24 f33)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)
(above f25 f30)
(above f25 f31)
(above f25 f32)
(above f25 f33)

(above f26 f27)
(above f26 f28)
(above f26 f29)
(above f26 f30)
(above f26 f31)
(above f26 f32)
(above f26 f33)

(above f27 f28)
(above f27 f29)
(above f27 f30)
(above f27 f31)
(above f27 f32)
(above f27 f33)

(above f28 f29)
(above f28 f30)
(above f28 f31)
(above f28 f32)
(above f28 f33)

(above f29 f30)
(above f29 f31)
(above f29 f32)
(above f29 f33)

(above f30 f31)
(above f30 f32)
(above f30 f33)

(above f31 f32)
(above f31 f33)

(above f32 f33)



(origin p0 f25)
(destin p0 f2)

(origin p1 f2)
(destin p1 f22)

(origin p2 f33)
(destin p2 f26)

(origin p3 f28)
(destin p3 f6)

(origin p4 f15)
(destin p4 f31)

(origin p5 f6)
(destin p5 f17)

(origin p6 f19)
(destin p6 f4)

(origin p7 f12)
(destin p7 f8)

(origin p8 f17)
(destin p8 f1)

(origin p9 f26)
(destin p9 f6)

(origin p10 f31)
(destin p10 f12)

(origin p11 f14)
(destin p11 f8)

(origin p12 f5)
(destin p12 f29)

(origin p13 f22)
(destin p13 f28)

(origin p14 f3)
(destin p14 f19)

(origin p15 f0)
(destin p15 f3)

(origin p16 f21)
(destin p16 f2)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
(served p15)
(served p16)
))
)


","board f0 p15 (1)
up f0 f14 (1)
board f14 p11 (1)
down f14 f3 (1)
board f3 p14 (1)
depart f3 p15 (1)
up f3 f15 (1)
board f15 p4 (1)
down f15 f5 (1)
board f5 p12 (1)
up f5 f19 (1)
board f19 p6 (1)
depart f19 p14 (1)
down f19 f4 (1)
depart f4 p6 (1)
up f4 f21 (1)
board f21 p16 (1)
up f21 f25 (1)
board f25 p0 (1)
down f25 f2 (1)
board f2 p1 (1)
depart f2 p16 (1)
depart f2 p0 (1)
up f2 f22 (1)
board f22 p13 (1)
depart f22 p1 (1)
up f22 f28 (1)
board f28 p3 (1)
depart f28 p13 (1)
up f28 f29 (1)
depart f29 p12 (1)
up f29 f31 (1)
board f31 p10 (1)
depart f31 p4 (1)
down f31 f12 (1)
board f12 p7 (1)
depart f12 p10 (1)
down f12 f8 (1)
depart f8 p7 (1)
depart f8 p11 (1)
up f8 f33 (1)
board f33 p2 (1)
down f33 f26 (1)
board f26 p9 (1)
depart f26 p2 (1)
down f26 f6 (1)
board f6 p5 (1)
depart f6 p9 (1)
depart f6 p3 (1)
up f6 f17 (1)
board f17 p8 (1)
depart f17 p5 (1)
down f17 f1 (1)
depart f1 p8 (1)"
elevators,"(define (domain miconic)
  (:requirements :strips)
  (:types passenger - object
          floor - object
         )

(:predicates 
(origin ?person - passenger ?floor - floor)

(destin ?person - passenger ?floor - floor)

(above ?floor1 - floor  ?floor2 - floor)

(boarded ?person - passenger)

(not-boarded ?person - passenger)

(served ?person - passenger)

(not-served ?person - passenger)

(lift-at ?floor - floor)
)

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f34-p17-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             p10 p11 p12 p13 p14 p15 p16 - passenger
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 
             f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 
             f30 f31 f32 f33 - floor)


(:init
(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)
(above f0 f20)
(above f0 f21)
(above f0 f22)
(above f0 f23)
(above f0 f24)
(above f0 f25)
(above f0 f26)
(above f0 f27)
(above f0 f28)
(above f0 f29)
(above f0 f30)
(above f0 f31)
(above f0 f32)
(above f0 f33)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)
(above f1 f20)
(above f1 f21)
(above f1 f22)
(above f1 f23)
(above f1 f24)
(above f1 f25)
(above f1 f26)
(above f1 f27)
(above f1 f28)
(above f1 f29)
(above f1 f30)
(above f1 f31)
(above f1 f32)
(above f1 f33)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)
(above f2 f20)
(above f2 f21)
(above f2 f22)
(above f2 f23)
(above f2 f24)
(above f2 f25)
(above f2 f26)
(above f2 f27)
(above f2 f28)
(above f2 f29)
(above f2 f30)
(above f2 f31)
(above f2 f32)
(above f2 f33)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)
(above f3 f20)
(above f3 f21)
(above f3 f22)
(above f3 f23)
(above f3 f24)
(above f3 f25)
(above f3 f26)
(above f3 f27)
(above f3 f28)
(above f3 f29)
(above f3 f30)
(above f3 f31)
(above f3 f32)
(above f3 f33)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)
(above f4 f20)
(above f4 f21)
(above f4 f22)
(above f4 f23)
(above f4 f24)
(above f4 f25)
(above f4 f26)
(above f4 f27)
(above f4 f28)
(above f4 f29)
(above f4 f30)
(above f4 f31)
(above f4 f32)
(above f4 f33)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)
(above f5 f20)
(above f5 f21)
(above f5 f22)
(above f5 f23)
(above f5 f24)
(above f5 f25)
(above f5 f26)
(above f5 f27)
(above f5 f28)
(above f5 f29)
(above f5 f30)
(above f5 f31)
(above f5 f32)
(above f5 f33)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)
(above f6 f20)
(above f6 f21)
(above f6 f22)
(above f6 f23)
(above f6 f24)
(above f6 f25)
(above f6 f26)
(above f6 f27)
(above f6 f28)
(above f6 f29)
(above f6 f30)
(above f6 f31)
(above f6 f32)
(above f6 f33)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)
(above f7 f20)
(above f7 f21)
(above f7 f22)
(above f7 f23)
(above f7 f24)
(above f7 f25)
(above f7 f26)
(above f7 f27)
(above f7 f28)
(above f7 f29)
(above f7 f30)
(above f7 f31)
(above f7 f32)
(above f7 f33)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)
(above f8 f20)
(above f8 f21)
(above f8 f22)
(above f8 f23)
(above f8 f24)
(above f8 f25)
(above f8 f26)
(above f8 f27)
(above f8 f28)
(above f8 f29)
(above f8 f30)
(above f8 f31)
(above f8 f32)
(above f8 f33)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)
(above f9 f20)
(above f9 f21)
(above f9 f22)
(above f9 f23)
(above f9 f24)
(above f9 f25)
(above f9 f26)
(above f9 f27)
(above f9 f28)
(above f9 f29)
(above f9 f30)
(above f9 f31)
(above f9 f32)
(above f9 f33)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)
(above f10 f20)
(above f10 f21)
(above f10 f22)
(above f10 f23)
(above f10 f24)
(above f10 f25)
(above f10 f26)
(above f10 f27)
(above f10 f28)
(above f10 f29)
(above f10 f30)
(above f10 f31)
(above f10 f32)
(above f10 f33)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)
(above f11 f20)
(above f11 f21)
(above f11 f22)
(above f11 f23)
(above f11 f24)
(above f11 f25)
(above f11 f26)
(above f11 f27)
(above f11 f28)
(above f11 f29)
(above f11 f30)
(above f11 f31)
(above f11 f32)
(above f11 f33)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)
(above f12 f20)
(above f12 f21)
(above f12 f22)
(above f12 f23)
(above f12 f24)
(above f12 f25)
(above f12 f26)
(above f12 f27)
(above f12 f28)
(above f12 f29)
(above f12 f30)
(above f12 f31)
(above f12 f32)
(above f12 f33)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)
(above f13 f20)
(above f13 f21)
(above f13 f22)
(above f13 f23)
(above f13 f24)
(above f13 f25)
(above f13 f26)
(above f13 f27)
(above f13 f28)
(above f13 f29)
(above f13 f30)
(above f13 f31)
(above f13 f32)
(above f13 f33)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)
(above f14 f20)
(above f14 f21)
(above f14 f22)
(above f14 f23)
(above f14 f24)
(above f14 f25)
(above f14 f26)
(above f14 f27)
(above f14 f28)
(above f14 f29)
(above f14 f30)
(above f14 f31)
(above f14 f32)
(above f14 f33)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)
(above f15 f20)
(above f15 f21)
(above f15 f22)
(above f15 f23)
(above f15 f24)
(above f15 f25)
(above f15 f26)
(above f15 f27)
(above f15 f28)
(above f15 f29)
(above f15 f30)
(above f15 f31)
(above f15 f32)
(above f15 f33)

(above f16 f17)
(above f16 f18)
(above f16 f19)
(above f16 f20)
(above f16 f21)
(above f16 f22)
(above f16 f23)
(above f16 f24)
(above f16 f25)
(above f16 f26)
(above f16 f27)
(above f16 f28)
(above f16 f29)
(above f16 f30)
(above f16 f31)
(above f16 f32)
(above f16 f33)

(above f17 f18)
(above f17 f19)
(above f17 f20)
(above f17 f21)
(above f17 f22)
(above f17 f23)
(above f17 f24)
(above f17 f25)
(above f17 f26)
(above f17 f27)
(above f17 f28)
(above f17 f29)
(above f17 f30)
(above f17 f31)
(above f17 f32)
(above f17 f33)

(above f18 f19)
(above f18 f20)
(above f18 f21)
(above f18 f22)
(above f18 f23)
(above f18 f24)
(above f18 f25)
(above f18 f26)
(above f18 f27)
(above f18 f28)
(above f18 f29)
(above f18 f30)
(above f18 f31)
(above f18 f32)
(above f18 f33)

(above f19 f20)
(above f19 f21)
(above f19 f22)
(above f19 f23)
(above f19 f24)
(above f19 f25)
(above f19 f26)
(above f19 f27)
(above f19 f28)
(above f19 f29)
(above f19 f30)
(above f19 f31)
(above f19 f32)
(above f19 f33)

(above f20 f21)
(above f20 f22)
(above f20 f23)
(above f20 f24)
(above f20 f25)
(above f20 f26)
(above f20 f27)
(above f20 f28)
(above f20 f29)
(above f20 f30)
(above f20 f31)
(above f20 f32)
(above f20 f33)

(above f21 f22)
(above f21 f23)
(above f21 f24)
(above f21 f25)
(above f21 f26)
(above f21 f27)
(above f21 f28)
(above f21 f29)
(above f21 f30)
(above f21 f31)
(above f21 f32)
(above f21 f33)

(above f22 f23)
(above f22 f24)
(above f22 f25)
(above f22 f26)
(above f22 f27)
(above f22 f28)
(above f22 f29)
(above f22 f30)
(above f22 f31)
(above f22 f32)
(above f22 f33)

(above f23 f24)
(above f23 f25)
(above f23 f26)
(above f23 f27)
(above f23 f28)
(above f23 f29)
(above f23 f30)
(above f23 f31)
(above f23 f32)
(above f23 f33)

(above f24 f25)
(above f24 f26)
(above f24 f27)
(above f24 f28)
(above f24 f29)
(above f24 f30)
(above f24 f31)
(above f24 f32)
(above f24 f33)

(above f25 f26)
(above f25 f27)
(above f25 f28)
(above f25 f29)
(above f25 f30)
(above f25 f31)
(above f25 f32)
(above f25 f33)

(above f26 f27)
(above f26 f28)
(above f26 f29)
(above f26 f30)
(above f26 f31)
(above f26 f32)
(above f26 f33)

(above f27 f28)
(above f27 f29)
(above f27 f30)
(above f27 f31)
(above f27 f32)
(above f27 f33)

(above f28 f29)
(above f28 f30)
(above f28 f31)
(above f28 f32)
(above f28 f33)

(above f29 f30)
(above f29 f31)
(above f29 f32)
(above f29 f33)

(above f30 f31)
(above f30 f32)
(above f30 f33)

(above f31 f32)
(above f31 f33)

(above f32 f33)



(origin p0 f3)
(destin p0 f13)

(origin p1 f10)
(destin p1 f9)

(origin p2 f23)
(destin p2 f32)

(origin p3 f15)
(destin p3 f12)

(origin p4 f3)
(destin p4 f4)

(origin p5 f31)
(destin p5 f18)

(origin p6 f28)
(destin p6 f30)

(origin p7 f14)
(destin p7 f25)

(origin p8 f14)
(destin p8 f11)

(origin p9 f26)
(destin p9 f16)

(origin p10 f28)
(destin p10 f23)

(origin p11 f6)
(destin p11 f21)

(origin p12 f8)
(destin p12 f20)

(origin p13 f30)
(destin p13 f16)

(origin p14 f31)
(destin p14 f27)

(origin p15 f17)
(destin p15 f0)

(origin p16 f6)
(destin p16 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
(served p10)
(served p11)
(served p12)
(served p13)
(served p14)
(served p15)
(served p16)
))
)


","up f0 f10 (1)
board f10 p1 (1)
down f10 f3 (1)
board f3 p0 (1)
board f3 p4 (1)
up f3 f13 (1)
depart f13 p0 (1)
down f13 f4 (1)
depart f4 p4 (1)
up f4 f14 (1)
board f14 p7 (1)
board f14 p8 (1)
down f14 f11 (1)
depart f11 p8 (1)
down f11 f6 (1)
board f6 p11 (1)
board f6 p16 (1)
down f6 f1 (1)
depart f1 p16 (1)
up f1 f15 (1)
board f15 p3 (1)
down f15 f12 (1)
depart f12 p3 (1)
down f12 f8 (1)
board f8 p12 (1)
up f8 f17 (1)
board f17 p15 (1)
down f17 f0 (1)
depart f0 p15 (1)
up f0 f20 (1)
depart f20 p12 (1)
down f20 f9 (1)
depart f9 p1 (1)
up f9 f21 (1)
depart f21 p11 (1)
up f21 f25 (1)
depart f25 p7 (1)
up f25 f26 (1)
board f26 p9 (1)
up f26 f28 (1)
board f28 p10 (1)
board f28 p6 (1)
down f28 f23 (1)
board f23 p2 (1)
depart f23 p10 (1)
up f23 f30 (1)
board f30 p13 (1)
depart f30 p6 (1)
down f30 f16 (1)
depart f16 p9 (1)
depart f16 p13 (1)
up f16 f31 (1)
board f31 p14 (1)
board f31 p5 (1)
down f31 f18 (1)
depart f18 p5 (1)
up f18 f27 (1)
depart f27 p14 (1)
up f27 f32 (1)
depart f32 p2 (1)"
freecell,"(define (domain freecell)
  (:requirements :strips) 
  (:predicates (on ?c1 ?c2)
               (incell ?c)
               (clear ?c)
               (cellspace ?n)
               (colspace ?n)
               (home ?c)
               (bottomcol ?c)
               (canstack ?c1 ?c2)
               (suit ?c ?s)
               (value ?c ?v)
               (successor ?n1 ?n0)
 )
  
  (:action move
           :parameters (?card ?oldcard ?newcard)
           :precondition (and (clear ?card) 
                              (clear ?newcard)
                              (canstack ?card ?newcard)
                              (on ?card ?oldcard))
           :effect (and
                    (on ?card ?newcard)
                    (clear ?oldcard)
                    (not (on ?card ?oldcard))
                    (not (clear ?newcard))))

  (:action move-b
           :parameters (?card ?newcard ?cols ?ncols)
           :precondition (and (clear ?card) 
                              (bottomcol ?card)
                              (clear ?newcard)
                              (canstack ?card ?newcard)
                              (colspace ?cols)
                              (successor ?ncols ?cols))
           :effect (and (on ?card ?newcard)
                        (colspace ?ncols)
                        (not (bottomcol ?card))
                        (not (clear ?newcard))
                        (not (colspace ?cols))))


  (:action sendtofree 
           :parameters (?card ?oldcard ?cells ?ncells)
           :precondition (and
                          (clear ?card) 
                          (on ?card ?oldcard)
                          (cellspace ?cells)
                          (successor ?cells ?ncells))
           :effect (and
                    (incell ?card) 
                    (clear ?oldcard)
                    (cellspace ?ncells)
                    (not (on ?card ?oldcard))
                    (not (clear ?card))
                    (not (cellspace ?cells))))

  (:action sendtofree-b 
           :parameters (?card ?cells ?ncells ?cols ?ncols)
           :precondition (and (clear ?card) 
                              (bottomcol ?card)
                              (cellspace ?cells)
                              (successor ?cells ?ncells)
                              (colspace ?cols)
                              (successor ?ncols ?cols))
           :effect (and
                    (incell ?card)
                    (colspace ?ncols)
                    (cellspace ?ncells)
                    (not (bottomcol ?card))
                    (not (clear ?card))
                    (not (colspace ?cols))
                    (not (cellspace ?cells))))

(:action sendtonewcol
         :parameters (?card ?oldcard ?cols ?ncols)
         :precondition (and
                        (clear ?card)
                        (colspace ?cols)
                        (successor ?cols ?ncols)
                        (on ?card ?oldcard))
         :effect (and
                  (bottomcol ?card) 
                  (clear ?oldcard)
                  (colspace ?ncols)
                  (not (on ?card ?oldcard))
                  (not (colspace ?cols))))

(:action sendtohome
         :parameters (?card ?oldcard ?suit ?vcard ?homecard ?vhomecard)
         :precondition (and
                        (clear ?card) 
                        (on ?card ?oldcard)
                        (home ?homecard)
                        (suit ?card ?suit)
                        (suit ?homecard ?suit)
                        (value ?card ?vcard)
                        (value ?homecard ?vhomecard)
                        (successor ?vcard ?vhomecard))
         :effect (and (home ?card)
                      (clear ?oldcard)
                      (not (on ?card ?oldcard))
                      (not (home ?homecard))
                      (not (clear ?card))))

(:action sendtohome-b
         :parameters (?card ?suit ?vcard ?homecard
                            ?vhomecard ?cols ?ncols)
         :precondition (and (clear ?card) 
                            (bottomcol ?card)
                            (home ?homecard)
                            (suit ?card ?suit)
                            (suit ?homecard ?suit)
                            (value ?card ?vcard)
                            (value ?homecard ?vhomecard)
                            (successor ?vcard ?vhomecard)
                            (colspace ?cols)
                            (successor ?ncols ?cols))
         :effect (and (home ?card)
                      (colspace ?ncols)
                      (not (home ?homecard))
                      (not (clear ?card))
                      (not (bottomcol ?card))
                      (not (colspace ?cols))))

(:action homefromfreecell
         :parameters (?card ?suit ?vcard
                            ?homecard ?vhomecard ?cells ?ncells)
         :precondition (and 
                        (incell ?card)
                        (home ?homecard) 
                        (suit ?card ?suit)
                        (suit ?homecard ?suit)
                        (value ?card ?vcard)
                        (value ?homecard ?vhomecard)
                        (successor ?vcard ?vhomecard)
                        (cellspace ?cells)
                        (successor ?ncells ?cells))
         :effect (and
                  (home ?card)
                  (cellspace ?ncells)
                  (not (incell ?card))
                  (not (cellspace ?cells))
                  (not (home ?homecard))))

(:action colfromfreecell
         :parameters (?card ?newcard ?cells ?ncells)
         :precondition (and  (incell ?card)
                             (clear ?newcard)
                             (canstack ?card ?newcard)
                             (cellspace ?cells)
                             (successor ?ncells ?cells))
         :effect (and (cellspace ?ncells)
                      (clear ?card)
                      (on ?card ?newcard)
                      (not (incell ?card))
                      (not (cellspace ?cells))
                      (not (clear ?newcard))))

(:action newcolfromfreecell
         :parameters (?card ?cols ?ncols ?cells ?ncells)
         :precondition (and (incell ?card)
                            (colspace ?cols)
                            (cellspace ?cells)
                            (successor ?cols ?ncols)
                            (successor ?ncells ?cells))
         :effect (and (bottomcol ?card) 
                      (clear ?card)
                      (colspace ?ncols)
                      (cellspace ?ncells)
                      (not (incell ?card))
                      (not (colspace ?cols))
                      (not (cellspace ?cells)))))

","(define (problem FreeCell2-4)
(:domain freecell)
(:objects
        diamond club heart spade 
        N0 N1 N2 N3 N4 spadeA
        diamondA
        club2
        heart2
        spade2
        heartA
        diamond2
        clubA
        diamond0
        club0
        heart0
        spade0
        
)
(:init
        (successor N1 N0)
        (successor N2 N1)
        (successor N3 N2)
        (successor N4 N3)
        (cellspace N2)
        (clear spadeA)
        (on spadeA spade2)
        (bottomcol spade2)
        (clear diamondA)
        (on diamondA heartA)
        (bottomcol heartA)
        (clear club2)
        (on club2 diamond2)
        (bottomcol diamond2)
        (clear heart2)
        (on heart2 clubA)
        (bottomcol clubA)
        (colspace N0)
        (value spadeA N1)
        (suit spadeA spade)
        (canstack spadeA diamond2)
        (canstack spadeA heart2)
        (value diamondA N1)
        (suit diamondA diamond)
        (canstack diamondA club2)
        (canstack diamondA spade2)
        (value club2 N2)
        (suit club2 club)
        (value heart2 N2)
        (suit heart2 heart)
        (value spade2 N2)
        (suit spade2 spade)
        (value heartA N1)
        (suit heartA heart)
        (canstack heartA club2)
        (canstack heartA spade2)
        (value diamond2 N2)
        (suit diamond2 diamond)
        (value clubA N1)
        (suit clubA club)
        (canstack clubA diamond2)
        (canstack clubA heart2)
        (home diamond0)
        (value diamond0 N0)
        (suit diamond0 diamond)
        (home club0)
        (value club0 N0)
        (suit club0 club)
        (home heart0)
        (value heart0 N0)
        (suit heart0 heart)
        (home spade0)
        (value spade0 N0)
        (suit spade0 spade)
)
(:goal (and
        (home diamond2)
        (home club2)
        (home heart2)
        (home spade2)
)))

","sendtohome diamonda hearta diamond n1 diamond0 n0 (1)
sendtohome-b hearta heart n1 heart0 n0 n0 n1 (1)
sendtohome heart2 cluba heart n2 hearta n1 (1)
sendtohome-b cluba club n1 club0 n0 n1 n2 (1)
sendtohome club2 diamond2 club n2 cluba n1 (1)
sendtohome spadea spade2 spade n1 spade0 n0 (1)
sendtohome-b diamond2 diamond n2 diamonda n1 n2 n3 (1)
sendtohome-b spade2 spade n2 spadea n1 n3 n4 (1)"
freecell,"(define (domain freecell)
  (:requirements :strips) 
  (:predicates (on ?c1 ?c2)
               (incell ?c)
               (clear ?c)
               (cellspace ?n)
               (colspace ?n)
               (home ?c)
               (bottomcol ?c)
               (canstack ?c1 ?c2)
               (suit ?c ?s)
               (value ?c ?v)
               (successor ?n1 ?n0)
 )
  
  (:action move
           :parameters (?card ?oldcard ?newcard)
           :precondition (and (clear ?card) 
                              (clear ?newcard)
                              (canstack ?card ?newcard)
                              (on ?card ?oldcard))
           :effect (and
                    (on ?card ?newcard)
                    (clear ?oldcard)
                    (not (on ?card ?oldcard))
                    (not (clear ?newcard))))

  (:action move-b
           :parameters (?card ?newcard ?cols ?ncols)
           :precondition (and (clear ?card) 
                              (bottomcol ?card)
                              (clear ?newcard)
                              (canstack ?card ?newcard)
                              (colspace ?cols)
                              (successor ?ncols ?cols))
           :effect (and (on ?card ?newcard)
                        (colspace ?ncols)
                        (not (bottomcol ?card))
                        (not (clear ?newcard))
                        (not (colspace ?cols))))


  (:action sendtofree 
           :parameters (?card ?oldcard ?cells ?ncells)
           :precondition (and
                          (clear ?card) 
                          (on ?card ?oldcard)
                          (cellspace ?cells)
                          (successor ?cells ?ncells))
           :effect (and
                    (incell ?card) 
                    (clear ?oldcard)
                    (cellspace ?ncells)
                    (not (on ?card ?oldcard))
                    (not (clear ?card))
                    (not (cellspace ?cells))))

  (:action sendtofree-b 
           :parameters (?card ?cells ?ncells ?cols ?ncols)
           :precondition (and (clear ?card) 
                              (bottomcol ?card)
                              (cellspace ?cells)
                              (successor ?cells ?ncells)
                              (colspace ?cols)
                              (successor ?ncols ?cols))
           :effect (and
                    (incell ?card)
                    (colspace ?ncols)
                    (cellspace ?ncells)
                    (not (bottomcol ?card))
                    (not (clear ?card))
                    (not (colspace ?cols))
                    (not (cellspace ?cells))))

(:action sendtonewcol
         :parameters (?card ?oldcard ?cols ?ncols)
         :precondition (and
                        (clear ?card)
                        (colspace ?cols)
                        (successor ?cols ?ncols)
                        (on ?card ?oldcard))
         :effect (and
                  (bottomcol ?card) 
                  (clear ?oldcard)
                  (colspace ?ncols)
                  (not (on ?card ?oldcard))
                  (not (colspace ?cols))))

(:action sendtohome
         :parameters (?card ?oldcard ?suit ?vcard ?homecard ?vhomecard)
         :precondition (and
                        (clear ?card) 
                        (on ?card ?oldcard)
                        (home ?homecard)
                        (suit ?card ?suit)
                        (suit ?homecard ?suit)
                        (value ?card ?vcard)
                        (value ?homecard ?vhomecard)
                        (successor ?vcard ?vhomecard))
         :effect (and (home ?card)
                      (clear ?oldcard)
                      (not (on ?card ?oldcard))
                      (not (home ?homecard))
                      (not (clear ?card))))

(:action sendtohome-b
         :parameters (?card ?suit ?vcard ?homecard
                            ?vhomecard ?cols ?ncols)
         :precondition (and (clear ?card) 
                            (bottomcol ?card)
                            (home ?homecard)
                            (suit ?card ?suit)
                            (suit ?homecard ?suit)
                            (value ?card ?vcard)
                            (value ?homecard ?vhomecard)
                            (successor ?vcard ?vhomecard)
                            (colspace ?cols)
                            (successor ?ncols ?cols))
         :effect (and (home ?card)
                      (colspace ?ncols)
                      (not (home ?homecard))
                      (not (clear ?card))
                      (not (bottomcol ?card))
                      (not (colspace ?cols))))

(:action homefromfreecell
         :parameters (?card ?suit ?vcard
                            ?homecard ?vhomecard ?cells ?ncells)
         :precondition (and 
                        (incell ?card)
                        (home ?homecard) 
                        (suit ?card ?suit)
                        (suit ?homecard ?suit)
                        (value ?card ?vcard)
                        (value ?homecard ?vhomecard)
                        (successor ?vcard ?vhomecard)
                        (cellspace ?cells)
                        (successor ?ncells ?cells))
         :effect (and
                  (home ?card)
                  (cellspace ?ncells)
                  (not (incell ?card))
                  (not (cellspace ?cells))
                  (not (home ?homecard))))

(:action colfromfreecell
         :parameters (?card ?newcard ?cells ?ncells)
         :precondition (and  (incell ?card)
                             (clear ?newcard)
                             (canstack ?card ?newcard)
                             (cellspace ?cells)
                             (successor ?ncells ?cells))
         :effect (and (cellspace ?ncells)
                      (clear ?card)
                      (on ?card ?newcard)
                      (not (incell ?card))
                      (not (cellspace ?cells))
                      (not (clear ?newcard))))

(:action newcolfromfreecell
         :parameters (?card ?cols ?ncols ?cells ?ncells)
         :precondition (and (incell ?card)
                            (colspace ?cols)
                            (cellspace ?cells)
                            (successor ?cols ?ncols)
                            (successor ?ncells ?cells))
         :effect (and (bottomcol ?card) 
                      (clear ?card)
                      (colspace ?ncols)
                      (cellspace ?ncells)
                      (not (incell ?card))
                      (not (colspace ?cols))
                      (not (cellspace ?cells)))))

","(define (problem FreeCell3-4)
(:domain freecell)
(:objects
        diamond club heart spade 
        N0 N1 N2 N3 N4 N5 spade3
        club2
        spade2
        clubA
        heart3
        heart2
        diamond3
        club3
        diamondA
        diamond2
        heartA
        spadeA
        diamond0
        club0
        heart0
        spade0
        
)
(:init
        (successor N1 N0)
        (successor N2 N1)
        (successor N3 N2)
        (successor N4 N3)
        (successor N5 N4)
        (cellspace N2)
        (clear spade3)
        (on spade3 heart2)
        (on heart2 heartA)
        (bottomcol heartA)
        (clear club2)
        (on club2 diamond3)
        (on diamond3 spadeA)
        (bottomcol spadeA)
        (clear spade2)
        (on spade2 club3)
        (bottomcol club3)
        (clear clubA)
        (on clubA diamondA)
        (bottomcol diamondA)
        (clear heart3)
        (on heart3 diamond2)
        (bottomcol diamond2)
        (colspace N0)
        (value spade3 N3)
        (suit spade3 spade)
        (value club2 N2)
        (suit club2 club)
        (canstack club2 diamond3)
        (canstack club2 heart3)
        (value spade2 N2)
        (suit spade2 spade)
        (canstack spade2 diamond3)
        (canstack spade2 heart3)
        (value clubA N1)
        (suit clubA club)
        (canstack clubA diamond2)
        (canstack clubA heart2)
        (value heart3 N3)
        (suit heart3 heart)
        (value heart2 N2)
        (suit heart2 heart)
        (canstack heart2 club3)
        (canstack heart2 spade3)
        (value diamond3 N3)
        (suit diamond3 diamond)
        (value club3 N3)
        (suit club3 club)
        (value diamondA N1)
        (suit diamondA diamond)
        (canstack diamondA club2)
        (canstack diamondA spade2)
        (value diamond2 N2)
        (suit diamond2 diamond)
        (canstack diamond2 club3)
        (canstack diamond2 spade3)
        (value heartA N1)
        (suit heartA heart)
        (canstack heartA club2)
        (canstack heartA spade2)
        (value spadeA N1)
        (suit spadeA spade)
        (canstack spadeA diamond2)
        (canstack spadeA heart2)
        (home diamond0)
        (value diamond0 N0)
        (suit diamond0 diamond)
        (home club0)
        (value club0 N0)
        (suit club0 club)
        (home heart0)
        (value heart0 N0)
        (suit heart0 heart)
        (home spade0)
        (value spade0 N0)
        (suit spade0 spade)
)
(:goal (and
        (home diamond3)
        (home club3)
        (home heart3)
        (home spade3)
)))
","sendtohome cluba diamonda club n1 club0 n0 (1)
sendtohome club2 diamond3 club n2 cluba n1 (1)
sendtohome-b diamonda diamond n1 diamond0 n0 n0 n1 (1)
sendtonewcol diamond3 spadea n1 n0 (1)
sendtohome-b spadea spade n1 spade0 n0 n0 n1 (1)
sendtohome spade2 club3 spade n2 spadea n1 (1)
sendtohome spade3 heart2 spade n3 spade2 n2 (1)
sendtofree heart2 hearta n2 n1 (1)
sendtohome-b hearta heart n1 heart0 n0 n1 n2 (1)
homefromfreecell heart2 heart n2 hearta n1 n1 n2 (1)
sendtohome heart3 diamond2 heart n3 heart2 n2 (1)
sendtohome-b club3 club n3 club2 n2 n2 n3 (1)
sendtohome-b diamond2 diamond n2 diamonda n1 n3 n4 (1)
sendtohome-b diamond3 diamond n3 diamond2 n2 n4 n5 (1)"
freecell,"(define (domain freecell)
  (:requirements :strips) 
  (:predicates (on ?c1 ?c2)
               (incell ?c)
               (clear ?c)
               (cellspace ?n)
               (colspace ?n)
               (home ?c)
               (bottomcol ?c)
               (canstack ?c1 ?c2)
               (suit ?c ?s)
               (value ?c ?v)
               (successor ?n1 ?n0)
 )
  
  (:action move
           :parameters (?card ?oldcard ?newcard)
           :precondition (and (clear ?card) 
                              (clear ?newcard)
                              (canstack ?card ?newcard)
                              (on ?card ?oldcard))
           :effect (and
                    (on ?card ?newcard)
                    (clear ?oldcard)
                    (not (on ?card ?oldcard))
                    (not (clear ?newcard))))

  (:action move-b
           :parameters (?card ?newcard ?cols ?ncols)
           :precondition (and (clear ?card) 
                              (bottomcol ?card)
                              (clear ?newcard)
                              (canstack ?card ?newcard)
                              (colspace ?cols)
                              (successor ?ncols ?cols))
           :effect (and (on ?card ?newcard)
                        (colspace ?ncols)
                        (not (bottomcol ?card))
                        (not (clear ?newcard))
                        (not (colspace ?cols))))


  (:action sendtofree 
           :parameters (?card ?oldcard ?cells ?ncells)
           :precondition (and
                          (clear ?card) 
                          (on ?card ?oldcard)
                          (cellspace ?cells)
                          (successor ?cells ?ncells))
           :effect (and
                    (incell ?card) 
                    (clear ?oldcard)
                    (cellspace ?ncells)
                    (not (on ?card ?oldcard))
                    (not (clear ?card))
                    (not (cellspace ?cells))))

  (:action sendtofree-b 
           :parameters (?card ?cells ?ncells ?cols ?ncols)
           :precondition (and (clear ?card) 
                              (bottomcol ?card)
                              (cellspace ?cells)
                              (successor ?cells ?ncells)
                              (colspace ?cols)
                              (successor ?ncols ?cols))
           :effect (and
                    (incell ?card)
                    (colspace ?ncols)
                    (cellspace ?ncells)
                    (not (bottomcol ?card))
                    (not (clear ?card))
                    (not (colspace ?cols))
                    (not (cellspace ?cells))))

(:action sendtonewcol
         :parameters (?card ?oldcard ?cols ?ncols)
         :precondition (and
                        (clear ?card)
                        (colspace ?cols)
                        (successor ?cols ?ncols)
                        (on ?card ?oldcard))
         :effect (and
                  (bottomcol ?card) 
                  (clear ?oldcard)
                  (colspace ?ncols)
                  (not (on ?card ?oldcard))
                  (not (colspace ?cols))))

(:action sendtohome
         :parameters (?card ?oldcard ?suit ?vcard ?homecard ?vhomecard)
         :precondition (and
                        (clear ?card) 
                        (on ?card ?oldcard)
                        (home ?homecard)
                        (suit ?card ?suit)
                        (suit ?homecard ?suit)
                        (value ?card ?vcard)
                        (value ?homecard ?vhomecard)
                        (successor ?vcard ?vhomecard))
         :effect (and (home ?card)
                      (clear ?oldcard)
                      (not (on ?card ?oldcard))
                      (not (home ?homecard))
                      (not (clear ?card))))

(:action sendtohome-b
         :parameters (?card ?suit ?vcard ?homecard
                            ?vhomecard ?cols ?ncols)
         :precondition (and (clear ?card) 
                            (bottomcol ?card)
                            (home ?homecard)
                            (suit ?card ?suit)
                            (suit ?homecard ?suit)
                            (value ?card ?vcard)
                            (value ?homecard ?vhomecard)
                            (successor ?vcard ?vhomecard)
                            (colspace ?cols)
                            (successor ?ncols ?cols))
         :effect (and (home ?card)
                      (colspace ?ncols)
                      (not (home ?homecard))
                      (not (clear ?card))
                      (not (bottomcol ?card))
                      (not (colspace ?cols))))

(:action homefromfreecell
         :parameters (?card ?suit ?vcard
                            ?homecard ?vhomecard ?cells ?ncells)
         :precondition (and 
                        (incell ?card)
                        (home ?homecard) 
                        (suit ?card ?suit)
                        (suit ?homecard ?suit)
                        (value ?card ?vcard)
                        (value ?homecard ?vhomecard)
                        (successor ?vcard ?vhomecard)
                        (cellspace ?cells)
                        (successor ?ncells ?cells))
         :effect (and
                  (home ?card)
                  (cellspace ?ncells)
                  (not (incell ?card))
                  (not (cellspace ?cells))
                  (not (home ?homecard))))

(:action colfromfreecell
         :parameters (?card ?newcard ?cells ?ncells)
         :precondition (and  (incell ?card)
                             (clear ?newcard)
                             (canstack ?card ?newcard)
                             (cellspace ?cells)
                             (successor ?ncells ?cells))
         :effect (and (cellspace ?ncells)
                      (clear ?card)
                      (on ?card ?newcard)
                      (not (incell ?card))
                      (not (cellspace ?cells))
                      (not (clear ?newcard))))

(:action newcolfromfreecell
         :parameters (?card ?cols ?ncols ?cells ?ncells)
         :precondition (and (incell ?card)
                            (colspace ?cols)
                            (cellspace ?cells)
                            (successor ?cols ?ncols)
                            (successor ?ncells ?cells))
         :effect (and (bottomcol ?card) 
                      (clear ?card)
                      (colspace ?ncols)
                      (cellspace ?ncells)
                      (not (incell ?card))
                      (not (colspace ?cols))
                      (not (cellspace ?cells)))))

","(define (problem FreeCell4-4)
(:domain freecell)
(:objects
        diamond club heart spade 
        N0 N1 N2 N3 N4 N5 club3
        diamond2
        heart3
        diamond4
        diamondA
        spade3
        clubA
        spadeA
        diamond3
        spade2
        heart2
        heart4
        heartA
        club2
        club4
        spade4
        diamond0
        club0
        heart0
        spade0
        
)
(:init
        (successor N1 N0)
        (successor N2 N1)
        (successor N3 N2)
        (successor N4 N3)
        (successor N5 N4)
        (cellspace N2)
        (clear club3)
        (on club3 spade3)
        (on spade3 heart2)
        (on heart2 spade4)
        (bottomcol spade4)
        (clear diamond2)
        (on diamond2 clubA)
        (on clubA heart4)
        (bottomcol heart4)
        (clear heart3)
        (on heart3 spadeA)
        (on spadeA heartA)
        (bottomcol heartA)
        (clear diamond4)
        (on diamond4 diamond3)
        (on diamond3 club2)
        (bottomcol club2)
        (clear diamondA)
        (on diamondA spade2)
        (on spade2 club4)
        (bottomcol club4)
        (colspace N0)
        (value club3 N3)
        (suit club3 club)
        (canstack club3 diamond4)
        (canstack club3 heart4)
        (value diamond2 N2)
        (suit diamond2 diamond)
        (canstack diamond2 club3)
        (canstack diamond2 spade3)
        (value heart3 N3)
        (suit heart3 heart)
        (canstack heart3 club4)
        (canstack heart3 spade4)
        (value diamond4 N4)
        (suit diamond4 diamond)
        (value diamondA N1)
        (suit diamondA diamond)
        (canstack diamondA club2)
        (canstack diamondA spade2)
        (value spade3 N3)
        (suit spade3 spade)
        (canstack spade3 diamond4)
        (canstack spade3 heart4)
        (value clubA N1)
        (suit clubA club)
        (canstack clubA diamond2)
        (canstack clubA heart2)
        (value spadeA N1)
        (suit spadeA spade)
        (canstack spadeA diamond2)
        (canstack spadeA heart2)
        (value diamond3 N3)
        (suit diamond3 diamond)
        (canstack diamond3 club4)
        (canstack diamond3 spade4)
        (value spade2 N2)
        (suit spade2 spade)
        (canstack spade2 diamond3)
        (canstack spade2 heart3)
        (value heart2 N2)
        (suit heart2 heart)
        (canstack heart2 club3)
        (canstack heart2 spade3)
        (value heart4 N4)
        (suit heart4 heart)
        (value heartA N1)
        (suit heartA heart)
        (canstack heartA club2)
        (canstack heartA spade2)
        (value club2 N2)
        (suit club2 club)
        (canstack club2 diamond3)
        (canstack club2 heart3)
        (value club4 N4)
        (suit club4 club)
        (value spade4 N4)
        (suit spade4 spade)
        (home diamond0)
        (value diamond0 N0)
        (suit diamond0 diamond)
        (home club0)
        (value club0 N0)
        (suit club0 club)
        (home heart0)
        (value heart0 N0)
        (suit heart0 heart)
        (home spade0)
        (value spade0 N0)
        (suit spade0 spade)
)
(:goal (and
        (home diamond4)
        (home club4)
        (home heart4)
        (home spade4)
)))

","sendtofree diamond4 diamond3 n2 n1 (1)
sendtohome diamonda spade2 diamond n1 diamond0 n0 (1)
sendtohome diamond2 cluba diamond n2 diamonda n1 (1)
sendtohome cluba heart4 club n1 club0 n0 (1)
sendtohome diamond3 club2 diamond n3 diamond2 n2 (1)
sendtohome-b club2 club n2 cluba n1 n0 n1 (1)
sendtonewcol heart3 spadea n1 n0 (1)
sendtohome spadea hearta spade n1 spade0 n0 (1)
sendtohome club3 spade3 club n3 club2 n2 (1)
sendtohome-b hearta heart n1 heart0 n0 n0 n1 (1)
sendtohome spade2 club4 spade n2 spadea n1 (1)
sendtohome spade3 heart2 spade n3 spade2 n2 (1)
sendtohome heart2 spade4 heart n2 hearta n1 (1)
sendtohome-b club4 club n4 club3 n3 n1 n2 (1)
sendtohome-b spade4 spade n4 spade3 n3 n2 n3 (1)
sendtohome-b heart3 heart n3 heart2 n2 n3 n4 (1)
sendtohome-b heart4 heart n4 heart3 n3 n4 n5 (1)
homefromfreecell diamond4 diamond n4 diamond3 n3 n1 n2 (1)"
freecell,"(define (domain freecell)
  (:requirements :strips) 
  (:predicates (on ?c1 ?c2)
               (incell ?c)
               (clear ?c)
               (cellspace ?n)
               (colspace ?n)
               (home ?c)
               (bottomcol ?c)
               (canstack ?c1 ?c2)
               (suit ?c ?s)
               (value ?c ?v)
               (successor ?n1 ?n0)
 )
  
  (:action move
           :parameters (?card ?oldcard ?newcard)
           :precondition (and (clear ?card) 
                              (clear ?newcard)
                              (canstack ?card ?newcard)
                              (on ?card ?oldcard))
           :effect (and
                    (on ?card ?newcard)
                    (clear ?oldcard)
                    (not (on ?card ?oldcard))
                    (not (clear ?newcard))))

  (:action move-b
           :parameters (?card ?newcard ?cols ?ncols)
           :precondition (and (clear ?card) 
                              (bottomcol ?card)
                              (clear ?newcard)
                              (canstack ?card ?newcard)
                              (colspace ?cols)
                              (successor ?ncols ?cols))
           :effect (and (on ?card ?newcard)
                        (colspace ?ncols)
                        (not (bottomcol ?card))
                        (not (clear ?newcard))
                        (not (colspace ?cols))))


  (:action sendtofree 
           :parameters (?card ?oldcard ?cells ?ncells)
           :precondition (and
                          (clear ?card) 
                          (on ?card ?oldcard)
                          (cellspace ?cells)
                          (successor ?cells ?ncells))
           :effect (and
                    (incell ?card) 
                    (clear ?oldcard)
                    (cellspace ?ncells)
                    (not (on ?card ?oldcard))
                    (not (clear ?card))
                    (not (cellspace ?cells))))

  (:action sendtofree-b 
           :parameters (?card ?cells ?ncells ?cols ?ncols)
           :precondition (and (clear ?card) 
                              (bottomcol ?card)
                              (cellspace ?cells)
                              (successor ?cells ?ncells)
                              (colspace ?cols)
                              (successor ?ncols ?cols))
           :effect (and
                    (incell ?card)
                    (colspace ?ncols)
                    (cellspace ?ncells)
                    (not (bottomcol ?card))
                    (not (clear ?card))
                    (not (colspace ?cols))
                    (not (cellspace ?cells))))

(:action sendtonewcol
         :parameters (?card ?oldcard ?cols ?ncols)
         :precondition (and
                        (clear ?card)
                        (colspace ?cols)
                        (successor ?cols ?ncols)
                        (on ?card ?oldcard))
         :effect (and
                  (bottomcol ?card) 
                  (clear ?oldcard)
                  (colspace ?ncols)
                  (not (on ?card ?oldcard))
                  (not (colspace ?cols))))

(:action sendtohome
         :parameters (?card ?oldcard ?suit ?vcard ?homecard ?vhomecard)
         :precondition (and
                        (clear ?card) 
                        (on ?card ?oldcard)
                        (home ?homecard)
                        (suit ?card ?suit)
                        (suit ?homecard ?suit)
                        (value ?card ?vcard)
                        (value ?homecard ?vhomecard)
                        (successor ?vcard ?vhomecard))
         :effect (and (home ?card)
                      (clear ?oldcard)
                      (not (on ?card ?oldcard))
                      (not (home ?homecard))
                      (not (clear ?card))))

(:action sendtohome-b
         :parameters (?card ?suit ?vcard ?homecard
                            ?vhomecard ?cols ?ncols)
         :precondition (and (clear ?card) 
                            (bottomcol ?card)
                            (home ?homecard)
                            (suit ?card ?suit)
                            (suit ?homecard ?suit)
                            (value ?card ?vcard)
                            (value ?homecard ?vhomecard)
                            (successor ?vcard ?vhomecard)
                            (colspace ?cols)
                            (successor ?ncols ?cols))
         :effect (and (home ?card)
                      (colspace ?ncols)
                      (not (home ?homecard))
                      (not (clear ?card))
                      (not (bottomcol ?card))
                      (not (colspace ?cols))))

(:action homefromfreecell
         :parameters (?card ?suit ?vcard
                            ?homecard ?vhomecard ?cells ?ncells)
         :precondition (and 
                        (incell ?card)
                        (home ?homecard) 
                        (suit ?card ?suit)
                        (suit ?homecard ?suit)
                        (value ?card ?vcard)
                        (value ?homecard ?vhomecard)
                        (successor ?vcard ?vhomecard)
                        (cellspace ?cells)
                        (successor ?ncells ?cells))
         :effect (and
                  (home ?card)
                  (cellspace ?ncells)
                  (not (incell ?card))
                  (not (cellspace ?cells))
                  (not (home ?homecard))))

(:action colfromfreecell
         :parameters (?card ?newcard ?cells ?ncells)
         :precondition (and  (incell ?card)
                             (clear ?newcard)
                             (canstack ?card ?newcard)
                             (cellspace ?cells)
                             (successor ?ncells ?cells))
         :effect (and (cellspace ?ncells)
                      (clear ?card)
                      (on ?card ?newcard)
                      (not (incell ?card))
                      (not (cellspace ?cells))
                      (not (clear ?newcard))))

(:action newcolfromfreecell
         :parameters (?card ?cols ?ncols ?cells ?ncells)
         :precondition (and (incell ?card)
                            (colspace ?cols)
                            (cellspace ?cells)
                            (successor ?cols ?ncols)
                            (successor ?ncells ?cells))
         :effect (and (bottomcol ?card) 
                      (clear ?card)
                      (colspace ?ncols)
                      (cellspace ?ncells)
                      (not (incell ?card))
                      (not (colspace ?cols))
                      (not (cellspace ?cells)))))

","(define (problem FreeCell5-4)
(:domain freecell)
(:objects
        diamond club heart spade 
        N0 N1 N2 N3 N4 N5 club5
        club2
        heart4
        club3
        spade4
        heart3
        diamond3
        spade5
        club4
        diamond2
        diamond4
        heartA
        diamondA
        heart2
        diamond5
        heart5
        spadeA
        spade2
        clubA
        spade3
        diamond0
        club0
        heart0
        spade0
        
)
(:init
        (successor N1 N0)
        (successor N2 N1)
        (successor N3 N2)
        (successor N4 N3)
        (successor N5 N4)
        (cellspace N2)
        (clear club5)
        (on club5 heart3)
        (on heart3 diamond4)
        (on diamond4 heart5)
        (bottomcol heart5)
        (clear club2)
        (on club2 diamond3)
        (on diamond3 heartA)
        (on heartA spadeA)
        (bottomcol spadeA)
        (clear heart4)
        (on heart4 spade5)
        (on spade5 diamondA)
        (on diamondA spade2)
        (bottomcol spade2)
        (clear club3)
        (on club3 club4)
        (on club4 heart2)
        (on heart2 clubA)
        (bottomcol clubA)
        (clear spade4)
        (on spade4 diamond2)
        (on diamond2 diamond5)
        (on diamond5 spade3)
        (bottomcol spade3)
        (colspace N0)
        (value club5 N5)
        (suit club5 club)
        (value club2 N2)
        (suit club2 club)
        (canstack club2 diamond3)
        (canstack club2 heart3)
        (value heart4 N4)
        (suit heart4 heart)
        (canstack heart4 club5)
        (canstack heart4 spade5)
        (value club3 N3)
        (suit club3 club)
        (canstack club3 diamond4)
        (canstack club3 heart4)
        (value spade4 N4)
        (suit spade4 spade)
        (canstack spade4 diamond5)
        (canstack spade4 heart5)
        (value heart3 N3)
        (suit heart3 heart)
        (canstack heart3 club4)
        (canstack heart3 spade4)
        (value diamond3 N3)
        (suit diamond3 diamond)
        (canstack diamond3 club4)
        (canstack diamond3 spade4)
        (value spade5 N5)
        (suit spade5 spade)
        (value club4 N4)
        (suit club4 club)
        (canstack club4 diamond5)
        (canstack club4 heart5)
        (value diamond2 N2)
        (suit diamond2 diamond)
        (canstack diamond2 club3)
        (canstack diamond2 spade3)
        (value diamond4 N4)
        (suit diamond4 diamond)
        (canstack diamond4 club5)
        (canstack diamond4 spade5)
        (value heartA N1)
        (suit heartA heart)
        (canstack heartA club2)
        (canstack heartA spade2)
        (value diamondA N1)
        (suit diamondA diamond)
        (canstack diamondA club2)
        (canstack diamondA spade2)
        (value heart2 N2)
        (suit heart2 heart)
        (canstack heart2 club3)
        (canstack heart2 spade3)
        (value diamond5 N5)
        (suit diamond5 diamond)
        (value heart5 N5)
        (suit heart5 heart)
        (value spadeA N1)
        (suit spadeA spade)
        (canstack spadeA diamond2)
        (canstack spadeA heart2)
        (value spade2 N2)
        (suit spade2 spade)
        (canstack spade2 diamond3)
        (canstack spade2 heart3)
        (value clubA N1)
        (suit clubA club)
        (canstack clubA diamond2)
        (canstack clubA heart2)
        (value spade3 N3)
        (suit spade3 spade)
        (canstack spade3 diamond4)
        (canstack spade3 heart4)
        (home diamond0)
        (value diamond0 N0)
        (suit diamond0 diamond)
        (home club0)
        (value club0 N0)
        (suit club0 club)
        (home heart0)
        (value heart0 N0)
        (suit heart0 heart)
        (home spade0)
        (value spade0 N0)
        (suit spade0 spade)
)
(:goal (and
        (home diamond5)
        (home club5)
        (home heart5)
        (home spade5)
)))

","move club3 club4 heart4 (1)
sendtofree club4 heart2 n2 n1 (1)
move heart2 cluba club3 (1)
sendtohome-b cluba club n1 club0 n0 n0 n1 (1)
sendtohome club2 diamond3 club n2 cluba n1 (1)
sendtonewcol spade4 diamond2 n1 n0 (1)
move diamond3 hearta spade4 (1)
sendtohome hearta spadea heart n1 heart0 n0 (1)
sendtohome heart2 club3 heart n2 hearta n1 (1)
sendtohome club3 heart4 club n3 club2 n2 (1)
homefromfreecell club4 club n4 club3 n3 n1 n2 (1)
sendtohome club5 heart3 club n5 club4 n4 (1)
sendtohome heart3 diamond4 heart n3 heart2 n2 (1)
sendtohome heart4 spade5 heart n4 heart3 n3 (1)
sendtohome-b spadea spade n1 spade0 n0 n0 n1 (1)
sendtonewcol spade5 diamonda n1 n0 (1)
sendtohome diamonda spade2 diamond n1 diamond0 n0 (1)
sendtohome diamond2 diamond5 diamond n2 diamonda n1 (1)
sendtohome diamond3 spade4 diamond n3 diamond2 n2 (1)
sendtohome-b spade2 spade n2 spadea n1 n0 n1 (1)
sendtohome diamond4 heart5 diamond n4 diamond3 n3 (1)
sendtohome diamond5 spade3 diamond n5 diamond4 n4 (1)
sendtohome-b spade3 spade n3 spade2 n2 n1 n2 (1)
sendtohome-b heart5 heart n5 heart4 n4 n2 n3 (1)
sendtohome-b spade4 spade n4 spade3 n3 n3 n4 (1)
sendtohome-b spade5 spade n5 spade4 n4 n4 n5 (1)"
grid,"(define (domain grid)
(:requirements :strips)
(:predicates (conn ?x ?y)
             (key-shape ?k ?s)
             (lock-shape ?x ?s)
             (at ?r ?x )
             (at-robot ?x)
             (place ?p)
             (key ?k)
             (shape ?s)
             (locked ?x)
             (holding ?k)
             (open ?x)
             (arm-empty ))



(:action unlock
:parameters (?curpos ?lockpos ?key ?shape)
:precondition (and (place ?curpos) (place ?lockpos) (key ?key) (shape ?shape)
          (conn ?curpos ?lockpos) (key-shape ?key ?shape)
                   (lock-shape ?lockpos ?shape) (at-robot ?curpos) 
                   (locked ?lockpos) (holding ?key))
:effect (and  (open ?lockpos) (not (locked ?lockpos))))


(:action move
:parameters (?curpos ?nextpos)
:precondition (and (place ?curpos) (place ?nextpos)
               (at-robot ?curpos) (conn ?curpos ?nextpos) (open ?nextpos))
:effect (and (at-robot ?nextpos) (not (at-robot ?curpos))))

(:action pickup
:parameters (?curpos ?key)
:precondition (and (place ?curpos) (key ?key) 
                  (at-robot ?curpos) (at ?key ?curpos) (arm-empty ))
:effect (and (holding ?key)
   (not (at ?key ?curpos)) (not (arm-empty ))))


(:action pickup-and-loose
:parameters (?curpos ?newkey ?oldkey)
:precondition (and (place ?curpos) (key ?newkey) (key ?oldkey)
                  (at-robot ?curpos) (holding ?oldkey) (at ?newkey ?curpos))
:effect (and (holding ?newkey) (at ?oldkey ?curpos)
        (not (holding ?oldkey)) (not (at ?newkey ?curpos))))

(:action putdown
:parameters (?curpos ?key)
:precondition (and (place ?curpos) (key ?key) 
                  (at-robot ?curpos) (holding ?key))
:effect (and (arm-empty ) (at ?key ?curpos) (not (holding ?key)))))


        
","(define (problem strips-grid-y-1)
   (:domain grid)
   (:objects node0-0 node0-1 node0-2 node0-3 node0-4 node1-0
             node1-1 node1-2 node1-3 node1-4 node2-0 node2-1 node2-2
             node2-3 node2-4 node3-0 node3-1 node3-2 node3-3 node3-4
             node4-0 node4-1 node4-2 node4-3 node4-4 triangle diamond
             square circle key0 key1 key2 key3 key4 key5 key6 key7 key8)
   (:init (arm-empty)
          (place node0-0)
          (place node0-1)
          (place node0-2)
          (place node0-3)
          (place node0-4)
          (place node1-0)
          (place node1-1)
          (place node1-2)
          (place node1-3)
          (place node1-4)
          (place node2-0)
          (place node2-1)
          (place node2-2)
          (place node2-3)
          (place node2-4)
          (place node3-0)
          (place node3-1)
          (place node3-2)
          (place node3-3)
          (place node3-4)
          (place node4-0)
          (place node4-1)
          (place node4-2)
          (place node4-3)
          (place node4-4)
          (shape triangle)
          (shape diamond)
          (shape square)
          (shape circle)
          (conn node0-0 node1-0)
          (conn node0-0 node0-1)
          (conn node0-1 node1-1)
          (conn node0-1 node0-2)
          (conn node0-1 node0-0)
          (conn node0-2 node1-2)
          (conn node0-2 node0-3)
          (conn node0-2 node0-1)
          (conn node0-3 node1-3)
          (conn node0-3 node0-4)
          (conn node0-3 node0-2)
          (conn node0-4 node1-4)
          (conn node0-4 node0-3)
          (conn node1-0 node2-0)
          (conn node1-0 node0-0)
          (conn node1-0 node1-1)
          (conn node1-1 node2-1)
          (conn node1-1 node0-1)
          (conn node1-1 node1-2)
          (conn node1-1 node1-0)
          (conn node1-2 node2-2)
          (conn node1-2 node0-2)
          (conn node1-2 node1-3)
          (conn node1-2 node1-1)
          (conn node1-3 node2-3)
          (conn node1-3 node0-3)
          (conn node1-3 node1-4)
          (conn node1-3 node1-2)
          (conn node1-4 node2-4)
          (conn node1-4 node0-4)
          (conn node1-4 node1-3)
          (conn node2-0 node3-0)
          (conn node2-0 node1-0)
          (conn node2-0 node2-1)
          (conn node2-1 node3-1)
          (conn node2-1 node1-1)
          (conn node2-1 node2-2)
          (conn node2-1 node2-0)
          (conn node2-2 node3-2)
          (conn node2-2 node1-2)
          (conn node2-2 node2-3)
          (conn node2-2 node2-1)
          (conn node2-3 node3-3)
          (conn node2-3 node1-3)
          (conn node2-3 node2-4)
          (conn node2-3 node2-2)
          (conn node2-4 node3-4)
          (conn node2-4 node1-4)
          (conn node2-4 node2-3)
          (conn node3-0 node4-0)
          (conn node3-0 node2-0)
          (conn node3-0 node3-1)
          (conn node3-1 node4-1)
          (conn node3-1 node2-1)
          (conn node3-1 node3-2)
          (conn node3-1 node3-0)
          (conn node3-2 node4-2)
          (conn node3-2 node2-2)
          (conn node3-2 node3-3)
          (conn node3-2 node3-1)
          (conn node3-3 node4-3)
          (conn node3-3 node2-3)
          (conn node3-3 node3-4)
          (conn node3-3 node3-2)
          (conn node3-4 node4-4)
          (conn node3-4 node2-4)
          (conn node3-4 node3-3)
          (conn node4-0 node3-0)
          (conn node4-0 node4-1)
          (conn node4-1 node3-1)
          (conn node4-1 node4-2)
          (conn node4-1 node4-0)
          (conn node4-2 node3-2)
          (conn node4-2 node4-3)
          (conn node4-2 node4-1)
          (conn node4-3 node3-3)
          (conn node4-3 node4-4)
          (conn node4-3 node4-2)
          (conn node4-4 node3-4)
          (conn node4-4 node4-3)
          (locked node4-3)
          (lock-shape node4-3 square)
          (locked node4-4)
          (lock-shape node4-4 square)
          (locked node3-4)
          (lock-shape node3-4 square)
          (locked node3-3)
          (lock-shape node3-3 square)
          (locked node2-3)
          (lock-shape node2-3 square)
          (locked node2-2)
          (lock-shape node2-2 square)
          (locked node3-2)
          (lock-shape node3-2 square)
          (locked node4-2)
          (lock-shape node4-2 square)
          (open node0-0)
          (open node0-1)
          (open node0-2)
          (open node0-3)
          (open node0-4)
          (open node1-0)
          (open node1-1)
          (open node1-2)
          (open node1-3)
          (open node1-4)
          (open node2-0)
          (open node2-1)
          (open node2-4)
          (open node3-0)
          (open node3-1)
          (open node4-0)
          (open node4-1)
          (key key0)
          (key-shape key0 triangle)
          (at key0 node2-3)
          (key key1)
          (key-shape key1 circle)
          (at key1 node1-3)
          (key key2)
          (key-shape key2 diamond)
          (at key2 node0-4)
          (key key3)
          (key-shape key3 square)
          (at key3 node0-2)
          (key key4)
          (key-shape key4 square)
          (at key4 node3-3)
          (key key5)
          (key-shape key5 triangle)
          (at key5 node4-1)
          (key key6)
          (key-shape key6 triangle)
          (at key6 node4-4)
          (key key7)
          (key-shape key7 circle)
          (at key7 node3-4)
          (key key8)
          (key-shape key8 triangle)
          (at key8 node2-2)
          (at-robot node2-4))
   (:goal (and (at key0 node1-1))))","move node2-4 node1-4 (1)
move node1-4 node0-4 (1)
move node0-4 node0-3 (1)
move node0-3 node0-2 (1)
pickup node0-2 key3 (1)
move node0-2 node1-2 (1)
move node1-2 node1-3 (1)
unlock node1-3 node2-3 key3 square (1)
move node1-3 node2-3 (1)
pickup-and-loose node2-3 key0 key3 (1)
move node2-3 node1-3 (1)
move node1-3 node1-2 (1)
move node1-2 node1-1 (1)
putdown node1-1 key0 (1)"
grid,"(define (domain grid)
(:requirements :strips)
(:predicates (conn ?x ?y)
             (key-shape ?k ?s)
             (lock-shape ?x ?s)
             (at ?r ?x )
             (at-robot ?x)
             (place ?p)
             (key ?k)
             (shape ?s)
             (locked ?x)
             (holding ?k)
             (open ?x)
             (arm-empty ))



(:action unlock
:parameters (?curpos ?lockpos ?key ?shape)
:precondition (and (place ?curpos) (place ?lockpos) (key ?key) (shape ?shape)
          (conn ?curpos ?lockpos) (key-shape ?key ?shape)
                   (lock-shape ?lockpos ?shape) (at-robot ?curpos) 
                   (locked ?lockpos) (holding ?key))
:effect (and  (open ?lockpos) (not (locked ?lockpos))))


(:action move
:parameters (?curpos ?nextpos)
:precondition (and (place ?curpos) (place ?nextpos)
               (at-robot ?curpos) (conn ?curpos ?nextpos) (open ?nextpos))
:effect (and (at-robot ?nextpos) (not (at-robot ?curpos))))

(:action pickup
:parameters (?curpos ?key)
:precondition (and (place ?curpos) (key ?key) 
                  (at-robot ?curpos) (at ?key ?curpos) (arm-empty ))
:effect (and (holding ?key)
   (not (at ?key ?curpos)) (not (arm-empty ))))


(:action pickup-and-loose
:parameters (?curpos ?newkey ?oldkey)
:precondition (and (place ?curpos) (key ?newkey) (key ?oldkey)
                  (at-robot ?curpos) (holding ?oldkey) (at ?newkey ?curpos))
:effect (and (holding ?newkey) (at ?oldkey ?curpos)
        (not (holding ?oldkey)) (not (at ?newkey ?curpos))))

(:action putdown
:parameters (?curpos ?key)
:precondition (and (place ?curpos) (key ?key) 
                  (at-robot ?curpos) (holding ?key))
:effect (and (arm-empty ) (at ?key ?curpos) (not (holding ?key)))))


        
","(define (problem strips-grid-y-2)
   (:domain grid)
   (:objects node0-0 node0-1 node0-2 node0-3 node0-4 node0-5
             node1-0 node1-1 node1-2 node1-3 node1-4 node1-5 node2-0
             node2-1 node2-2 node2-3 node2-4 node2-5 node3-0 node3-1
             node3-2 node3-3 node3-4 node3-5 node4-0 node4-1 node4-2
             node4-3 node4-4 node4-5 node5-0 node5-1 node5-2 node5-3
             node5-4 node5-5 triangle diamond square circle key0 key1 key2
             key3 key4 key5 key6 key7 key8 key9)
   (:init (arm-empty)
          (place node0-0)
          (place node0-1)
          (place node0-2)
          (place node0-3)
          (place node0-4)
          (place node0-5)
          (place node1-0)
          (place node1-1)
          (place node1-2)
          (place node1-3)
          (place node1-4)
          (place node1-5)
          (place node2-0)
          (place node2-1)
          (place node2-2)
          (place node2-3)
          (place node2-4)
          (place node2-5)
          (place node3-0)
          (place node3-1)
          (place node3-2)
          (place node3-3)
          (place node3-4)
          (place node3-5)
          (place node4-0)
          (place node4-1)
          (place node4-2)
          (place node4-3)
          (place node4-4)
          (place node4-5)
          (place node5-0)
          (place node5-1)
          (place node5-2)
          (place node5-3)
          (place node5-4)
          (place node5-5)
          (shape triangle)
          (shape diamond)
          (shape square)
          (shape circle)
          (conn node0-0 node1-0)
          (conn node0-0 node0-1)
          (conn node0-1 node1-1)
          (conn node0-1 node0-2)
          (conn node0-1 node0-0)
          (conn node0-2 node1-2)
          (conn node0-2 node0-3)
          (conn node0-2 node0-1)
          (conn node0-3 node1-3)
          (conn node0-3 node0-4)
          (conn node0-3 node0-2)
          (conn node0-4 node1-4)
          (conn node0-4 node0-5)
          (conn node0-4 node0-3)
          (conn node0-5 node1-5)
          (conn node0-5 node0-4)
          (conn node1-0 node2-0)
          (conn node1-0 node0-0)
          (conn node1-0 node1-1)
          (conn node1-1 node2-1)
          (conn node1-1 node0-1)
          (conn node1-1 node1-2)
          (conn node1-1 node1-0)
          (conn node1-2 node2-2)
          (conn node1-2 node0-2)
          (conn node1-2 node1-3)
          (conn node1-2 node1-1)
          (conn node1-3 node2-3)
          (conn node1-3 node0-3)
          (conn node1-3 node1-4)
          (conn node1-3 node1-2)
          (conn node1-4 node2-4)
          (conn node1-4 node0-4)
          (conn node1-4 node1-5)
          (conn node1-4 node1-3)
          (conn node1-5 node2-5)
          (conn node1-5 node0-5)
          (conn node1-5 node1-4)
          (conn node2-0 node3-0)
          (conn node2-0 node1-0)
          (conn node2-0 node2-1)
          (conn node2-1 node3-1)
          (conn node2-1 node1-1)
          (conn node2-1 node2-2)
          (conn node2-1 node2-0)
          (conn node2-2 node3-2)
          (conn node2-2 node1-2)
          (conn node2-2 node2-3)
          (conn node2-2 node2-1)
          (conn node2-3 node3-3)
          (conn node2-3 node1-3)
          (conn node2-3 node2-4)
          (conn node2-3 node2-2)
          (conn node2-4 node3-4)
          (conn node2-4 node1-4)
          (conn node2-4 node2-5)
          (conn node2-4 node2-3)
          (conn node2-5 node3-5)
          (conn node2-5 node1-5)
          (conn node2-5 node2-4)
          (conn node3-0 node4-0)
          (conn node3-0 node2-0)
          (conn node3-0 node3-1)
          (conn node3-1 node4-1)
          (conn node3-1 node2-1)
          (conn node3-1 node3-2)
          (conn node3-1 node3-0)
          (conn node3-2 node4-2)
          (conn node3-2 node2-2)
          (conn node3-2 node3-3)
          (conn node3-2 node3-1)
          (conn node3-3 node4-3)
          (conn node3-3 node2-3)
          (conn node3-3 node3-4)
          (conn node3-3 node3-2)
          (conn node3-4 node4-4)
          (conn node3-4 node2-4)
          (conn node3-4 node3-5)
          (conn node3-4 node3-3)
          (conn node3-5 node4-5)
          (conn node3-5 node2-5)
          (conn node3-5 node3-4)
          (conn node4-0 node5-0)
          (conn node4-0 node3-0)
          (conn node4-0 node4-1)
          (conn node4-1 node5-1)
          (conn node4-1 node3-1)
          (conn node4-1 node4-2)
          (conn node4-1 node4-0)
          (conn node4-2 node5-2)
          (conn node4-2 node3-2)
          (conn node4-2 node4-3)
          (conn node4-2 node4-1)
          (conn node4-3 node5-3)
          (conn node4-3 node3-3)
          (conn node4-3 node4-4)
          (conn node4-3 node4-2)
          (conn node4-4 node5-4)
          (conn node4-4 node3-4)
          (conn node4-4 node4-5)
          (conn node4-4 node4-3)
          (conn node4-5 node5-5)
          (conn node4-5 node3-5)
          (conn node4-5 node4-4)
          (conn node5-0 node4-0)
          (conn node5-0 node5-1)
          (conn node5-1 node4-1)
          (conn node5-1 node5-2)
          (conn node5-1 node5-0)
          (conn node5-2 node4-2)
          (conn node5-2 node5-3)
          (conn node5-2 node5-1)
          (conn node5-3 node4-3)
          (conn node5-3 node5-4)
          (conn node5-3 node5-2)
          (conn node5-4 node4-4)
          (conn node5-4 node5-5)
          (conn node5-4 node5-3)
          (conn node5-5 node4-5)
          (conn node5-5 node5-4)
          (locked node4-2)
          (lock-shape node4-2 triangle)
          (locked node5-2)
          (lock-shape node5-2 triangle)
          (locked node5-3)
          (lock-shape node5-3 triangle)
          (locked node4-3)
          (lock-shape node4-3 triangle)
          (locked node4-4)
          (lock-shape node4-4 triangle)
          (locked node3-4)
          (lock-shape node3-4 triangle)
          (locked node3-3)
          (lock-shape node3-3 triangle)
          (locked node3-2)
          (lock-shape node3-2 triangle)
          (open node0-0)
          (open node0-1)
          (open node0-2)
          (open node0-3)
          (open node0-4)
          (open node0-5)
          (open node1-0)
          (open node1-1)
          (open node1-2)
          (open node1-3)
          (open node1-4)
          (open node1-5)
          (open node2-0)
          (open node2-1)
          (open node2-2)
          (open node2-3)
          (open node2-4)
          (open node2-5)
          (open node3-0)
          (open node3-1)
          (open node3-5)
          (open node4-0)
          (open node4-1)
          (open node4-5)
          (open node5-0)
          (open node5-1)
          (open node5-4)
          (open node5-5)
          (key key0)
          (key-shape key0 diamond)
          (at key0 node0-0)
          (key key1)
          (key-shape key1 circle)
          (at key1 node1-3)
          (key key2)
          (key-shape key2 square)
          (at key2 node0-1)
          (key key3)
          (key-shape key3 triangle)
          (at key3 node1-5)
          (key key4)
          (key-shape key4 triangle)
          (at key4 node5-5)
          (key key5)
          (key-shape key5 diamond)
          (at key5 node4-2)
          (key key6)
          (key-shape key6 square)
          (at key6 node0-3)
          (key key7)
          (key-shape key7 diamond)
          (at key7 node5-1)
          (key key8)
          (key-shape key8 square)
          (at key8 node4-3)
          (key key9)
          (key-shape key9 diamond)
          (at key9 node5-5)
          (at-robot node5-5))
   (:goal (and (at key8 node3-2)
               (at key5 node4-2)
               (at key0 node4-1))))","pickup node5-5 key4 (1)
move node5-5 node5-4 (1)
unlock node5-4 node5-3 key4 triangle (1)
move node5-4 node5-3 (1)
unlock node5-3 node4-3 key4 triangle (1)
move node5-3 node4-3 (1)
unlock node4-3 node4-2 key4 triangle (1)
move node4-3 node4-2 (1)
unlock node4-2 node3-2 key4 triangle (1)
move node4-2 node4-3 (1)
pickup-and-loose node4-3 key8 key4 (1)
move node4-3 node4-2 (1)
move node4-2 node3-2 (1)
putdown node3-2 key8 (1)
move node3-2 node3-1 (1)
move node3-1 node2-1 (1)
move node2-1 node1-1 (1)
move node1-1 node0-1 (1)
move node0-1 node0-0 (1)
pickup node0-0 key0 (1)
move node0-0 node0-1 (1)
move node0-1 node1-1 (1)
move node1-1 node2-1 (1)
move node2-1 node3-1 (1)
move node3-1 node4-1 (1)
putdown node4-1 key0 (1)"
gripper,"(define (domain gripper-strips)
   (:predicates (room ?r)
                (ball ?b)
                (gripper ?g)
                (at-robby ?r)
                (at ?b ?r)
                (free ?g)
                (carry ?o ?g))

   (:action move
       :parameters  (?from ?to)
       :precondition (and  (room ?from) (room ?to) (at-robby ?from))
       :effect (and  (at-robby ?to)
                     (not (at-robby ?from))))



   (:action pick
       :parameters (?obj ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (at ?obj ?room) (at-robby ?room) (free ?gripper))
       :effect (and (carry ?obj ?gripper)
                    (not (at ?obj ?room)) 
                    (not (free ?gripper))))


   (:action drop
       :parameters  (?obj  ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (carry ?obj ?gripper) (at-robby ?room))
       :effect (and (at ?obj ?room)
                    (free ?gripper)
                    (not (carry ?obj ?gripper)))))

","(define (problem strips-gripper-x-1)
   (:domain gripper-strips)
   (:objects rooma roomb ball4 ball3 ball2 ball1 left right)
   (:init (room rooma)
          (room roomb)
          (ball ball4)
          (ball ball3)
          (ball ball2)
          (ball ball1)
          (at-robby rooma)
          (free left)
          (free right)
          (at ball4 rooma)
          (at ball3 rooma)
          (at ball2 rooma)
          (at ball1 rooma)
          (gripper left)
          (gripper right))
   (:goal (and (at ball4 roomb)
               (at ball3 roomb)
               (at ball2 roomb)
               (at ball1 roomb))))","pick ball1 rooma left (1)
pick ball2 rooma right (1)
move rooma roomb (1)
drop ball1 roomb left (1)
drop ball2 roomb right (1)
move roomb rooma (1)
pick ball3 rooma left (1)
pick ball4 rooma right (1)
move rooma roomb (1)
drop ball3 roomb left (1)
drop ball4 roomb right (1)"
gripper,"(define (domain gripper-strips)
   (:predicates (room ?r)
                (ball ?b)
                (gripper ?g)
                (at-robby ?r)
                (at ?b ?r)
                (free ?g)
                (carry ?o ?g))

   (:action move
       :parameters  (?from ?to)
       :precondition (and  (room ?from) (room ?to) (at-robby ?from))
       :effect (and  (at-robby ?to)
                     (not (at-robby ?from))))



   (:action pick
       :parameters (?obj ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (at ?obj ?room) (at-robby ?room) (free ?gripper))
       :effect (and (carry ?obj ?gripper)
                    (not (at ?obj ?room)) 
                    (not (free ?gripper))))


   (:action drop
       :parameters  (?obj  ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (carry ?obj ?gripper) (at-robby ?room))
       :effect (and (at ?obj ?room)
                    (free ?gripper)
                    (not (carry ?obj ?gripper)))))

","(define (problem strips-gripper-x-2)
   (:domain gripper-strips)
   (:objects rooma roomb ball6 ball5 ball4 ball3 ball2 ball1 left right)
   (:init (room rooma)
          (room roomb)
          (ball ball6)
          (ball ball5)
          (ball ball4)
          (ball ball3)
          (ball ball2)
          (ball ball1)
          (at-robby rooma)
          (free left)
          (free right)
          (at ball6 rooma)
          (at ball5 rooma)
          (at ball4 rooma)
          (at ball3 rooma)
          (at ball2 rooma)
          (at ball1 rooma)
          (gripper left)
          (gripper right))
   (:goal (and (at ball6 roomb)
               (at ball5 roomb)
               (at ball4 roomb)
               (at ball3 roomb)
               (at ball2 roomb)
               (at ball1 roomb))))","pick ball1 rooma left (1)
pick ball2 rooma right (1)
move rooma roomb (1)
drop ball1 roomb left (1)
drop ball2 roomb right (1)
move roomb rooma (1)
pick ball3 rooma left (1)
pick ball4 rooma right (1)
move rooma roomb (1)
drop ball3 roomb left (1)
drop ball4 roomb right (1)
move roomb rooma (1)
pick ball5 rooma left (1)
pick ball6 rooma right (1)
move rooma roomb (1)
drop ball5 roomb left (1)
drop ball6 roomb right (1)"
gripper,"(define (domain gripper-strips)
   (:predicates (room ?r)
                (ball ?b)
                (gripper ?g)
                (at-robby ?r)
                (at ?b ?r)
                (free ?g)
                (carry ?o ?g))

   (:action move
       :parameters  (?from ?to)
       :precondition (and  (room ?from) (room ?to) (at-robby ?from))
       :effect (and  (at-robby ?to)
                     (not (at-robby ?from))))



   (:action pick
       :parameters (?obj ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (at ?obj ?room) (at-robby ?room) (free ?gripper))
       :effect (and (carry ?obj ?gripper)
                    (not (at ?obj ?room)) 
                    (not (free ?gripper))))


   (:action drop
       :parameters  (?obj  ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (carry ?obj ?gripper) (at-robby ?room))
       :effect (and (at ?obj ?room)
                    (free ?gripper)
                    (not (carry ?obj ?gripper)))))

","(define (problem strips-gripper-x-3)
   (:domain gripper-strips)
   (:objects rooma roomb ball8 ball7 ball6 ball5 ball4 ball3 ball2
             ball1 left right)
   (:init (room rooma)
          (room roomb)
          (ball ball8)
          (ball ball7)
          (ball ball6)
          (ball ball5)
          (ball ball4)
          (ball ball3)
          (ball ball2)
          (ball ball1)
          (at-robby rooma)
          (free left)
          (free right)
          (at ball8 rooma)
          (at ball7 rooma)
          (at ball6 rooma)
          (at ball5 rooma)
          (at ball4 rooma)
          (at ball3 rooma)
          (at ball2 rooma)
          (at ball1 rooma)
          (gripper left)
          (gripper right))
   (:goal (and (at ball8 roomb)
               (at ball7 roomb)
               (at ball6 roomb)
               (at ball5 roomb)
               (at ball4 roomb)
               (at ball3 roomb)
               (at ball2 roomb)
               (at ball1 roomb))))","pick ball1 rooma left (1)
pick ball2 rooma right (1)
move rooma roomb (1)
drop ball1 roomb left (1)
drop ball2 roomb right (1)
move roomb rooma (1)
pick ball3 rooma left (1)
pick ball4 rooma right (1)
move rooma roomb (1)
drop ball3 roomb left (1)
drop ball4 roomb right (1)
move roomb rooma (1)
pick ball5 rooma left (1)
pick ball6 rooma right (1)
move rooma roomb (1)
drop ball5 roomb left (1)
drop ball6 roomb right (1)
move roomb rooma (1)
pick ball7 rooma left (1)
pick ball8 rooma right (1)
move rooma roomb (1)
drop ball7 roomb left (1)
drop ball8 roomb right (1)"
gripper,"(define (domain gripper-strips)
   (:predicates (room ?r)
                (ball ?b)
                (gripper ?g)
                (at-robby ?r)
                (at ?b ?r)
                (free ?g)
                (carry ?o ?g))

   (:action move
       :parameters  (?from ?to)
       :precondition (and  (room ?from) (room ?to) (at-robby ?from))
       :effect (and  (at-robby ?to)
                     (not (at-robby ?from))))



   (:action pick
       :parameters (?obj ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (at ?obj ?room) (at-robby ?room) (free ?gripper))
       :effect (and (carry ?obj ?gripper)
                    (not (at ?obj ?room)) 
                    (not (free ?gripper))))


   (:action drop
       :parameters  (?obj  ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (carry ?obj ?gripper) (at-robby ?room))
       :effect (and (at ?obj ?room)
                    (free ?gripper)
                    (not (carry ?obj ?gripper)))))

","(define (problem strips-gripper-x-4)
   (:domain gripper-strips)
   (:objects rooma roomb ball10 ball9 ball8 ball7 ball6 ball5 ball4
             ball3 ball2 ball1 left right)
   (:init (room rooma)
          (room roomb)
          (ball ball10)
          (ball ball9)
          (ball ball8)
          (ball ball7)
          (ball ball6)
          (ball ball5)
          (ball ball4)
          (ball ball3)
          (ball ball2)
          (ball ball1)
          (at-robby rooma)
          (free left)
          (free right)
          (at ball10 rooma)
          (at ball9 rooma)
          (at ball8 rooma)
          (at ball7 rooma)
          (at ball6 rooma)
          (at ball5 rooma)
          (at ball4 rooma)
          (at ball3 rooma)
          (at ball2 rooma)
          (at ball1 rooma)
          (gripper left)
          (gripper right))
   (:goal (and (at ball10 roomb)
               (at ball9 roomb)
               (at ball8 roomb)
               (at ball7 roomb)
               (at ball6 roomb)
               (at ball5 roomb)
               (at ball4 roomb)
               (at ball3 roomb)
               (at ball2 roomb)
               (at ball1 roomb))))","pick ball1 rooma left (1)
pick ball10 rooma right (1)
move rooma roomb (1)
drop ball1 roomb left (1)
drop ball10 roomb right (1)
move roomb rooma (1)
pick ball2 rooma left (1)
pick ball3 rooma right (1)
move rooma roomb (1)
drop ball2 roomb left (1)
drop ball3 roomb right (1)
move roomb rooma (1)
pick ball4 rooma left (1)
pick ball5 rooma right (1)
move rooma roomb (1)
drop ball4 roomb left (1)
drop ball5 roomb right (1)
move roomb rooma (1)
pick ball6 rooma left (1)
pick ball7 rooma right (1)
move rooma roomb (1)
drop ball6 roomb left (1)
drop ball7 roomb right (1)
move roomb rooma (1)
pick ball8 rooma left (1)
pick ball9 rooma right (1)
move rooma roomb (1)
drop ball8 roomb left (1)
drop ball9 roomb right (1)"
gripper,"(define (domain gripper-strips)
   (:predicates (room ?r)
                (ball ?b)
                (gripper ?g)
                (at-robby ?r)
                (at ?b ?r)
                (free ?g)
                (carry ?o ?g))

   (:action move
       :parameters  (?from ?to)
       :precondition (and  (room ?from) (room ?to) (at-robby ?from))
       :effect (and  (at-robby ?to)
                     (not (at-robby ?from))))



   (:action pick
       :parameters (?obj ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (at ?obj ?room) (at-robby ?room) (free ?gripper))
       :effect (and (carry ?obj ?gripper)
                    (not (at ?obj ?room)) 
                    (not (free ?gripper))))


   (:action drop
       :parameters  (?obj  ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (carry ?obj ?gripper) (at-robby ?room))
       :effect (and (at ?obj ?room)
                    (free ?gripper)
                    (not (carry ?obj ?gripper)))))

","(define (problem strips-gripper-x-5)
   (:domain gripper-strips)
   (:objects rooma roomb ball12 ball11 ball10 ball9 ball8 ball7 ball6
             ball5 ball4 ball3 ball2 ball1 left right)
   (:init (room rooma)
          (room roomb)
          (ball ball12)
          (ball ball11)
          (ball ball10)
          (ball ball9)
          (ball ball8)
          (ball ball7)
          (ball ball6)
          (ball ball5)
          (ball ball4)
          (ball ball3)
          (ball ball2)
          (ball ball1)
          (at-robby rooma)
          (free left)
          (free right)
          (at ball12 rooma)
          (at ball11 rooma)
          (at ball10 rooma)
          (at ball9 rooma)
          (at ball8 rooma)
          (at ball7 rooma)
          (at ball6 rooma)
          (at ball5 rooma)
          (at ball4 rooma)
          (at ball3 rooma)
          (at ball2 rooma)
          (at ball1 rooma)
          (gripper left)
          (gripper right))
   (:goal (and (at ball12 roomb)
               (at ball11 roomb)
               (at ball10 roomb)
               (at ball9 roomb)
               (at ball8 roomb)
               (at ball7 roomb)
               (at ball6 roomb)
               (at ball5 roomb)
               (at ball4 roomb)
               (at ball3 roomb)
               (at ball2 roomb)
               (at ball1 roomb))))","pick ball1 rooma left (1)
pick ball10 rooma right (1)
move rooma roomb (1)
drop ball1 roomb left (1)
drop ball10 roomb right (1)
move roomb rooma (1)
pick ball11 rooma left (1)
pick ball12 rooma right (1)
move rooma roomb (1)
drop ball11 roomb left (1)
drop ball12 roomb right (1)
move roomb rooma (1)
pick ball2 rooma left (1)
pick ball3 rooma right (1)
move rooma roomb (1)
drop ball2 roomb left (1)
drop ball3 roomb right (1)
move roomb rooma (1)
pick ball4 rooma left (1)
pick ball5 rooma right (1)
move rooma roomb (1)
drop ball4 roomb left (1)
drop ball5 roomb right (1)
move roomb rooma (1)
pick ball6 rooma left (1)
pick ball7 rooma right (1)
move rooma roomb (1)
drop ball6 roomb left (1)
drop ball7 roomb right (1)
move roomb rooma (1)
pick ball8 rooma left (1)
pick ball9 rooma right (1)
move rooma roomb (1)
drop ball8 roomb left (1)
drop ball9 roomb right (1)"
gripper,"(define (domain gripper-strips)
   (:predicates (room ?r)
                (ball ?b)
                (gripper ?g)
                (at-robby ?r)
                (at ?b ?r)
                (free ?g)
                (carry ?o ?g))

   (:action move
       :parameters  (?from ?to)
       :precondition (and  (room ?from) (room ?to) (at-robby ?from))
       :effect (and  (at-robby ?to)
                     (not (at-robby ?from))))



   (:action pick
       :parameters (?obj ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (at ?obj ?room) (at-robby ?room) (free ?gripper))
       :effect (and (carry ?obj ?gripper)
                    (not (at ?obj ?room)) 
                    (not (free ?gripper))))


   (:action drop
       :parameters  (?obj  ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (carry ?obj ?gripper) (at-robby ?room))
       :effect (and (at ?obj ?room)
                    (free ?gripper)
                    (not (carry ?obj ?gripper)))))

","(define (problem strips-gripper-x-6)
   (:domain gripper-strips)
   (:objects rooma roomb ball14 ball13 ball12 ball11 ball10 ball9
             ball8 ball7 ball6 ball5 ball4 ball3 ball2 ball1 left right)
   (:init (room rooma)
          (room roomb)
          (ball ball14)
          (ball ball13)
          (ball ball12)
          (ball ball11)
          (ball ball10)
          (ball ball9)
          (ball ball8)
          (ball ball7)
          (ball ball6)
          (ball ball5)
          (ball ball4)
          (ball ball3)
          (ball ball2)
          (ball ball1)
          (at-robby rooma)
          (free left)
          (free right)
          (at ball14 rooma)
          (at ball13 rooma)
          (at ball12 rooma)
          (at ball11 rooma)
          (at ball10 rooma)
          (at ball9 rooma)
          (at ball8 rooma)
          (at ball7 rooma)
          (at ball6 rooma)
          (at ball5 rooma)
          (at ball4 rooma)
          (at ball3 rooma)
          (at ball2 rooma)
          (at ball1 rooma)
          (gripper left)
          (gripper right))
   (:goal (and (at ball14 roomb)
               (at ball13 roomb)
               (at ball12 roomb)
               (at ball11 roomb)
               (at ball10 roomb)
               (at ball9 roomb)
               (at ball8 roomb)
               (at ball7 roomb)
               (at ball6 roomb)
               (at ball5 roomb)
               (at ball4 roomb)
               (at ball3 roomb)
               (at ball2 roomb)
               (at ball1 roomb))))","pick ball1 rooma left (1)
pick ball10 rooma right (1)
move rooma roomb (1)
drop ball1 roomb left (1)
drop ball10 roomb right (1)
move roomb rooma (1)
pick ball11 rooma left (1)
pick ball12 rooma right (1)
move rooma roomb (1)
drop ball11 roomb left (1)
drop ball12 roomb right (1)
move roomb rooma (1)
pick ball13 rooma left (1)
pick ball14 rooma right (1)
move rooma roomb (1)
drop ball13 roomb left (1)
drop ball14 roomb right (1)
move roomb rooma (1)
pick ball2 rooma left (1)
pick ball3 rooma right (1)
move rooma roomb (1)
drop ball2 roomb left (1)
drop ball3 roomb right (1)
move roomb rooma (1)
pick ball4 rooma left (1)
pick ball5 rooma right (1)
move rooma roomb (1)
drop ball4 roomb left (1)
drop ball5 roomb right (1)
move roomb rooma (1)
pick ball6 rooma left (1)
pick ball7 rooma right (1)
move rooma roomb (1)
drop ball6 roomb left (1)
drop ball7 roomb right (1)
move roomb rooma (1)
pick ball8 rooma left (1)
pick ball9 rooma right (1)
move rooma roomb (1)
drop ball8 roomb left (1)
drop ball9 roomb right (1)"
gripper,"(define (domain gripper-strips)
   (:predicates (room ?r)
                (ball ?b)
                (gripper ?g)
                (at-robby ?r)
                (at ?b ?r)
                (free ?g)
                (carry ?o ?g))

   (:action move
       :parameters  (?from ?to)
       :precondition (and  (room ?from) (room ?to) (at-robby ?from))
       :effect (and  (at-robby ?to)
                     (not (at-robby ?from))))



   (:action pick
       :parameters (?obj ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (at ?obj ?room) (at-robby ?room) (free ?gripper))
       :effect (and (carry ?obj ?gripper)
                    (not (at ?obj ?room)) 
                    (not (free ?gripper))))


   (:action drop
       :parameters  (?obj  ?room ?gripper)
       :precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                            (carry ?obj ?gripper) (at-robby ?room))
       :effect (and (at ?obj ?room)
                    (free ?gripper)
                    (not (carry ?obj ?gripper)))))

","(define (problem strips-gripper-x-7)
   (:domain gripper-strips)
   (:objects rooma roomb ball16 ball15 ball14 ball13 ball12 ball11
             ball10 ball9 ball8 ball7 ball6 ball5 ball4 ball3 ball2 ball1 left right)
   (:init (room rooma)
          (room roomb)
          (ball ball16)
          (ball ball15)
          (ball ball14)
          (ball ball13)
          (ball ball12)
          (ball ball11)
          (ball ball10)
          (ball ball9)
          (ball ball8)
          (ball ball7)
          (ball ball6)
          (ball ball5)
          (ball ball4)
          (ball ball3)
          (ball ball2)
          (ball ball1)
          (at-robby rooma)
          (free left)
          (free right)
          (at ball16 rooma)
          (at ball15 rooma)
          (at ball14 rooma)
          (at ball13 rooma)
          (at ball12 rooma)
          (at ball11 rooma)
          (at ball10 rooma)
          (at ball9 rooma)
          (at ball8 rooma)
          (at ball7 rooma)
          (at ball6 rooma)
          (at ball5 rooma)
          (at ball4 rooma)
          (at ball3 rooma)
          (at ball2 rooma)
          (at ball1 rooma)
          (gripper left)
          (gripper right))
   (:goal (and (at ball16 roomb)
               (at ball15 roomb)
               (at ball14 roomb)
               (at ball13 roomb)
               (at ball12 roomb)
               (at ball11 roomb)
               (at ball10 roomb)
               (at ball9 roomb)
               (at ball8 roomb)
               (at ball7 roomb)
               (at ball6 roomb)
               (at ball5 roomb)
               (at ball4 roomb)
               (at ball3 roomb)
               (at ball2 roomb)
               (at ball1 roomb))))","pick ball1 rooma left (1)
pick ball10 rooma right (1)
move rooma roomb (1)
drop ball1 roomb left (1)
drop ball10 roomb right (1)
move roomb rooma (1)
pick ball11 rooma left (1)
pick ball12 rooma right (1)
move rooma roomb (1)
drop ball11 roomb left (1)
drop ball12 roomb right (1)
move roomb rooma (1)
pick ball13 rooma left (1)
pick ball14 rooma right (1)
move rooma roomb (1)
drop ball13 roomb left (1)
drop ball14 roomb right (1)
move roomb rooma (1)
pick ball15 rooma left (1)
pick ball16 rooma right (1)
move rooma roomb (1)
drop ball15 roomb left (1)
drop ball16 roomb right (1)
move roomb rooma (1)
pick ball2 rooma left (1)
pick ball3 rooma right (1)
move rooma roomb (1)
drop ball2 roomb left (1)
drop ball3 roomb right (1)
move roomb rooma (1)
pick ball4 rooma left (1)
pick ball5 rooma right (1)
move rooma roomb (1)
drop ball4 roomb left (1)
drop ball5 roomb right (1)
move roomb rooma (1)
pick ball6 rooma left (1)
pick ball7 rooma right (1)
move rooma roomb (1)
drop ball6 roomb left (1)
drop ball7 roomb right (1)
move roomb rooma (1)
pick ball8 rooma left (1)
pick ball9 rooma right (1)
move rooma roomb (1)
drop ball8 roomb left (1)
drop ball9 roomb right (1)"
hanoi,"
(define (domain hanoi)
(:requirements :strips)
(:predicates (clear ?x)
             (on ?x ?y)
             (smaller ?x ?y))

(:action move
:parameters (?disc ?from ?to)
:precondition (and (smaller ?to ?disc) 
                   (on ?disc ?from) 
                   (clear ?disc) 
                   (clear ?to))
:effect  (and (clear ?from) 
              (on ?disc ?to) 
              (not (on ?disc ?from))  
              (not (clear ?to)))
 )) 
","


(define (problem hanoi-1)
(:domain hanoi)
(:objects peg1 peg2 peg3 d1 )
(:init
(smaller peg1 d1)
(smaller peg2 d1)
(smaller peg3 d1)
(clear peg2)
            (clear peg3)
            (clear d1)
(on d1 peg1)
)
(:goal
(and 
(on d1 peg3)
)
)
)


",move d1 peg1 peg3 (1)
hanoi,"
(define (domain hanoi)
(:requirements :strips)
(:predicates (clear ?x)
             (on ?x ?y)
             (smaller ?x ?y))

(:action move
:parameters (?disc ?from ?to)
:precondition (and (smaller ?to ?disc) 
                   (on ?disc ?from) 
                   (clear ?disc) 
                   (clear ?to))
:effect  (and (clear ?from) 
              (on ?disc ?to) 
              (not (on ?disc ?from))  
              (not (clear ?to)))
 )) 
","


(define (problem hanoi-2)
(:domain hanoi)
(:objects peg1 peg2 peg3 d1 d2 )
(:init
(smaller peg1 d1)
(smaller peg1 d2)
(smaller peg2 d1)
(smaller peg2 d2)
(smaller peg3 d1)
(smaller peg3 d2)
(smaller d1 d1)
(smaller d2 d1)
(clear peg2)
            (clear peg3)
            (clear d1)
(on d2 peg1)
(on d1 d2)
)
(:goal
(and 
(on d2 peg3)
(on d1 d2)
)
)
)


","move d1 d2 peg2 (1)
move d2 peg1 peg3 (1)
move d1 peg2 d2 (1)"
hanoi,"
(define (domain hanoi)
(:requirements :strips)
(:predicates (clear ?x)
             (on ?x ?y)
             (smaller ?x ?y))

(:action move
:parameters (?disc ?from ?to)
:precondition (and (smaller ?to ?disc) 
                   (on ?disc ?from) 
                   (clear ?disc) 
                   (clear ?to))
:effect  (and (clear ?from) 
              (on ?disc ?to) 
              (not (on ?disc ?from))  
              (not (clear ?to)))
 )) 
","


(define (problem hanoi-3)
(:domain hanoi)
(:objects peg1 peg2 peg3 d1 d2 d3 )
(:init
(smaller peg1 d1)
(smaller peg1 d2)
(smaller peg1 d3)
(smaller peg2 d1)
(smaller peg2 d2)
(smaller peg2 d3)
(smaller peg3 d1)
(smaller peg3 d2)
(smaller peg3 d3)
(smaller d1 d1)
(smaller d2 d1)
(smaller d3 d1)
(smaller d2 d2)
(smaller d3 d2)
(clear peg2)
            (clear peg3)
            (clear d1)
(on d3 peg1)
(on d2 d3)
(on d1 d2)
)
(:goal
(and 
(on d3 peg3)
(on d2 d3)
(on d1 d2)
)
)
)


","move d1 d2 peg3 (1)
move d2 d3 peg2 (1)
move d1 peg3 d2 (1)
move d3 peg1 peg3 (1)
move d1 d2 peg1 (1)
move d2 peg2 d3 (1)
move d1 peg1 d2 (1)"
hanoi,"
(define (domain hanoi)
(:requirements :strips)
(:predicates (clear ?x)
             (on ?x ?y)
             (smaller ?x ?y))

(:action move
:parameters (?disc ?from ?to)
:precondition (and (smaller ?to ?disc) 
                   (on ?disc ?from) 
                   (clear ?disc) 
                   (clear ?to))
:effect  (and (clear ?from) 
              (on ?disc ?to) 
              (not (on ?disc ?from))  
              (not (clear ?to)))
 )) 
","


(define (problem hanoi-4)
(:domain hanoi)
(:objects peg1 peg2 peg3 d1 d2 d3 d4 )
(:init
(smaller peg1 d1)
(smaller peg1 d2)
(smaller peg1 d3)
(smaller peg1 d4)
(smaller peg2 d1)
(smaller peg2 d2)
(smaller peg2 d3)
(smaller peg2 d4)
(smaller peg3 d1)
(smaller peg3 d2)
(smaller peg3 d3)
(smaller peg3 d4)
(smaller d1 d1)
(smaller d2 d1)
(smaller d3 d1)
(smaller d4 d1)
(smaller d2 d2)
(smaller d3 d2)
(smaller d4 d2)
(smaller d3 d3)
(smaller d4 d3)
(clear peg2)
            (clear peg3)
            (clear d1)
(on d4 peg1)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
(:goal
(and 
(on d4 peg3)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
)
)


","move d1 d2 peg2 (1)
move d2 d3 peg3 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 peg3 d3 (1)
move d1 d4 d2 (1)
move d4 peg1 peg3 (1)
move d1 d2 d4 (1)
move d2 d3 peg1 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 peg1 d3 (1)
move d1 peg2 d2 (1)"
hanoi,"
(define (domain hanoi)
(:requirements :strips)
(:predicates (clear ?x)
             (on ?x ?y)
             (smaller ?x ?y))

(:action move
:parameters (?disc ?from ?to)
:precondition (and (smaller ?to ?disc) 
                   (on ?disc ?from) 
                   (clear ?disc) 
                   (clear ?to))
:effect  (and (clear ?from) 
              (on ?disc ?to) 
              (not (on ?disc ?from))  
              (not (clear ?to)))
 )) 
","


(define (problem hanoi-5)
(:domain hanoi)
(:objects peg1 peg2 peg3 d1 d2 d3 d4 d5 )
(:init
(smaller peg1 d1)
(smaller peg1 d2)
(smaller peg1 d3)
(smaller peg1 d4)
(smaller peg1 d5)
(smaller peg2 d1)
(smaller peg2 d2)
(smaller peg2 d3)
(smaller peg2 d4)
(smaller peg2 d5)
(smaller peg3 d1)
(smaller peg3 d2)
(smaller peg3 d3)
(smaller peg3 d4)
(smaller peg3 d5)
(smaller d1 d1)
(smaller d2 d1)
(smaller d3 d1)
(smaller d4 d1)
(smaller d5 d1)
(smaller d2 d2)
(smaller d3 d2)
(smaller d4 d2)
(smaller d5 d2)
(smaller d3 d3)
(smaller d4 d3)
(smaller d5 d3)
(smaller d4 d4)
(smaller d5 d4)
(clear peg2)
            (clear peg3)
            (clear d1)
(on d5 peg1)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
(:goal
(and 
(on d5 peg3)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
)
)


","move d1 d2 peg3 (1)
move d2 d3 peg2 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d5 d3 (1)
move d1 peg3 d2 (1)
move d5 peg1 peg3 (1)
move d1 d2 peg1 (1)
move d2 d3 d5 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 peg2 d3 (1)
move d1 peg1 d2 (1)"
hanoi,"
(define (domain hanoi)
(:requirements :strips)
(:predicates (clear ?x)
             (on ?x ?y)
             (smaller ?x ?y))

(:action move
:parameters (?disc ?from ?to)
:precondition (and (smaller ?to ?disc) 
                   (on ?disc ?from) 
                   (clear ?disc) 
                   (clear ?to))
:effect  (and (clear ?from) 
              (on ?disc ?to) 
              (not (on ?disc ?from))  
              (not (clear ?to)))
 )) 
","


(define (problem hanoi-6)
(:domain hanoi)
(:objects peg1 peg2 peg3 d1 d2 d3 d4 d5 d6 )
(:init
(smaller peg1 d1)
(smaller peg1 d2)
(smaller peg1 d3)
(smaller peg1 d4)
(smaller peg1 d5)
(smaller peg1 d6)
(smaller peg2 d1)
(smaller peg2 d2)
(smaller peg2 d3)
(smaller peg2 d4)
(smaller peg2 d5)
(smaller peg2 d6)
(smaller peg3 d1)
(smaller peg3 d2)
(smaller peg3 d3)
(smaller peg3 d4)
(smaller peg3 d5)
(smaller peg3 d6)
(smaller d1 d1)
(smaller d2 d1)
(smaller d3 d1)
(smaller d4 d1)
(smaller d5 d1)
(smaller d6 d1)
(smaller d2 d2)
(smaller d3 d2)
(smaller d4 d2)
(smaller d5 d2)
(smaller d6 d2)
(smaller d3 d3)
(smaller d4 d3)
(smaller d5 d3)
(smaller d6 d3)
(smaller d4 d4)
(smaller d5 d4)
(smaller d6 d4)
(smaller d5 d5)
(smaller d6 d5)
(clear peg2)
            (clear peg3)
            (clear d1)
(on d6 peg1)
(on d5 d6)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
(:goal
(and 
(on d6 peg3)
(on d5 d6)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
)
)


","move d1 d2 peg2 (1)
move d2 d3 peg3 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 peg3 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg3 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 d5 d3 (1)
move d1 peg2 d2 (1)
move d5 d6 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg3 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg3 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg3 d3 (1)
move d1 d6 d2 (1)
move d6 peg1 peg3 (1)
move d1 d2 d6 (1)
move d2 d3 peg1 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg1 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg1 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg2 d6 (1)
move d1 d2 peg2 (1)
move d2 d3 d5 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg1 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg1 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 peg1 d3 (1)
move d1 peg2 d2 (1)"
hanoi,"
(define (domain hanoi)
(:requirements :strips)
(:predicates (clear ?x)
             (on ?x ?y)
             (smaller ?x ?y))

(:action move
:parameters (?disc ?from ?to)
:precondition (and (smaller ?to ?disc) 
                   (on ?disc ?from) 
                   (clear ?disc) 
                   (clear ?to))
:effect  (and (clear ?from) 
              (on ?disc ?to) 
              (not (on ?disc ?from))  
              (not (clear ?to)))
 )) 
","


(define (problem hanoi-7)
(:domain hanoi)
(:objects peg1 peg2 peg3 d1 d2 d3 d4 d5 d6 d7 )
(:init
(smaller peg1 d1)
(smaller peg1 d2)
(smaller peg1 d3)
(smaller peg1 d4)
(smaller peg1 d5)
(smaller peg1 d6)
(smaller peg1 d7)
(smaller peg2 d1)
(smaller peg2 d2)
(smaller peg2 d3)
(smaller peg2 d4)
(smaller peg2 d5)
(smaller peg2 d6)
(smaller peg2 d7)
(smaller peg3 d1)
(smaller peg3 d2)
(smaller peg3 d3)
(smaller peg3 d4)
(smaller peg3 d5)
(smaller peg3 d6)
(smaller peg3 d7)
(smaller d1 d1)
(smaller d2 d1)
(smaller d3 d1)
(smaller d4 d1)
(smaller d5 d1)
(smaller d6 d1)
(smaller d7 d1)
(smaller d2 d2)
(smaller d3 d2)
(smaller d4 d2)
(smaller d5 d2)
(smaller d6 d2)
(smaller d7 d2)
(smaller d3 d3)
(smaller d4 d3)
(smaller d5 d3)
(smaller d6 d3)
(smaller d7 d3)
(smaller d4 d4)
(smaller d5 d4)
(smaller d6 d4)
(smaller d7 d4)
(smaller d5 d5)
(smaller d6 d5)
(smaller d7 d5)
(smaller d6 d6)
(smaller d7 d6)
(clear peg2)
            (clear peg3)
            (clear d1)
(on d7 peg1)
(on d6 d7)
(on d5 d6)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
(:goal
(and 
(on d7 peg3)
(on d6 d7)
(on d5 d6)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
)
)


","move d1 d2 peg3 (1)
move d2 d3 peg2 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d5 d3 (1)
move d1 peg3 d2 (1)
move d5 d6 peg3 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg2 d3 (1)
move d1 d6 d2 (1)
move d6 d7 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg3 d6 (1)
move d1 d2 peg3 (1)
move d2 d3 d5 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d7 d3 (1)
move d1 peg3 d2 (1)
move d7 peg1 peg3 (1)
move d1 d2 peg1 (1)
move d2 d3 d7 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 d5 d3 (1)
move d1 peg1 d2 (1)
move d5 d6 peg1 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 peg2 d7 (1)
move d1 d2 d6 (1)
move d2 d3 peg2 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg1 d6 (1)
move d1 d2 peg1 (1)
move d2 d3 d5 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 peg2 d3 (1)
move d1 peg1 d2 (1)"
hanoi,"
(define (domain hanoi)
(:requirements :strips)
(:predicates (clear ?x)
             (on ?x ?y)
             (smaller ?x ?y))

(:action move
:parameters (?disc ?from ?to)
:precondition (and (smaller ?to ?disc) 
                   (on ?disc ?from) 
                   (clear ?disc) 
                   (clear ?to))
:effect  (and (clear ?from) 
              (on ?disc ?to) 
              (not (on ?disc ?from))  
              (not (clear ?to)))
 )) 
","


(define (problem hanoi-8)
(:domain hanoi)
(:objects peg1 peg2 peg3 d1 d2 d3 d4 d5 d6 d7 d8 )
(:init
(smaller peg1 d1)
(smaller peg1 d2)
(smaller peg1 d3)
(smaller peg1 d4)
(smaller peg1 d5)
(smaller peg1 d6)
(smaller peg1 d7)
(smaller peg1 d8)
(smaller peg2 d1)
(smaller peg2 d2)
(smaller peg2 d3)
(smaller peg2 d4)
(smaller peg2 d5)
(smaller peg2 d6)
(smaller peg2 d7)
(smaller peg2 d8)
(smaller peg3 d1)
(smaller peg3 d2)
(smaller peg3 d3)
(smaller peg3 d4)
(smaller peg3 d5)
(smaller peg3 d6)
(smaller peg3 d7)
(smaller peg3 d8)
(smaller d1 d1)
(smaller d2 d1)
(smaller d3 d1)
(smaller d4 d1)
(smaller d5 d1)
(smaller d6 d1)
(smaller d7 d1)
(smaller d8 d1)
(smaller d2 d2)
(smaller d3 d2)
(smaller d4 d2)
(smaller d5 d2)
(smaller d6 d2)
(smaller d7 d2)
(smaller d8 d2)
(smaller d3 d3)
(smaller d4 d3)
(smaller d5 d3)
(smaller d6 d3)
(smaller d7 d3)
(smaller d8 d3)
(smaller d4 d4)
(smaller d5 d4)
(smaller d6 d4)
(smaller d7 d4)
(smaller d8 d4)
(smaller d5 d5)
(smaller d6 d5)
(smaller d7 d5)
(smaller d8 d5)
(smaller d6 d6)
(smaller d7 d6)
(smaller d8 d6)
(smaller d7 d7)
(smaller d8 d7)
(clear peg2)
            (clear peg3)
            (clear d1)
(on d8 peg1)
(on d7 d8)
(on d6 d7)
(on d5 d6)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
(:goal
(and 
(on d8 peg3)
(on d7 d8)
(on d6 d7)
(on d5 d6)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
)
)

","move d1 d2 peg2 (1)
move d2 d3 peg3 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 peg3 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg3 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 d5 d3 (1)
move d1 peg2 d2 (1)
move d5 d6 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg3 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg3 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg3 d3 (1)
move d1 d6 d2 (1)
move d6 d7 peg3 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg2 d6 (1)
move d1 d2 peg2 (1)
move d2 d3 d5 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 d7 d3 (1)
move d1 peg2 d2 (1)
move d7 d8 peg2 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 peg3 d7 (1)
move d1 d2 d6 (1)
move d2 d3 peg3 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg3 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg3 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg3 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg3 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 peg3 d3 (1)
move d1 d8 d2 (1)
move d8 peg1 peg3 (1)
move d1 d2 d8 (1)
move d2 d3 peg1 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 peg1 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg1 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg1 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg1 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg1 d3 (1)
move d1 d6 d2 (1)
move d6 d7 peg1 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 peg2 d8 (1)
move d1 d2 peg2 (1)
move d2 d3 d7 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 d5 d3 (1)
move d1 peg2 d2 (1)
move d5 d6 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 peg1 d7 (1)
move d1 d2 d6 (1)
move d2 d3 peg1 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg1 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg1 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg2 d6 (1)
move d1 d2 peg2 (1)
move d2 d3 d5 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg1 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg1 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 peg1 d3 (1)
move d1 peg2 d2 (1)"
hanoi,"
(define (domain hanoi)
(:requirements :strips)
(:predicates (clear ?x)
             (on ?x ?y)
             (smaller ?x ?y))

(:action move
:parameters (?disc ?from ?to)
:precondition (and (smaller ?to ?disc) 
                   (on ?disc ?from) 
                   (clear ?disc) 
                   (clear ?to))
:effect  (and (clear ?from) 
              (on ?disc ?to) 
              (not (on ?disc ?from))  
              (not (clear ?to)))
 )) 
","


(define (problem hanoi-9)
(:domain hanoi)
(:objects peg1 peg2 peg3 d1 d2 d3 d4 d5 d6 d7 d8 d9 )
(:init
(smaller peg1 d1)
(smaller peg1 d2)
(smaller peg1 d3)
(smaller peg1 d4)
(smaller peg1 d5)
(smaller peg1 d6)
(smaller peg1 d7)
(smaller peg1 d8)
(smaller peg1 d9)
(smaller peg2 d1)
(smaller peg2 d2)
(smaller peg2 d3)
(smaller peg2 d4)
(smaller peg2 d5)
(smaller peg2 d6)
(smaller peg2 d7)
(smaller peg2 d8)
(smaller peg2 d9)
(smaller peg3 d1)
(smaller peg3 d2)
(smaller peg3 d3)
(smaller peg3 d4)
(smaller peg3 d5)
(smaller peg3 d6)
(smaller peg3 d7)
(smaller peg3 d8)
(smaller peg3 d9)
(smaller d1 d1)
(smaller d2 d1)
(smaller d3 d1)
(smaller d4 d1)
(smaller d5 d1)
(smaller d6 d1)
(smaller d7 d1)
(smaller d8 d1)
(smaller d9 d1)
(smaller d2 d2)
(smaller d3 d2)
(smaller d4 d2)
(smaller d5 d2)
(smaller d6 d2)
(smaller d7 d2)
(smaller d8 d2)
(smaller d9 d2)
(smaller d3 d3)
(smaller d4 d3)
(smaller d5 d3)
(smaller d6 d3)
(smaller d7 d3)
(smaller d8 d3)
(smaller d9 d3)
(smaller d4 d4)
(smaller d5 d4)
(smaller d6 d4)
(smaller d7 d4)
(smaller d8 d4)
(smaller d9 d4)
(smaller d5 d5)
(smaller d6 d5)
(smaller d7 d5)
(smaller d8 d5)
(smaller d9 d5)
(smaller d6 d6)
(smaller d7 d6)
(smaller d8 d6)
(smaller d9 d6)
(smaller d7 d7)
(smaller d8 d7)
(smaller d9 d7)
(smaller d8 d8)
(smaller d9 d8)
(clear peg2)
            (clear peg3)
            (clear d1)
(on d9 peg1)
(on d8 d9)
(on d7 d8)
(on d6 d7)
(on d5 d6)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
(:goal
(and 
(on d9 peg3)
(on d8 d9)
(on d7 d8)
(on d6 d7)
(on d5 d6)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
)
)

","move d1 d2 peg3 (1)
move d2 d3 peg2 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d5 d3 (1)
move d1 peg3 d2 (1)
move d5 d6 peg3 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg2 d3 (1)
move d1 d6 d2 (1)
move d6 d7 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg3 d6 (1)
move d1 d2 peg3 (1)
move d2 d3 d5 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d7 d3 (1)
move d1 peg3 d2 (1)
move d7 d8 peg3 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 peg2 d7 (1)
move d1 d2 d6 (1)
move d2 d3 peg2 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 peg2 d3 (1)
move d1 d8 d2 (1)
move d8 d9 peg2 (1)
move d1 d2 d8 (1)
move d2 d3 d9 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 peg3 d8 (1)
move d1 d2 peg3 (1)
move d2 d3 d7 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d5 d3 (1)
move d1 peg3 d2 (1)
move d5 d6 peg3 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg3 d6 (1)
move d1 d2 peg3 (1)
move d2 d3 d5 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d9 d3 (1)
move d1 peg3 d2 (1)
move d9 peg1 peg3 (1)
move d1 d2 peg1 (1)
move d2 d3 d9 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 d5 d3 (1)
move d1 peg1 d2 (1)
move d5 d6 peg1 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg1 d6 (1)
move d1 d2 peg1 (1)
move d2 d3 d5 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 d7 d3 (1)
move d1 peg1 d2 (1)
move d7 d8 peg1 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d9 d3 (1)
move d1 d8 d2 (1)
move d8 peg2 d9 (1)
move d1 d2 d8 (1)
move d2 d3 peg2 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg2 d3 (1)
move d1 d6 d2 (1)
move d6 d7 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 peg1 d8 (1)
move d1 d2 peg1 (1)
move d2 d3 d7 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 d5 d3 (1)
move d1 peg1 d2 (1)
move d5 d6 peg1 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 peg2 d7 (1)
move d1 d2 d6 (1)
move d2 d3 peg2 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg1 d6 (1)
move d1 d2 peg1 (1)
move d2 d3 d5 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 peg2 d3 (1)
move d1 peg1 d2 (1)"
hanoi,"
(define (domain hanoi)
(:requirements :strips)
(:predicates (clear ?x)
             (on ?x ?y)
             (smaller ?x ?y))

(:action move
:parameters (?disc ?from ?to)
:precondition (and (smaller ?to ?disc) 
                   (on ?disc ?from) 
                   (clear ?disc) 
                   (clear ?to))
:effect  (and (clear ?from) 
              (on ?disc ?to) 
              (not (on ?disc ?from))  
              (not (clear ?to)))
 )) 
","


(define (problem hanoi-10)
(:domain hanoi)
(:objects peg1 peg2 peg3 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 )
(:init
(smaller peg1 d1)
(smaller peg1 d2)
(smaller peg1 d3)
(smaller peg1 d4)
(smaller peg1 d5)
(smaller peg1 d6)
(smaller peg1 d7)
(smaller peg1 d8)
(smaller peg1 d9)
(smaller peg1 d10)
(smaller peg2 d1)
(smaller peg2 d2)
(smaller peg2 d3)
(smaller peg2 d4)
(smaller peg2 d5)
(smaller peg2 d6)
(smaller peg2 d7)
(smaller peg2 d8)
(smaller peg2 d9)
(smaller peg2 d10)
(smaller peg3 d1)
(smaller peg3 d2)
(smaller peg3 d3)
(smaller peg3 d4)
(smaller peg3 d5)
(smaller peg3 d6)
(smaller peg3 d7)
(smaller peg3 d8)
(smaller peg3 d9)
(smaller peg3 d10)
(smaller d1 d1)
(smaller d2 d1)
(smaller d3 d1)
(smaller d4 d1)
(smaller d5 d1)
(smaller d6 d1)
(smaller d7 d1)
(smaller d8 d1)
(smaller d9 d1)
(smaller d10 d1)
(smaller d2 d2)
(smaller d3 d2)
(smaller d4 d2)
(smaller d5 d2)
(smaller d6 d2)
(smaller d7 d2)
(smaller d8 d2)
(smaller d9 d2)
(smaller d10 d2)
(smaller d3 d3)
(smaller d4 d3)
(smaller d5 d3)
(smaller d6 d3)
(smaller d7 d3)
(smaller d8 d3)
(smaller d9 d3)
(smaller d10 d3)
(smaller d4 d4)
(smaller d5 d4)
(smaller d6 d4)
(smaller d7 d4)
(smaller d8 d4)
(smaller d9 d4)
(smaller d10 d4)
(smaller d5 d5)
(smaller d6 d5)
(smaller d7 d5)
(smaller d8 d5)
(smaller d9 d5)
(smaller d10 d5)
(smaller d6 d6)
(smaller d7 d6)
(smaller d8 d6)
(smaller d9 d6)
(smaller d10 d6)
(smaller d7 d7)
(smaller d8 d7)
(smaller d9 d7)
(smaller d10 d7)
(smaller d8 d8)
(smaller d9 d8)
(smaller d10 d8)
(smaller d9 d9)
(smaller d10 d9)
(clear peg2)
            (clear peg3)
            (clear d1)
(on d10 peg1)
(on d9 d10)
(on d8 d9)
(on d7 d8)
(on d6 d7)
(on d5 d6)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
(:goal
(and 
(on d10 peg3)
(on d9 d10)
(on d8 d9)
(on d7 d8)
(on d6 d7)
(on d5 d6)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
)
)


","move d1 d2 peg2 (1)
move d2 d3 peg3 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 peg3 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg3 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 d5 d3 (1)
move d1 peg2 d2 (1)
move d5 d6 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg3 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg3 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg3 d3 (1)
move d1 d6 d2 (1)
move d6 d7 peg3 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg2 d6 (1)
move d1 d2 peg2 (1)
move d2 d3 d5 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 d7 d3 (1)
move d1 peg2 d2 (1)
move d7 d8 peg2 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 peg3 d7 (1)
move d1 d2 d6 (1)
move d2 d3 peg3 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg3 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg3 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg3 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg3 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 peg3 d3 (1)
move d1 d8 d2 (1)
move d8 d9 peg3 (1)
move d1 d2 d8 (1)
move d2 d3 d9 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 peg2 d8 (1)
move d1 d2 peg2 (1)
move d2 d3 d7 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 d5 d3 (1)
move d1 peg2 d2 (1)
move d5 d6 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg2 d6 (1)
move d1 d2 peg2 (1)
move d2 d3 d5 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 d9 d3 (1)
move d1 peg2 d2 (1)
move d9 d10 peg2 (1)
move d1 d2 d10 (1)
move d2 d3 d9 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d5 d3 (1)
move d1 d10 d2 (1)
move d5 d6 d10 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d10 d6 (1)
move d1 d2 d10 (1)
move d2 d3 d5 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d7 d3 (1)
move d1 d10 d2 (1)
move d7 d8 d10 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d9 d3 (1)
move d1 d8 d2 (1)
move d8 peg3 d9 (1)
move d1 d2 d8 (1)
move d2 d3 peg3 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 peg3 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg3 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg3 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg3 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg3 d3 (1)
move d1 d6 d2 (1)
move d6 d7 peg3 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 d10 d8 (1)
move d1 d2 d10 (1)
move d2 d3 d7 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d5 d3 (1)
move d1 d10 d2 (1)
move d5 d6 d10 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 peg3 d7 (1)
move d1 d2 d6 (1)
move d2 d3 peg3 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg3 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg3 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d10 d6 (1)
move d1 d2 d10 (1)
move d2 d3 d5 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg3 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg3 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 peg3 d3 (1)
move d1 d10 d2 (1)
move d10 peg1 peg3 (1)
move d1 d2 d10 (1)
move d2 d3 peg1 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 peg1 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg1 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d5 d3 (1)
move d1 d10 d2 (1)
move d5 d6 d10 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg1 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg1 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg1 d3 (1)
move d1 d6 d2 (1)
move d6 d7 peg1 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d10 d6 (1)
move d1 d2 d10 (1)
move d2 d3 d5 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d7 d3 (1)
move d1 d10 d2 (1)
move d7 d8 d10 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 peg1 d7 (1)
move d1 d2 d6 (1)
move d2 d3 peg1 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg1 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg1 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg1 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg1 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 peg1 d3 (1)
move d1 d8 d2 (1)
move d8 d9 peg1 (1)
move d1 d2 d8 (1)
move d2 d3 d9 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 d10 d8 (1)
move d1 d2 d10 (1)
move d2 d3 d7 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d5 d3 (1)
move d1 d10 d2 (1)
move d5 d6 d10 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d10 d6 (1)
move d1 d2 d10 (1)
move d2 d3 d5 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d9 d3 (1)
move d1 d10 d2 (1)
move d9 peg2 d10 (1)
move d1 d2 peg2 (1)
move d2 d3 d9 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 d5 d3 (1)
move d1 peg2 d2 (1)
move d5 d6 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg2 d6 (1)
move d1 d2 peg2 (1)
move d2 d3 d5 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 d7 d3 (1)
move d1 peg2 d2 (1)
move d7 d8 peg2 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d9 d3 (1)
move d1 d8 d2 (1)
move d8 peg1 d9 (1)
move d1 d2 d8 (1)
move d2 d3 peg1 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 peg1 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg1 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg1 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg1 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg1 d3 (1)
move d1 d6 d2 (1)
move d6 d7 peg1 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 peg2 d8 (1)
move d1 d2 peg2 (1)
move d2 d3 d7 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 d5 d3 (1)
move d1 peg2 d2 (1)
move d5 d6 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 peg1 d7 (1)
move d1 d2 d6 (1)
move d2 d3 peg1 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg1 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg1 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg2 d6 (1)
move d1 d2 peg2 (1)
move d2 d3 d5 (1)
move d1 peg2 d2 (1)
move d3 d4 peg2 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg1 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg1 (1)
move d1 d4 d2 (1)
move d3 peg2 d4 (1)
move d1 d2 peg2 (1)
move d2 peg1 d3 (1)
move d1 peg2 d2 (1)"
hanoi,"
(define (domain hanoi)
(:requirements :strips)
(:predicates (clear ?x)
             (on ?x ?y)
             (smaller ?x ?y))

(:action move
:parameters (?disc ?from ?to)
:precondition (and (smaller ?to ?disc) 
                   (on ?disc ?from) 
                   (clear ?disc) 
                   (clear ?to))
:effect  (and (clear ?from) 
              (on ?disc ?to) 
              (not (on ?disc ?from))  
              (not (clear ?to)))
 )) 
","


(define (problem hanoi-11)
(:domain hanoi)
(:objects peg1 peg2 peg3 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 )
(:init
(smaller peg1 d1)
(smaller peg1 d2)
(smaller peg1 d3)
(smaller peg1 d4)
(smaller peg1 d5)
(smaller peg1 d6)
(smaller peg1 d7)
(smaller peg1 d8)
(smaller peg1 d9)
(smaller peg1 d10)
(smaller peg1 d11)
(smaller peg2 d1)
(smaller peg2 d2)
(smaller peg2 d3)
(smaller peg2 d4)
(smaller peg2 d5)
(smaller peg2 d6)
(smaller peg2 d7)
(smaller peg2 d8)
(smaller peg2 d9)
(smaller peg2 d10)
(smaller peg2 d11)
(smaller peg3 d1)
(smaller peg3 d2)
(smaller peg3 d3)
(smaller peg3 d4)
(smaller peg3 d5)
(smaller peg3 d6)
(smaller peg3 d7)
(smaller peg3 d8)
(smaller peg3 d9)
(smaller peg3 d10)
(smaller peg3 d11)
(smaller d1 d1)
(smaller d2 d1)
(smaller d3 d1)
(smaller d4 d1)
(smaller d5 d1)
(smaller d6 d1)
(smaller d7 d1)
(smaller d8 d1)
(smaller d9 d1)
(smaller d10 d1)
(smaller d11 d1)
(smaller d2 d2)
(smaller d3 d2)
(smaller d4 d2)
(smaller d5 d2)
(smaller d6 d2)
(smaller d7 d2)
(smaller d8 d2)
(smaller d9 d2)
(smaller d10 d2)
(smaller d11 d2)
(smaller d3 d3)
(smaller d4 d3)
(smaller d5 d3)
(smaller d6 d3)
(smaller d7 d3)
(smaller d8 d3)
(smaller d9 d3)
(smaller d10 d3)
(smaller d11 d3)
(smaller d4 d4)
(smaller d5 d4)
(smaller d6 d4)
(smaller d7 d4)
(smaller d8 d4)
(smaller d9 d4)
(smaller d10 d4)
(smaller d11 d4)
(smaller d5 d5)
(smaller d6 d5)
(smaller d7 d5)
(smaller d8 d5)
(smaller d9 d5)
(smaller d10 d5)
(smaller d11 d5)
(smaller d6 d6)
(smaller d7 d6)
(smaller d8 d6)
(smaller d9 d6)
(smaller d10 d6)
(smaller d11 d6)
(smaller d7 d7)
(smaller d8 d7)
(smaller d9 d7)
(smaller d10 d7)
(smaller d11 d7)
(smaller d8 d8)
(smaller d9 d8)
(smaller d10 d8)
(smaller d11 d8)
(smaller d9 d9)
(smaller d10 d9)
(smaller d11 d9)
(smaller d10 d10)
(smaller d11 d10)
(clear peg2)
            (clear peg3)
            (clear d1)
(on d11 peg1)
(on d10 d11)
(on d9 d10)
(on d8 d9)
(on d7 d8)
(on d6 d7)
(on d5 d6)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
(:goal
(and 
(on d11 peg3)
(on d10 d11)
(on d9 d10)
(on d8 d9)
(on d7 d8)
(on d6 d7)
(on d5 d6)
(on d4 d5)
(on d3 d4)
(on d2 d3)
(on d1 d2)
)
)
)


","move d1 d2 peg3 (1)
move d2 d3 peg2 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d5 d3 (1)
move d1 peg3 d2 (1)
move d5 d6 peg3 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg2 d3 (1)
move d1 d6 d2 (1)
move d6 d7 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg3 d6 (1)
move d1 d2 peg3 (1)
move d2 d3 d5 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d7 d3 (1)
move d1 peg3 d2 (1)
move d7 d8 peg3 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 peg2 d7 (1)
move d1 d2 d6 (1)
move d2 d3 peg2 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 peg2 d3 (1)
move d1 d8 d2 (1)
move d8 d9 peg2 (1)
move d1 d2 d8 (1)
move d2 d3 d9 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 peg3 d8 (1)
move d1 d2 peg3 (1)
move d2 d3 d7 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d5 d3 (1)
move d1 peg3 d2 (1)
move d5 d6 peg3 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg3 d6 (1)
move d1 d2 peg3 (1)
move d2 d3 d5 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d9 d3 (1)
move d1 peg3 d2 (1)
move d9 d10 peg3 (1)
move d1 d2 d10 (1)
move d2 d3 d9 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d5 d3 (1)
move d1 d10 d2 (1)
move d5 d6 d10 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d10 d6 (1)
move d1 d2 d10 (1)
move d2 d3 d5 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d7 d3 (1)
move d1 d10 d2 (1)
move d7 d8 d10 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d9 d3 (1)
move d1 d8 d2 (1)
move d8 peg2 d9 (1)
move d1 d2 d8 (1)
move d2 d3 peg2 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg2 d3 (1)
move d1 d6 d2 (1)
move d6 d7 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 d10 d8 (1)
move d1 d2 d10 (1)
move d2 d3 d7 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d5 d3 (1)
move d1 d10 d2 (1)
move d5 d6 d10 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 peg2 d7 (1)
move d1 d2 d6 (1)
move d2 d3 peg2 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d10 d6 (1)
move d1 d2 d10 (1)
move d2 d3 d5 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 peg2 d3 (1)
move d1 d10 d2 (1)
move d10 d11 peg2 (1)
move d1 d2 d10 (1)
move d2 d3 d11 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d11 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d11 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d5 d3 (1)
move d1 d10 d2 (1)
move d5 d6 d10 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d11 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d11 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d11 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d11 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d10 d6 (1)
move d1 d2 d10 (1)
move d2 d3 d5 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d7 d3 (1)
move d1 d10 d2 (1)
move d7 d8 d10 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d11 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d11 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d11 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d11 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d11 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d11 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d11 d3 (1)
move d1 d8 d2 (1)
move d8 d9 d11 (1)
move d1 d2 d8 (1)
move d2 d3 d9 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 d10 d8 (1)
move d1 d2 d10 (1)
move d2 d3 d7 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d5 d3 (1)
move d1 d10 d2 (1)
move d5 d6 d10 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d10 d6 (1)
move d1 d2 d10 (1)
move d2 d3 d5 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d9 d3 (1)
move d1 d10 d2 (1)
move d9 peg3 d10 (1)
move d1 d2 peg3 (1)
move d2 d3 d9 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d5 d3 (1)
move d1 peg3 d2 (1)
move d5 d6 peg3 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg3 d6 (1)
move d1 d2 peg3 (1)
move d2 d3 d5 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d7 d3 (1)
move d1 peg3 d2 (1)
move d7 d8 peg3 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d9 d3 (1)
move d1 d8 d2 (1)
move d8 d11 d9 (1)
move d1 d2 d8 (1)
move d2 d3 d11 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d11 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d11 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d11 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d11 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d11 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d11 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 peg3 d8 (1)
move d1 d2 peg3 (1)
move d2 d3 d7 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d5 d3 (1)
move d1 peg3 d2 (1)
move d5 d6 peg3 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d11 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d11 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d11 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d11 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg3 d6 (1)
move d1 d2 peg3 (1)
move d2 d3 d5 (1)
move d1 peg3 d2 (1)
move d3 d4 peg3 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d11 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d11 (1)
move d1 d4 d2 (1)
move d3 peg3 d4 (1)
move d1 d2 peg3 (1)
move d2 d11 d3 (1)
move d1 peg3 d2 (1)
move d11 peg1 peg3 (1)
move d1 d2 peg1 (1)
move d2 d3 d11 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d11 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d11 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 d5 d3 (1)
move d1 peg1 d2 (1)
move d5 d6 peg1 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d11 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d11 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d11 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d11 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg1 d6 (1)
move d1 d2 peg1 (1)
move d2 d3 d5 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 d7 d3 (1)
move d1 peg1 d2 (1)
move d7 d8 peg1 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d11 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d11 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d11 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d11 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d11 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d11 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d11 d3 (1)
move d1 d8 d2 (1)
move d8 d9 d11 (1)
move d1 d2 d8 (1)
move d2 d3 d9 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 peg1 d8 (1)
move d1 d2 peg1 (1)
move d2 d3 d7 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 d5 d3 (1)
move d1 peg1 d2 (1)
move d5 d6 peg1 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg1 d6 (1)
move d1 d2 peg1 (1)
move d2 d3 d5 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 d9 d3 (1)
move d1 peg1 d2 (1)
move d9 d10 peg1 (1)
move d1 d2 d10 (1)
move d2 d3 d9 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d5 d3 (1)
move d1 d10 d2 (1)
move d5 d6 d10 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d10 d6 (1)
move d1 d2 d10 (1)
move d2 d3 d5 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d7 d3 (1)
move d1 d10 d2 (1)
move d7 d8 d10 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d9 d3 (1)
move d1 d8 d2 (1)
move d8 d11 d9 (1)
move d1 d2 d8 (1)
move d2 d3 d11 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d11 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d11 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d11 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d11 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d11 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d11 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 d10 d8 (1)
move d1 d2 d10 (1)
move d2 d3 d7 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d5 d3 (1)
move d1 d10 d2 (1)
move d5 d6 d10 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d11 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d11 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d11 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d11 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d10 d6 (1)
move d1 d2 d10 (1)
move d2 d3 d5 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d11 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d11 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d11 d3 (1)
move d1 d10 d2 (1)
move d10 peg2 d11 (1)
move d1 d2 d10 (1)
move d2 d3 peg2 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d5 d3 (1)
move d1 d10 d2 (1)
move d5 d6 d10 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg2 d3 (1)
move d1 d6 d2 (1)
move d6 d7 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d10 d6 (1)
move d1 d2 d10 (1)
move d2 d3 d5 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d7 d3 (1)
move d1 d10 d2 (1)
move d7 d8 d10 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 peg2 d7 (1)
move d1 d2 d6 (1)
move d2 d3 peg2 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 peg2 d3 (1)
move d1 d8 d2 (1)
move d8 d9 peg2 (1)
move d1 d2 d8 (1)
move d2 d3 d9 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 d10 d8 (1)
move d1 d2 d10 (1)
move d2 d3 d7 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d5 d3 (1)
move d1 d10 d2 (1)
move d5 d6 d10 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d10 d6 (1)
move d1 d2 d10 (1)
move d2 d3 d5 (1)
move d1 d10 d2 (1)
move d3 d4 d10 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d10 d4 (1)
move d1 d2 d10 (1)
move d2 d9 d3 (1)
move d1 d10 d2 (1)
move d9 peg1 d10 (1)
move d1 d2 peg1 (1)
move d2 d3 d9 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 d5 d3 (1)
move d1 peg1 d2 (1)
move d5 d6 peg1 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d9 d3 (1)
move d1 d6 d2 (1)
move d6 d7 d9 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg1 d6 (1)
move d1 d2 peg1 (1)
move d2 d3 d5 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 d7 d3 (1)
move d1 peg1 d2 (1)
move d7 d8 peg1 (1)
move d1 d2 d8 (1)
move d2 d3 d7 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 d9 d7 (1)
move d1 d2 d6 (1)
move d2 d3 d9 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d9 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d9 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d9 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d9 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d9 d3 (1)
move d1 d8 d2 (1)
move d8 peg2 d9 (1)
move d1 d2 d8 (1)
move d2 d3 peg2 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d5 d3 (1)
move d1 d8 d2 (1)
move d5 d6 d8 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 peg2 d3 (1)
move d1 d6 d2 (1)
move d6 d7 peg2 (1)
move d1 d2 d6 (1)
move d2 d3 d7 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 d8 d6 (1)
move d1 d2 d8 (1)
move d2 d3 d5 (1)
move d1 d8 d2 (1)
move d3 d4 d8 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d8 d4 (1)
move d1 d2 d8 (1)
move d2 d7 d3 (1)
move d1 d8 d2 (1)
move d7 peg1 d8 (1)
move d1 d2 peg1 (1)
move d2 d3 d7 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d7 d3 (1)
move d1 d4 d2 (1)
move d4 d5 d7 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 d5 d3 (1)
move d1 peg1 d2 (1)
move d5 d6 peg1 (1)
move d1 d2 d6 (1)
move d2 d3 d5 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 d7 d5 (1)
move d1 d2 d4 (1)
move d2 d3 d7 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d7 d3 (1)
move d1 d6 d2 (1)
move d6 peg2 d7 (1)
move d1 d2 d6 (1)
move d2 d3 peg2 (1)
move d1 d6 d2 (1)
move d3 d4 d6 (1)
move d1 d2 d4 (1)
move d2 peg2 d3 (1)
move d1 d4 d2 (1)
move d4 d5 peg2 (1)
move d1 d2 d4 (1)
move d2 d3 d5 (1)
move d1 d4 d2 (1)
move d3 d6 d4 (1)
move d1 d2 d6 (1)
move d2 d5 d3 (1)
move d1 d6 d2 (1)
move d5 peg1 d6 (1)
move d1 d2 peg1 (1)
move d2 d3 d5 (1)
move d1 peg1 d2 (1)
move d3 d4 peg1 (1)
move d1 d2 d4 (1)
move d2 d5 d3 (1)
move d1 d4 d2 (1)
move d4 peg2 d5 (1)
move d1 d2 d4 (1)
move d2 d3 peg2 (1)
move d1 d4 d2 (1)
move d3 peg1 d4 (1)
move d1 d2 peg1 (1)
move d2 peg2 d3 (1)
move d1 peg1 d2 (1)"
logistics98,,,"load-truck package6 truck3 city3-1 (1)
drive-truck truck3 city3-1 city3-2 city3 (1)
unload-truck package6 truck3 city3-2 (1)
load-truck package4 truck1 city1-1 (1)
load-truck package3 truck1 city1-1 (1)
drive-truck truck1 city1-1 city1-2 city1 (1)
unload-truck package4 truck1 city1-2 (1)
unload-truck package3 truck1 city1-2 (1)
load-airplane package5 plane2 city4-2 (1)
fly-airplane plane2 city4-2 city1-2 (1)
load-airplane package4 plane2 city1-2 (1)
load-airplane package3 plane2 city1-2 (1)
load-airplane package2 plane2 city1-2 (1)
fly-airplane plane2 city1-2 city3-2 (1)
load-airplane package6 plane2 city3-2 (1)
unload-airplane package4 plane2 city3-2 (1)
fly-airplane plane2 city3-2 city1-2 (1)
unload-airplane package6 plane2 city1-2 (1)
fly-airplane plane2 city1-2 city6-2 (1)
unload-airplane package5 plane2 city6-2 (1)
unload-airplane package3 plane2 city6-2 (1)
unload-airplane package2 plane2 city6-2 (1)
drive-truck truck6 city6-1 city6-2 city6 (1)
load-truck package3 truck6 city6-2 (1)
drive-truck truck6 city6-2 city6-1 city6 (1)
unload-truck package3 truck6 city6-1 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f2-p1-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 
             f0 f1 )


(:init
(passenger p0)
(floor f0)
(floor f1)

(above f0 f1)
(origin p0 f1)
(destin p0 f0)

(lift-at f0)
)


(:goal (and 
(served p0)
))
)


","up f0 f1 (1)
board f1 p0 (1)
down f1 f0 (1)
depart f0 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f2-p1-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 
             f0 f1 )


(:init
(passenger p0)
(floor f0)
(floor f1)
(above f0 f1)



(origin p0 f0)
(destin p0 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
))
)


","board f0 p0 (1)
up f0 f1 (1)
depart f1 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f2-p1-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 
             f0 f1 )


(:init
(passenger p0)
(floor f0)
(floor f1)
(above f0 f1)



(origin p0 f1)
(destin p0 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
))
)


","up f0 f1 (1)
board f1 p0 (1)
down f1 f0 (1)
depart f0 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f2-p1-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 
             f0 f1 )


(:init
(passenger p0)
(floor f0)
(floor f1)
(above f0 f1)



(origin p0 f1)
(destin p0 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
))
)


","up f0 f1 (1)
board f1 p0 (1)
down f1 f0 (1)
depart f0 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f2-p1-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0
             f0 f1 )


(:init
(passenger p0)
(floor f0)
(floor f1)
(above f0 f1)



(origin p0 f1)
(destin p0 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
))
)


","up f0 f1 (1)
board f1 p0 (1)
down f1 f0 (1)
depart f0 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f4-p2-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 
             f0 f1 f2 f3)


(:init
(passenger p0)
(passenger p1)
(floor f0)
(floor f1)
(floor f2)
(floor f3)

(above f0 f1)
(above f0 f2)
(above f0 f3)

(above f1 f2)
(above f1 f3)

(above f2 f3)



(origin p0 f3)
(destin p0 f2)

(origin p1 f1)
(destin p1 f3)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
))
)


","up f0 f1 (1)
board f1 p1 (1)
up f1 f3 (1)
board f3 p0 (1)
depart f3 p1 (1)
down f3 f2 (1)
depart f2 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f4-p2-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1
             f0 f1 f2 f3)


(:init
(passenger p0)
(passenger p1)
(floor f0)
(floor f1)
(floor f2)
(floor f3)

(above f0 f1)
(above f0 f2)
(above f0 f3)

(above f1 f2)
(above f1 f3)

(above f2 f3)



(origin p0 f0)
(destin p0 f1)

(origin p1 f3)
(destin p1 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
))
)


","board f0 p0 (1)
up f0 f1 (1)
depart f1 p0 (1)
up f1 f3 (1)
board f3 p1 (1)
down f3 f0 (1)
depart f0 p1 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f4-p2-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 
             f0 f1 f2 f3 )


(:init
(passenger p0)
(passenger p1)
(floor f0)
(floor f1)
(floor f2)
(floor f3)

(above f0 f1)
(above f0 f2)
(above f0 f3)

(above f1 f2)
(above f1 f3)

(above f2 f3)



(origin p0 f3)
(destin p0 f0)

(origin p1 f0)
(destin p1 f2)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
))
)


","board f0 p1 (1)
up f0 f2 (1)
depart f2 p1 (1)
up f2 f3 (1)
board f3 p0 (1)
down f3 f0 (1)
depart f0 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f4-p2-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1
             f0 f1 f2 f3)


(:init
(passenger p0)
(passenger p1)
(floor f0)
(floor f1)
(floor f2)
(floor f3)

(above f0 f1)
(above f0 f2)
(above f0 f3)

(above f1 f2)
(above f1 f3)

(above f2 f3)



(origin p0 f1)
(destin p0 f3)

(origin p1 f2)
(destin p1 f3)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
))
)


","up f0 f1 (1)
board f1 p0 (1)
up f1 f2 (1)
board f2 p1 (1)
up f2 f3 (1)
depart f3 p1 (1)
depart f3 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f4-p2-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1
             f0 f1 f2 f3 )


(:init
(passenger p0)
(passenger p1)
(floor f0)
(floor f1)
(floor f2)
(floor f3)

(above f0 f1)
(above f0 f2)
(above f0 f3)

(above f1 f2)
(above f1 f3)

(above f2 f3)



(origin p0 f3)
(destin p0 f2)

(origin p1 f2)
(destin p1 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
))
)


","up f0 f3 (1)
board f3 p0 (1)
down f3 f2 (1)
board f2 p1 (1)
depart f2 p0 (1)
down f2 f0 (1)
depart f0 p1 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f6-p3-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 
             f0 f1 f2 f3 f4 f5 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)

(above f2 f3)
(above f2 f4)
(above f2 f5)

(above f3 f4)
(above f3 f5)

(above f4 f5)



(origin p0 f1)
(destin p0 f4)

(origin p1 f3)
(destin p1 f1)

(origin p2 f5)
(destin p2 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
))
)


","up f0 f3 (1)
board f3 p1 (1)
up f3 f5 (1)
board f5 p2 (1)
down f5 f1 (1)
board f1 p0 (1)
depart f1 p2 (1)
depart f1 p1 (1)
up f1 f4 (1)
depart f4 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f6-p3-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 
             f0 f1 f2 f3 f4 f5 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)

(above f2 f3)
(above f2 f4)
(above f2 f5)

(above f3 f4)
(above f3 f5)

(above f4 f5)



(origin p0 f2)
(destin p0 f5)

(origin p1 f5)
(destin p1 f2)

(origin p2 f4)
(destin p2 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
))
)


","up f0 f4 (1)
board f4 p2 (1)
down f4 f1 (1)
depart f1 p2 (1)
up f1 f2 (1)
board f2 p0 (1)
up f2 f5 (1)
board f5 p1 (1)
depart f5 p0 (1)
down f5 f2 (1)
depart f2 p1 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f6-p3-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 
             f0 f1 f2 f3 f4 f5 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)

(above f2 f3)
(above f2 f4)
(above f2 f5)

(above f3 f4)
(above f3 f5)

(above f4 f5)



(origin p0 f1)
(destin p0 f0)

(origin p1 f4)
(destin p1 f0)

(origin p2 f3)
(destin p2 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
))
)


","up f0 f1 (1)
board f1 p0 (1)
up f1 f3 (1)
board f3 p2 (1)
up f3 f4 (1)
board f4 p1 (1)
down f4 f0 (1)
depart f0 p2 (1)
depart f0 p1 (1)
depart f0 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f6-p3-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 
             f0 f1 f2 f3 f4 f5 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)

(above f2 f3)
(above f2 f4)
(above f2 f5)

(above f3 f4)
(above f3 f5)

(above f4 f5)



(origin p0 f5)
(destin p0 f0)

(origin p1 f1)
(destin p1 f3)

(origin p2 f0)
(destin p2 f5)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
))
)


","board f0 p2 (1)
up f0 f1 (1)
board f1 p1 (1)
up f1 f3 (1)
depart f3 p1 (1)
up f3 f5 (1)
board f5 p0 (1)
depart f5 p2 (1)
down f5 f0 (1)
depart f0 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f6-p3-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 
             f0 f1 f2 f3 f4 f5 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)

(above f2 f3)
(above f2 f4)
(above f2 f5)

(above f3 f4)
(above f3 f5)

(above f4 f5)



(origin p0 f3)
(destin p0 f0)

(origin p1 f2)
(destin p1 f0)

(origin p2 f0)
(destin p2 f4)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
))
)


","board f0 p2 (1)
up f0 f2 (1)
board f2 p1 (1)
up f2 f3 (1)
board f3 p0 (1)
down f3 f0 (1)
depart f0 p1 (1)
depart f0 p0 (1)
up f0 f4 (1)
depart f4 p2 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f8-p4-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3
             f0 f1 f2 f3 f4 f5 f6 f7)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)

(above f4 f5)
(above f4 f6)
(above f4 f7)

(above f5 f6)
(above f5 f7)

(above f6 f7)



(origin p0 f7)
(destin p0 f6)

(origin p1 f1)
(destin p1 f3)

(origin p2 f1)
(destin p2 f7)

(origin p3 f2)
(destin p3 f4)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
))
)


","up f0 f1 (1)
board f1 p1 (1)
board f1 p2 (1)
up f1 f2 (1)
board f2 p3 (1)
up f2 f3 (1)
depart f3 p1 (1)
up f3 f4 (1)
depart f4 p3 (1)
up f4 f7 (1)
board f7 p0 (1)
depart f7 p2 (1)
down f7 f6 (1)
depart f6 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f8-p4-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 
             f0 f1 f2 f3 f4 f5 f6 f7 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)

(above f4 f5)
(above f4 f6)
(above f4 f7)

(above f5 f6)
(above f5 f7)

(above f6 f7)



(origin p0 f0)
(destin p0 f5)

(origin p1 f7)
(destin p1 f4)

(origin p2 f0)
(destin p2 f7)

(origin p3 f1)
(destin p3 f6)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
))
)


","board f0 p0 (1)
board f0 p2 (1)
up f0 f1 (1)
board f1 p3 (1)
up f1 f5 (1)
depart f5 p0 (1)
up f5 f6 (1)
depart f6 p3 (1)
up f6 f7 (1)
board f7 p1 (1)
depart f7 p2 (1)
down f7 f4 (1)
depart f4 p1 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f8-p4-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 
             f0 f1 f2 f3 f4 f5 f6 f7 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)

(above f4 f5)
(above f4 f6)
(above f4 f7)

(above f5 f6)
(above f5 f7)

(above f6 f7)



(origin p0 f3)
(destin p0 f0)

(origin p1 f4)
(destin p1 f2)

(origin p2 f1)
(destin p2 f6)

(origin p3 f6)
(destin p3 f7)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
))
)


","up f0 f1 (1)
board f1 p2 (1)
up f1 f3 (1)
board f3 p0 (1)
down f3 f0 (1)
depart f0 p0 (1)
up f0 f4 (1)
board f4 p1 (1)
down f4 f2 (1)
depart f2 p1 (1)
up f2 f6 (1)
board f6 p3 (1)
depart f6 p2 (1)
up f6 f7 (1)
depart f7 p3 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f8-p4-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 
             f0 f1 f2 f3 f4 f5 f6 f7 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)

(above f4 f5)
(above f4 f6)
(above f4 f7)

(above f5 f6)
(above f5 f7)

(above f6 f7)



(origin p0 f1)
(destin p0 f7)

(origin p1 f6)
(destin p1 f3)

(origin p2 f3)
(destin p2 f4)

(origin p3 f5)
(destin p3 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
))
)


","up f0 f1 (1)
board f1 p0 (1)
up f1 f5 (1)
board f5 p3 (1)
down f5 f0 (1)
depart f0 p3 (1)
up f0 f6 (1)
board f6 p1 (1)
down f6 f3 (1)
board f3 p2 (1)
depart f3 p1 (1)
up f3 f4 (1)
depart f4 p2 (1)
up f4 f7 (1)
depart f7 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f8-p4-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 
             f0 f1 f2 f3 f4 f5 f6 f7 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)

(above f4 f5)
(above f4 f6)
(above f4 f7)

(above f5 f6)
(above f5 f7)

(above f6 f7)



(origin p0 f7)
(destin p0 f2)

(origin p1 f2)
(destin p1 f4)

(origin p2 f6)
(destin p2 f3)

(origin p3 f5)
(destin p3 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
))
)


","up f0 f5 (1)
board f5 p3 (1)
down f5 f1 (1)
depart f1 p3 (1)
up f1 f6 (1)
board f6 p2 (1)
down f6 f3 (1)
depart f3 p2 (1)
up f3 f7 (1)
board f7 p0 (1)
down f7 f2 (1)
board f2 p1 (1)
depart f2 p0 (1)
up f2 f4 (1)
depart f4 p1 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f10-p5-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)

(above f6 f7)
(above f6 f8)
(above f6 f9)

(above f7 f8)
(above f7 f9)

(above f8 f9)



(origin p0 f3)
(destin p0 f6)

(origin p1 f7)
(destin p1 f5)

(origin p2 f3)
(destin p2 f5)

(origin p3 f6)
(destin p3 f2)

(origin p4 f9)
(destin p4 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
))
)


","up f0 f3 (1)
board f3 p0 (1)
board f3 p2 (1)
up f3 f6 (1)
board f6 p3 (1)
depart f6 p0 (1)
down f6 f2 (1)
depart f2 p3 (1)
up f2 f7 (1)
board f7 p1 (1)
down f7 f5 (1)
depart f5 p2 (1)
depart f5 p1 (1)
up f5 f9 (1)
board f9 p4 (1)
down f9 f1 (1)
depart f1 p4 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f10-p5-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)

(above f6 f7)
(above f6 f8)
(above f6 f9)

(above f7 f8)
(above f7 f9)

(above f8 f9)



(origin p0 f0)
(destin p0 f1)

(origin p1 f9)
(destin p1 f4)

(origin p2 f6)
(destin p2 f3)

(origin p3 f5)
(destin p3 f0)

(origin p4 f1)
(destin p4 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
))
)


","board f0 p0 (1)
up f0 f1 (1)
board f1 p4 (1)
depart f1 p0 (1)
up f1 f5 (1)
board f5 p3 (1)
down f5 f0 (1)
depart f0 p4 (1)
depart f0 p3 (1)
up f0 f6 (1)
board f6 p2 (1)
down f6 f3 (1)
depart f3 p2 (1)
up f3 f9 (1)
board f9 p1 (1)
down f9 f4 (1)
depart f4 p1 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f10-p5-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)

(above f6 f7)
(above f6 f8)
(above f6 f9)

(above f7 f8)
(above f7 f9)

(above f8 f9)



(origin p0 f3)
(destin p0 f0)

(origin p1 f4)
(destin p1 f2)

(origin p2 f3)
(destin p2 f4)

(origin p3 f0)
(destin p3 f4)

(origin p4 f9)
(destin p4 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
))
)


","board f0 p3 (1)
up f0 f3 (1)
board f3 p0 (1)
board f3 p2 (1)
up f3 f4 (1)
board f4 p1 (1)
depart f4 p3 (1)
depart f4 p2 (1)
down f4 f2 (1)
depart f2 p1 (1)
up f2 f9 (1)
board f9 p4 (1)
down f9 f0 (1)
depart f0 p4 (1)
depart f0 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f10-p5-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)

(above f6 f7)
(above f6 f8)
(above f6 f9)

(above f7 f8)
(above f7 f9)

(above f8 f9)



(origin p0 f3)
(destin p0 f5)

(origin p1 f6)
(destin p1 f9)

(origin p2 f9)
(destin p2 f8)

(origin p3 f5)
(destin p3 f8)

(origin p4 f1)
(destin p4 f2)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
))
)


","up f0 f1 (1)
board f1 p4 (1)
up f1 f2 (1)
depart f2 p4 (1)
up f2 f3 (1)
board f3 p0 (1)
up f3 f5 (1)
board f5 p3 (1)
depart f5 p0 (1)
up f5 f6 (1)
board f6 p1 (1)
up f6 f9 (1)
board f9 p2 (1)
depart f9 p1 (1)
down f9 f8 (1)
depart f8 p3 (1)
depart f8 p2 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f10-p5-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)

(above f6 f7)
(above f6 f8)
(above f6 f9)

(above f7 f8)
(above f7 f9)

(above f8 f9)



(origin p0 f5)
(destin p0 f1)

(origin p1 f2)
(destin p1 f0)

(origin p2 f2)
(destin p2 f8)

(origin p3 f7)
(destin p3 f5)

(origin p4 f9)
(destin p4 f4)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
))
)


","up f0 f2 (1)
board f2 p1 (1)
board f2 p2 (1)
down f2 f0 (1)
depart f0 p1 (1)
up f0 f7 (1)
board f7 p3 (1)
down f7 f5 (1)
board f5 p0 (1)
depart f5 p3 (1)
down f5 f1 (1)
depart f1 p0 (1)
up f1 f8 (1)
depart f8 p2 (1)
up f8 f9 (1)
board f9 p4 (1)
down f9 f4 (1)
depart f4 p4 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f12-p6-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)

(above f8 f9)
(above f8 f10)
(above f8 f11)

(above f9 f10)
(above f9 f11)

(above f10 f11)



(origin p0 f7)
(destin p0 f10)

(origin p1 f9)
(destin p1 f7)

(origin p2 f5)
(destin p2 f7)

(origin p3 f10)
(destin p3 f0)

(origin p4 f9)
(destin p4 f1)

(origin p5 f2)
(destin p5 f7)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
))
)


","up f0 f2 (1)
board f2 p5 (1)
up f2 f5 (1)
board f5 p2 (1)
up f5 f9 (1)
board f9 p1 (1)
board f9 p4 (1)
down f9 f1 (1)
depart f1 p4 (1)
up f1 f7 (1)
board f7 p0 (1)
depart f7 p5 (1)
depart f7 p2 (1)
depart f7 p1 (1)
up f7 f10 (1)
board f10 p3 (1)
depart f10 p0 (1)
down f10 f0 (1)
depart f0 p3 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","


(define (problem mixed-f12-p6-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)

(above f8 f9)
(above f8 f10)
(above f8 f11)

(above f9 f10)
(above f9 f11)

(above f10 f11)



(origin p0 f8)
(destin p0 f5)

(origin p1 f11)
(destin p1 f8)

(origin p2 f4)
(destin p2 f7)

(origin p3 f1)
(destin p3 f10)

(origin p4 f1)
(destin p4 f7)

(origin p5 f0)
(destin p5 f4)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
))
)


","board f0 p5 (1)
up f0 f1 (1)
board f1 p3 (1)
board f1 p4 (1)
up f1 f10 (1)
depart f10 p3 (1)
down f10 f4 (1)
board f4 p2 (1)
depart f4 p5 (1)
up f4 f11 (1)
board f11 p1 (1)
down f11 f7 (1)
depart f7 p4 (1)
depart f7 p2 (1)
up f7 f8 (1)
board f8 p0 (1)
depart f8 p1 (1)
down f8 f5 (1)
depart f5 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f12-p6-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)

(above f8 f9)
(above f8 f10)
(above f8 f11)

(above f9 f10)
(above f9 f11)

(above f10 f11)



(origin p0 f7)
(destin p0 f0)

(origin p1 f4)
(destin p1 f6)

(origin p2 f9)
(destin p2 f6)

(origin p3 f2)
(destin p3 f7)

(origin p4 f3)
(destin p4 f2)

(origin p5 f11)
(destin p5 f7)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
))
)


","up f0 f11 (1)
board f11 p5 (1)
down f11 f3 (1)
board f3 p4 (1)
down f3 f2 (1)
board f2 p3 (1)
depart f2 p4 (1)
up f2 f4 (1)
board f4 p1 (1)
up f4 f7 (1)
board f7 p0 (1)
depart f7 p5 (1)
depart f7 p3 (1)
down f7 f0 (1)
depart f0 p0 (1)
up f0 f9 (1)
board f9 p2 (1)
down f9 f6 (1)
depart f6 p2 (1)
depart f6 p1 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f12-p6-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)

(above f8 f9)
(above f8 f10)
(above f8 f11)

(above f9 f10)
(above f9 f11)

(above f10 f11)



(origin p0 f5)
(destin p0 f11)

(origin p1 f6)
(destin p1 f7)

(origin p2 f3)
(destin p2 f0)

(origin p3 f5)
(destin p3 f0)

(origin p4 f3)
(destin p4 f8)

(origin p5 f7)
(destin p5 f6)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
))
)


","up f0 f3 (1)
board f3 p2 (1)
board f3 p4 (1)
up f3 f5 (1)
board f5 p0 (1)
board f5 p3 (1)
down f5 f0 (1)
depart f0 p3 (1)
depart f0 p2 (1)
up f0 f11 (1)
depart f11 p0 (1)
down f11 f8 (1)
depart f8 p4 (1)
down f8 f6 (1)
board f6 p1 (1)
up f6 f7 (1)
board f7 p5 (1)
depart f7 p1 (1)
down f7 f6 (1)
depart f6 p5 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f12-p6-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)

(above f8 f9)
(above f8 f10)
(above f8 f11)

(above f9 f10)
(above f9 f11)

(above f10 f11)



(origin p0 f3)
(destin p0 f6)

(origin p1 f2)
(destin p1 f0)

(origin p2 f6)
(destin p2 f10)

(origin p3 f11)
(destin p3 f9)

(origin p4 f9)
(destin p4 f8)

(origin p5 f2)
(destin p5 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
))
)


","up f0 f11 (1)
board f11 p3 (1)
down f11 f2 (1)
board f2 p1 (1)
board f2 p5 (1)
down f2 f0 (1)
depart f0 p1 (1)
up f0 f1 (1)
depart f1 p5 (1)
up f1 f3 (1)
board f3 p0 (1)
up f3 f6 (1)
board f6 p2 (1)
depart f6 p0 (1)
up f6 f10 (1)
depart f10 p2 (1)
down f10 f9 (1)
board f9 p4 (1)
depart f9 p3 (1)
down f9 f8 (1)
depart f8 p4 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f14-p7-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)

(above f10 f11)
(above f10 f12)
(above f10 f13)

(above f11 f12)
(above f11 f13)

(above f12 f13)



(origin p0 f1)
(destin p0 f4)

(origin p1 f9)
(destin p1 f5)

(origin p2 f1)
(destin p2 f3)

(origin p3 f10)
(destin p3 f2)

(origin p4 f1)
(destin p4 f3)

(origin p5 f2)
(destin p5 f5)

(origin p6 f6)
(destin p6 f11)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
))
)


","up f0 f1 (1)
board f1 p0 (1)
board f1 p2 (1)
board f1 p4 (1)
up f1 f10 (1)
board f10 p3 (1)
down f10 f2 (1)
board f2 p5 (1)
depart f2 p3 (1)
up f2 f3 (1)
depart f3 p4 (1)
depart f3 p2 (1)
up f3 f4 (1)
depart f4 p0 (1)
up f4 f6 (1)
board f6 p6 (1)
up f6 f11 (1)
depart f11 p6 (1)
down f11 f9 (1)
board f9 p1 (1)
down f9 f5 (1)
depart f5 p5 (1)
depart f5 p1 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f14-p7-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)

(above f10 f11)
(above f10 f12)
(above f10 f13)

(above f11 f12)
(above f11 f13)

(above f12 f13)



(origin p0 f8)
(destin p0 f1)

(origin p1 f7)
(destin p1 f10)

(origin p2 f2)
(destin p2 f7)

(origin p3 f13)
(destin p3 f2)

(origin p4 f9)
(destin p4 f5)

(origin p5 f6)
(destin p5 f4)

(origin p6 f1)
(destin p6 f5)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
))
)


","up f0 f13 (1)
board f13 p3 (1)
down f13 f2 (1)
board f2 p2 (1)
depart f2 p3 (1)
up f2 f6 (1)
board f6 p5 (1)
down f6 f4 (1)
depart f4 p5 (1)
up f4 f7 (1)
board f7 p1 (1)
depart f7 p2 (1)
up f7 f10 (1)
depart f10 p1 (1)
down f10 f8 (1)
board f8 p0 (1)
down f8 f1 (1)
board f1 p6 (1)
depart f1 p0 (1)
up f1 f9 (1)
board f9 p4 (1)
down f9 f5 (1)
depart f5 p6 (1)
depart f5 p4 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f14-p7-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)

(above f10 f11)
(above f10 f12)
(above f10 f13)

(above f11 f12)
(above f11 f13)

(above f12 f13)



(origin p0 f9)
(destin p0 f8)

(origin p1 f0)
(destin p1 f2)

(origin p2 f13)
(destin p2 f2)

(origin p3 f2)
(destin p3 f4)

(origin p4 f1)
(destin p4 f7)

(origin p5 f2)
(destin p5 f9)

(origin p6 f13)
(destin p6 f6)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
))
)


","board f0 p1 (1)
up f0 f1 (1)
board f1 p4 (1)
up f1 f13 (1)
board f13 p2 (1)
board f13 p6 (1)
down f13 f2 (1)
board f2 p3 (1)
board f2 p5 (1)
depart f2 p2 (1)
depart f2 p1 (1)
up f2 f4 (1)
depart f4 p3 (1)
up f4 f6 (1)
depart f6 p6 (1)
up f6 f7 (1)
depart f7 p4 (1)
up f7 f9 (1)
board f9 p0 (1)
depart f9 p5 (1)
down f9 f8 (1)
depart f8 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f14-p7-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)

(above f10 f11)
(above f10 f12)
(above f10 f13)

(above f11 f12)
(above f11 f13)

(above f12 f13)



(origin p0 f7)
(destin p0 f5)

(origin p1 f0)
(destin p1 f13)

(origin p2 f9)
(destin p2 f6)

(origin p3 f7)
(destin p3 f2)

(origin p4 f13)
(destin p4 f12)

(origin p5 f5)
(destin p5 f12)

(origin p6 f0)
(destin p6 f8)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
))
)


","board f0 p1 (1)
board f0 p6 (1)
up f0 f13 (1)
board f13 p4 (1)
depart f13 p1 (1)
down f13 f7 (1)
board f7 p0 (1)
board f7 p3 (1)
down f7 f2 (1)
depart f2 p3 (1)
up f2 f5 (1)
board f5 p5 (1)
depart f5 p0 (1)
up f5 f12 (1)
depart f12 p5 (1)
depart f12 p4 (1)
down f12 f8 (1)
depart f8 p6 (1)
up f8 f9 (1)
board f9 p2 (1)
down f9 f6 (1)
depart f6 p2 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f14-p7-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)

(above f10 f11)
(above f10 f12)
(above f10 f13)

(above f11 f12)
(above f11 f13)

(above f12 f13)



(origin p0 f5)
(destin p0 f13)

(origin p1 f12)
(destin p1 f10)

(origin p2 f0)
(destin p2 f6)

(origin p3 f7)
(destin p3 f1)

(origin p4 f3)
(destin p4 f4)

(origin p5 f8)
(destin p5 f11)

(origin p6 f8)
(destin p6 f1)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
))
)


","board f0 p2 (1)
up f0 f12 (1)
board f12 p1 (1)
down f12 f10 (1)
depart f10 p1 (1)
down f10 f3 (1)
board f3 p4 (1)
up f3 f4 (1)
depart f4 p4 (1)
up f4 f5 (1)
board f5 p0 (1)
up f5 f13 (1)
depart f13 p0 (1)
down f13 f6 (1)
depart f6 p2 (1)
up f6 f7 (1)
board f7 p3 (1)
up f7 f8 (1)
board f8 p5 (1)
board f8 p6 (1)
down f8 f1 (1)
depart f1 p6 (1)
depart f1 p3 (1)
up f1 f11 (1)
depart f11 p5 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f16-p8-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)

(above f12 f13)
(above f12 f14)
(above f12 f15)

(above f13 f14)
(above f13 f15)

(above f14 f15)



(origin p0 f7)
(destin p0 f6)

(origin p1 f9)
(destin p1 f3)

(origin p2 f1)
(destin p2 f15)

(origin p3 f10)
(destin p3 f12)

(origin p4 f9)
(destin p4 f13)

(origin p5 f10)
(destin p5 f11)

(origin p6 f2)
(destin p6 f11)

(origin p7 f3)
(destin p7 f6)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
))
)


","up f0 f1 (1)
board f1 p2 (1)
up f1 f10 (1)
board f10 p3 (1)
board f10 p5 (1)
down f10 f2 (1)
board f2 p6 (1)
up f2 f11 (1)
depart f11 p6 (1)
depart f11 p5 (1)
down f11 f7 (1)
board f7 p0 (1)
up f7 f12 (1)
depart f12 p3 (1)
down f12 f9 (1)
board f9 p1 (1)
board f9 p4 (1)
down f9 f3 (1)
board f3 p7 (1)
depart f3 p1 (1)
up f3 f13 (1)
depart f13 p4 (1)
down f13 f6 (1)
depart f6 p7 (1)
depart f6 p0 (1)
up f6 f15 (1)
depart f15 p2 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f16-p8-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)

(above f12 f13)
(above f12 f14)
(above f12 f15)

(above f13 f14)
(above f13 f15)

(above f14 f15)



(origin p0 f8)
(destin p0 f5)

(origin p1 f7)
(destin p1 f12)

(origin p2 f0)
(destin p2 f7)

(origin p3 f1)
(destin p3 f6)

(origin p4 f5)
(destin p4 f3)

(origin p5 f4)
(destin p5 f13)

(origin p6 f3)
(destin p6 f2)

(origin p7 f13)
(destin p7 f4)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
))
)


","board f0 p2 (1)
up f0 f1 (1)
board f1 p3 (1)
up f1 f6 (1)
depart f6 p3 (1)
up f6 f7 (1)
board f7 p1 (1)
depart f7 p2 (1)
up f7 f12 (1)
depart f12 p1 (1)
down f12 f8 (1)
board f8 p0 (1)
down f8 f5 (1)
board f5 p4 (1)
depart f5 p0 (1)
down f5 f3 (1)
board f3 p6 (1)
depart f3 p4 (1)
down f3 f2 (1)
depart f2 p6 (1)
up f2 f13 (1)
board f13 p7 (1)
down f13 f4 (1)
board f4 p5 (1)
depart f4 p7 (1)
up f4 f13 (1)
depart f13 p5 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f16-p8-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)

(above f12 f13)
(above f12 f14)
(above f12 f15)

(above f13 f14)
(above f13 f15)

(above f14 f15)



(origin p0 f11)
(destin p0 f0)

(origin p1 f4)
(destin p1 f10)

(origin p2 f9)
(destin p2 f14)

(origin p3 f6)
(destin p3 f14)

(origin p4 f15)
(destin p4 f7)

(origin p5 f10)
(destin p5 f11)

(origin p6 f15)
(destin p6 f2)

(origin p7 f2)
(destin p7 f14)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
))
)


","up f0 f15 (1)
board f15 p4 (1)
board f15 p6 (1)
down f15 f2 (1)
board f2 p7 (1)
depart f2 p6 (1)
up f2 f4 (1)
board f4 p1 (1)
up f4 f10 (1)
board f10 p5 (1)
depart f10 p1 (1)
down f10 f6 (1)
board f6 p3 (1)
up f6 f11 (1)
board f11 p0 (1)
depart f11 p5 (1)
down f11 f0 (1)
depart f0 p0 (1)
up f0 f7 (1)
depart f7 p4 (1)
up f7 f9 (1)
board f9 p2 (1)
up f9 f14 (1)
depart f14 p7 (1)
depart f14 p3 (1)
depart f14 p2 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f16-p8-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)

(above f12 f13)
(above f12 f14)
(above f12 f15)

(above f13 f14)
(above f13 f15)

(above f14 f15)



(origin p0 f1)
(destin p0 f15)

(origin p1 f14)
(destin p1 f3)

(origin p2 f3)
(destin p2 f12)

(origin p3 f5)
(destin p3 f0)

(origin p4 f3)
(destin p4 f8)

(origin p5 f7)
(destin p5 f6)

(origin p6 f0)
(destin p6 f14)

(origin p7 f10)
(destin p7 f11)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
))
)


","board f0 p6 (1)
up f0 f1 (1)
board f1 p0 (1)
up f1 f10 (1)
board f10 p7 (1)
down f10 f5 (1)
board f5 p3 (1)
down f5 f0 (1)
depart f0 p3 (1)
up f0 f11 (1)
depart f11 p7 (1)
down f11 f7 (1)
board f7 p5 (1)
down f7 f6 (1)
depart f6 p5 (1)
up f6 f14 (1)
board f14 p1 (1)
depart f14 p6 (1)
down f14 f3 (1)
board f3 p2 (1)
board f3 p4 (1)
depart f3 p1 (1)
up f3 f12 (1)
depart f12 p2 (1)
down f12 f8 (1)
depart f8 p4 (1)
up f8 f15 (1)
depart f15 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f16-p8-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)

(above f12 f13)
(above f12 f14)
(above f12 f15)

(above f13 f14)
(above f13 f15)

(above f14 f15)



(origin p0 f15)
(destin p0 f7)

(origin p1 f2)
(destin p1 f4)

(origin p2 f14)
(destin p2 f6)

(origin p3 f11)
(destin p3 f13)

(origin p4 f1)
(destin p4 f0)

(origin p5 f6)
(destin p5 f13)

(origin p6 f6)
(destin p6 f3)

(origin p7 f14)
(destin p7 f13)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
))
)


","up f0 f1 (1)
board f1 p4 (1)
down f1 f0 (1)
depart f0 p4 (1)
up f0 f11 (1)
board f11 p3 (1)
down f11 f2 (1)
board f2 p1 (1)
up f2 f14 (1)
board f14 p2 (1)
board f14 p7 (1)
down f14 f4 (1)
depart f4 p1 (1)
up f4 f15 (1)
board f15 p0 (1)
down f15 f6 (1)
board f6 p5 (1)
board f6 p6 (1)
depart f6 p2 (1)
down f6 f3 (1)
depart f3 p6 (1)
up f3 f13 (1)
depart f13 p7 (1)
depart f13 p5 (1)
depart f13 p3 (1)
down f13 f7 (1)
depart f7 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f18-p9-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(passenger p8)

(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)
(floor f16)
(floor f17)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)

(above f14 f15)
(above f14 f16)
(above f14 f17)

(above f15 f16)
(above f15 f17)

(above f16 f17)



(origin p0 f1)
(destin p0 f16)

(origin p1 f9)
(destin p1 f7)

(origin p2 f5)
(destin p2 f7)

(origin p3 f10)
(destin p3 f12)

(origin p4 f15)
(destin p4 f1)

(origin p5 f14)
(destin p5 f13)

(origin p6 f14)
(destin p6 f7)

(origin p7 f5)
(destin p7 f4)

(origin p8 f6)
(destin p8 f0)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
))
)


","up f0 f10 (1)
board f10 p3 (1)
down f10 f5 (1)
board f5 p2 (1)
board f5 p7 (1)
down f5 f4 (1)
depart f4 p7 (1)
up f4 f12 (1)
depart f12 p3 (1)
down f12 f6 (1)
board f6 p8 (1)
down f6 f0 (1)
depart f0 p8 (1)
up f0 f14 (1)
board f14 p5 (1)
board f14 p6 (1)
down f14 f13 (1)
depart f13 p5 (1)
down f13 f9 (1)
board f9 p1 (1)
down f9 f7 (1)
depart f7 p6 (1)
depart f7 p2 (1)
depart f7 p1 (1)
up f7 f15 (1)
board f15 p4 (1)
down f15 f1 (1)
board f1 p0 (1)
depart f1 p4 (1)
up f1 f16 (1)
depart f16 p0 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f18-p9-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(passenger p8)

(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)
(floor f16)
(floor f17)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)

(above f14 f15)
(above f14 f16)
(above f14 f17)

(above f15 f16)
(above f15 f17)

(above f16 f17)



(origin p0 f2)
(destin p0 f5)

(origin p1 f17)
(destin p1 f2)

(origin p2 f16)
(destin p2 f1)

(origin p3 f1)
(destin p3 f10)

(origin p4 f13)
(destin p4 f7)

(origin p5 f0)
(destin p5 f4)

(origin p6 f17)
(destin p6 f0)

(origin p7 f7)
(destin p7 f10)

(origin p8 f6)
(destin p8 f12)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
))
)


","board f0 p5 (1)
up f0 f13 (1)
board f13 p4 (1)
down f13 f4 (1)
depart f4 p5 (1)
up f4 f16 (1)
board f16 p2 (1)
down f16 f1 (1)
board f1 p3 (1)
depart f1 p2 (1)
up f1 f17 (1)
board f17 p1 (1)
board f17 p6 (1)
down f17 f0 (1)
depart f0 p6 (1)
up f0 f2 (1)
board f2 p0 (1)
depart f2 p1 (1)
up f2 f5 (1)
depart f5 p0 (1)
up f5 f6 (1)
board f6 p8 (1)
up f6 f12 (1)
depart f12 p8 (1)
down f12 f7 (1)
board f7 p7 (1)
depart f7 p4 (1)
up f7 f10 (1)
depart f10 p7 (1)
depart f10 p3 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f18-p9-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(passenger p8)

(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)
(floor f16)
(floor f17)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)

(above f14 f15)
(above f14 f16)
(above f14 f17)

(above f15 f16)
(above f15 f17)

(above f16 f17)



(origin p0 f13)
(destin p0 f12)

(origin p1 f16)
(destin p1 f0)

(origin p2 f3)
(destin p2 f12)

(origin p3 f2)
(destin p3 f14)

(origin p4 f7)
(destin p4 f3)

(origin p5 f8)
(destin p5 f5)

(origin p6 f13)
(destin p6 f8)

(origin p7 f0)
(destin p7 f12)

(origin p8 f1)
(destin p8 f9)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
))
)


","board f0 p7 (1)
up f0 f1 (1)
board f1 p8 (1)
up f1 f13 (1)
board f13 p0 (1)
board f13 p6 (1)
down f13 f2 (1)
board f2 p3 (1)
up f2 f14 (1)
depart f14 p3 (1)
down f14 f7 (1)
board f7 p4 (1)
down f7 f3 (1)
board f3 p2 (1)
depart f3 p4 (1)
up f3 f12 (1)
depart f12 p7 (1)
depart f12 p2 (1)
depart f12 p0 (1)
down f12 f8 (1)
board f8 p5 (1)
depart f8 p6 (1)
down f8 f5 (1)
depart f5 p5 (1)
up f5 f16 (1)
board f16 p1 (1)
down f16 f0 (1)
depart f0 p1 (1)
up f0 f9 (1)
depart f9 p8 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f18-p9-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(passenger p8)

(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)
(floor f16)
(floor f17)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)

(above f14 f15)
(above f14 f16)
(above f14 f17)

(above f15 f16)
(above f15 f17)

(above f16 f17)



(origin p0 f11)
(destin p0 f0)

(origin p1 f13)
(destin p1 f3)

(origin p2 f6)
(destin p2 f5)

(origin p3 f6)
(destin p3 f15)

(origin p4 f14)
(destin p4 f7)

(origin p5 f6)
(destin p5 f16)

(origin p6 f12)
(destin p6 f4)

(origin p7 f1)
(destin p7 f8)

(origin p8 f1)
(destin p8 f8)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
))
)


","up f0 f1 (1)
board f1 p7 (1)
board f1 p8 (1)
up f1 f11 (1)
board f11 p0 (1)
down f11 f0 (1)
depart f0 p0 (1)
up f0 f12 (1)
board f12 p6 (1)
down f12 f4 (1)
depart f4 p6 (1)
up f4 f13 (1)
board f13 p1 (1)
down f13 f3 (1)
depart f3 p1 (1)
up f3 f14 (1)
board f14 p4 (1)
down f14 f6 (1)
board f6 p2 (1)
board f6 p3 (1)
board f6 p5 (1)
down f6 f5 (1)
depart f5 p2 (1)
up f5 f15 (1)
depart f15 p3 (1)
down f15 f7 (1)
depart f7 p4 (1)
up f7 f16 (1)
depart f16 p5 (1)
down f16 f8 (1)
depart f8 p8 (1)
depart f8 p7 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f18-p9-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(passenger p8)

(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)
(floor f16)
(floor f17)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)

(above f14 f15)
(above f14 f16)
(above f14 f17)

(above f15 f16)
(above f15 f17)

(above f16 f17)



(origin p0 f9)
(destin p0 f15)

(origin p1 f12)
(destin p1 f2)

(origin p2 f0)
(destin p2 f10)

(origin p3 f17)
(destin p3 f15)

(origin p4 f3)
(destin p4 f2)

(origin p5 f2)
(destin p5 f1)

(origin p6 f2)
(destin p6 f3)

(origin p7 f0)
(destin p7 f15)

(origin p8 f2)
(destin p8 f13)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
))
)


","board f0 p2 (1)
board f0 p7 (1)
up f0 f10 (1)
depart f10 p2 (1)
down f10 f9 (1)
board f9 p0 (1)
up f9 f12 (1)
board f12 p1 (1)
up f12 f17 (1)
board f17 p3 (1)
down f17 f15 (1)
depart f15 p7 (1)
depart f15 p3 (1)
depart f15 p0 (1)
down f15 f2 (1)
board f2 p5 (1)
board f2 p6 (1)
board f2 p8 (1)
depart f2 p1 (1)
down f2 f1 (1)
depart f1 p5 (1)
up f1 f13 (1)
depart f13 p8 (1)
down f13 f3 (1)
board f3 p4 (1)
depart f3 p6 (1)
down f3 f2 (1)
depart f2 p4 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f20-p10-u0-v0-g0-a0-n0-A0-B0-N0-F0-r0)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 )


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(passenger p8)
(passenger p9)

(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)
(floor f16)
(floor f17)
(floor f18)
(floor f19)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)

(above f16 f17)
(above f16 f18)
(above f16 f19)

(above f17 f18)
(above f17 f19)

(above f18 f19)



(origin p0 f3)
(destin p0 f6)

(origin p1 f17)
(destin p1 f15)

(origin p2 f13)
(destin p2 f15)

(origin p3 f6)
(destin p3 f12)

(origin p4 f9)
(destin p4 f1)

(origin p5 f2)
(destin p5 f7)

(origin p6 f10)
(destin p6 f19)

(origin p7 f3)
(destin p7 f6)

(origin p8 f0)
(destin p8 f6)

(origin p9 f12)
(destin p9 f16)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
))
)


","board f0 p8 (1)
up f0 f10 (1)
board f10 p6 (1)
down f10 f2 (1)
board f2 p5 (1)
up f2 f13 (1)
board f13 p2 (1)
down f13 f3 (1)
board f3 p0 (1)
board f3 p7 (1)
up f3 f17 (1)
board f17 p1 (1)
down f17 f15 (1)
depart f15 p2 (1)
depart f15 p1 (1)
down f15 f6 (1)
board f6 p3 (1)
depart f6 p8 (1)
depart f6 p7 (1)
depart f6 p0 (1)
up f6 f12 (1)
board f12 p9 (1)
depart f12 p3 (1)
down f12 f7 (1)
depart f7 p5 (1)
up f7 f16 (1)
depart f16 p9 (1)
down f16 f9 (1)
board f9 p4 (1)
down f9 f1 (1)
depart f1 p4 (1)
up f1 f19 (1)
depart f19 p6 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f20-p10-u0-v0-g0-a0-n0-A0-B0-N0-F0-r1)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(passenger p8)
(passenger p9)

(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)
(floor f16)
(floor f17)
(floor f18)
(floor f19)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)

(above f16 f17)
(above f16 f18)
(above f16 f19)

(above f17 f18)
(above f17 f19)

(above f18 f19)



(origin p0 f0)
(destin p0 f1)

(origin p1 f19)
(destin p1 f4)

(origin p2 f16)
(destin p2 f3)

(origin p3 f5)
(destin p3 f10)

(origin p4 f1)
(destin p4 f11)

(origin p5 f0)
(destin p5 f8)

(origin p6 f17)
(destin p6 f7)

(origin p7 f10)
(destin p7 f1)

(origin p8 f0)
(destin p8 f18)

(origin p9 f10)
(destin p9 f3)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
))
)


","board f0 p0 (1)
board f0 p5 (1)
board f0 p8 (1)
up f0 f16 (1)
board f16 p2 (1)
down f16 f5 (1)
board f5 p3 (1)
up f5 f10 (1)
board f10 p7 (1)
board f10 p9 (1)
depart f10 p3 (1)
down f10 f1 (1)
board f1 p4 (1)
depart f1 p7 (1)
depart f1 p0 (1)
up f1 f11 (1)
depart f11 p4 (1)
down f11 f3 (1)
depart f3 p9 (1)
depart f3 p2 (1)
up f3 f17 (1)
board f17 p6 (1)
down f17 f7 (1)
depart f7 p6 (1)
up f7 f18 (1)
depart f18 p8 (1)
down f18 f8 (1)
depart f8 p5 (1)
up f8 f19 (1)
board f19 p1 (1)
down f19 f4 (1)
depart f4 p1 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f20-p10-u0-v0-g0-a0-n0-A0-B0-N0-F0-r2)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(passenger p8)
(passenger p9)

(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)
(floor f16)
(floor f17)
(floor f18)
(floor f19)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)

(above f16 f17)
(above f16 f18)
(above f16 f19)

(above f17 f18)
(above f17 f19)

(above f18 f19)



(origin p0 f3)
(destin p0 f0)

(origin p1 f4)
(destin p1 f2)

(origin p2 f13)
(destin p2 f14)

(origin p3 f10)
(destin p3 f14)

(origin p4 f19)
(destin p4 f10)

(origin p5 f3)
(destin p5 f11)

(origin p6 f2)
(destin p6 f6)

(origin p7 f14)
(destin p7 f5)

(origin p8 f15)
(destin p8 f4)

(origin p9 f0)
(destin p9 f5)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
))
)


","board f0 p9 (1)
up f0 f13 (1)
board f13 p2 (1)
down f13 f3 (1)
board f3 p0 (1)
board f3 p5 (1)
down f3 f0 (1)
depart f0 p0 (1)
up f0 f11 (1)
depart f11 p5 (1)
up f11 f15 (1)
board f15 p8 (1)
down f15 f4 (1)
board f4 p1 (1)
depart f4 p8 (1)
down f4 f2 (1)
board f2 p6 (1)
depart f2 p1 (1)
up f2 f19 (1)
board f19 p4 (1)
down f19 f10 (1)
board f10 p3 (1)
depart f10 p4 (1)
down f10 f6 (1)
depart f6 p6 (1)
up f6 f14 (1)
board f14 p7 (1)
depart f14 p3 (1)
depart f14 p2 (1)
down f14 f5 (1)
depart f5 p9 (1)
depart f5 p7 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f20-p10-u0-v0-g0-a0-n0-A0-B0-N0-F0-r3)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(passenger p8)
(passenger p9)

(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)
(floor f16)
(floor f17)
(floor f18)
(floor f19)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)

(above f16 f17)
(above f16 f18)
(above f16 f19)

(above f17 f18)
(above f17 f19)

(above f18 f19)



(origin p0 f13)
(destin p0 f15)

(origin p1 f6)
(destin p1 f19)

(origin p2 f19)
(destin p2 f8)

(origin p3 f5)
(destin p3 f8)

(origin p4 f11)
(destin p4 f12)

(origin p5 f11)
(destin p5 f14)

(origin p6 f4)
(destin p6 f6)

(origin p7 f2)
(destin p7 f7)

(origin p8 f8)
(destin p8 f3)

(origin p9 f10)
(destin p9 f8)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
))
)


","up f0 f10 (1)
board f10 p9 (1)
down f10 f2 (1)
board f2 p7 (1)
up f2 f11 (1)
board f11 p4 (1)
board f11 p5 (1)
down f11 f4 (1)
board f4 p6 (1)
up f4 f12 (1)
depart f12 p4 (1)
down f12 f5 (1)
board f5 p3 (1)
up f5 f13 (1)
board f13 p0 (1)
down f13 f6 (1)
board f6 p1 (1)
depart f6 p6 (1)
up f6 f14 (1)
depart f14 p5 (1)
down f14 f7 (1)
depart f7 p7 (1)
up f7 f15 (1)
depart f15 p0 (1)
up f15 f19 (1)
board f19 p2 (1)
depart f19 p1 (1)
down f19 f8 (1)
board f8 p8 (1)
depart f8 p9 (1)
depart f8 p3 (1)
depart f8 p2 (1)
down f8 f3 (1)
depart f3 p8 (1)"
miconic,"(define (domain miconic)
  (:requirements :strips)
  

(:predicates 
(origin ?person ?floor )

(floor ?floor)
(passenger ?passenger)

(destin ?person ?floor )
(above ?floor1 ?floor2 )

(boarded ?person )

(served ?person )

(lift-at ?floor )
)

(:action board
  :parameters (?f ?p)
  :precondition (and (floor ?f) (passenger ?p)(lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f  ?p)
  :precondition (and (floor ?f) (passenger ?p) (lift-at ?f) (destin ?p ?f)
                     (boarded ?p))
  :effect (and (not (boarded ?p))
               (served ?p)))

(:action up
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 ?f2)
  :precondition (and (floor ?f1) (floor ?f2) (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))
)



","(define (problem mixed-f20-p10-u0-v0-g0-a0-n0-A0-B0-N0-F0-r4)
   (:domain miconic)
   (:objects p0 p1 p2 p3 p4 p5 p6 p7 p8 p9
             f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 
             f10 f11 f12 f13 f14 f15 f16 f17 f18 f19)


(:init
(passenger p0)
(passenger p1)
(passenger p2)
(passenger p3)
(passenger p4)
(passenger p5)
(passenger p6)
(passenger p7)
(passenger p8)
(passenger p9)

(floor f0)
(floor f1)
(floor f2)
(floor f3)
(floor f4)
(floor f5)
(floor f6)
(floor f7)
(floor f8)
(floor f9)
(floor f10)
(floor f11)
(floor f12)
(floor f13)
(floor f14)
(floor f15)
(floor f16)
(floor f17)
(floor f18)
(floor f19)

(above f0 f1)
(above f0 f2)
(above f0 f3)
(above f0 f4)
(above f0 f5)
(above f0 f6)
(above f0 f7)
(above f0 f8)
(above f0 f9)
(above f0 f10)
(above f0 f11)
(above f0 f12)
(above f0 f13)
(above f0 f14)
(above f0 f15)
(above f0 f16)
(above f0 f17)
(above f0 f18)
(above f0 f19)

(above f1 f2)
(above f1 f3)
(above f1 f4)
(above f1 f5)
(above f1 f6)
(above f1 f7)
(above f1 f8)
(above f1 f9)
(above f1 f10)
(above f1 f11)
(above f1 f12)
(above f1 f13)
(above f1 f14)
(above f1 f15)
(above f1 f16)
(above f1 f17)
(above f1 f18)
(above f1 f19)

(above f2 f3)
(above f2 f4)
(above f2 f5)
(above f2 f6)
(above f2 f7)
(above f2 f8)
(above f2 f9)
(above f2 f10)
(above f2 f11)
(above f2 f12)
(above f2 f13)
(above f2 f14)
(above f2 f15)
(above f2 f16)
(above f2 f17)
(above f2 f18)
(above f2 f19)

(above f3 f4)
(above f3 f5)
(above f3 f6)
(above f3 f7)
(above f3 f8)
(above f3 f9)
(above f3 f10)
(above f3 f11)
(above f3 f12)
(above f3 f13)
(above f3 f14)
(above f3 f15)
(above f3 f16)
(above f3 f17)
(above f3 f18)
(above f3 f19)

(above f4 f5)
(above f4 f6)
(above f4 f7)
(above f4 f8)
(above f4 f9)
(above f4 f10)
(above f4 f11)
(above f4 f12)
(above f4 f13)
(above f4 f14)
(above f4 f15)
(above f4 f16)
(above f4 f17)
(above f4 f18)
(above f4 f19)

(above f5 f6)
(above f5 f7)
(above f5 f8)
(above f5 f9)
(above f5 f10)
(above f5 f11)
(above f5 f12)
(above f5 f13)
(above f5 f14)
(above f5 f15)
(above f5 f16)
(above f5 f17)
(above f5 f18)
(above f5 f19)

(above f6 f7)
(above f6 f8)
(above f6 f9)
(above f6 f10)
(above f6 f11)
(above f6 f12)
(above f6 f13)
(above f6 f14)
(above f6 f15)
(above f6 f16)
(above f6 f17)
(above f6 f18)
(above f6 f19)

(above f7 f8)
(above f7 f9)
(above f7 f10)
(above f7 f11)
(above f7 f12)
(above f7 f13)
(above f7 f14)
(above f7 f15)
(above f7 f16)
(above f7 f17)
(above f7 f18)
(above f7 f19)

(above f8 f9)
(above f8 f10)
(above f8 f11)
(above f8 f12)
(above f8 f13)
(above f8 f14)
(above f8 f15)
(above f8 f16)
(above f8 f17)
(above f8 f18)
(above f8 f19)

(above f9 f10)
(above f9 f11)
(above f9 f12)
(above f9 f13)
(above f9 f14)
(above f9 f15)
(above f9 f16)
(above f9 f17)
(above f9 f18)
(above f9 f19)

(above f10 f11)
(above f10 f12)
(above f10 f13)
(above f10 f14)
(above f10 f15)
(above f10 f16)
(above f10 f17)
(above f10 f18)
(above f10 f19)

(above f11 f12)
(above f11 f13)
(above f11 f14)
(above f11 f15)
(above f11 f16)
(above f11 f17)
(above f11 f18)
(above f11 f19)

(above f12 f13)
(above f12 f14)
(above f12 f15)
(above f12 f16)
(above f12 f17)
(above f12 f18)
(above f12 f19)

(above f13 f14)
(above f13 f15)
(above f13 f16)
(above f13 f17)
(above f13 f18)
(above f13 f19)

(above f14 f15)
(above f14 f16)
(above f14 f17)
(above f14 f18)
(above f14 f19)

(above f15 f16)
(above f15 f17)
(above f15 f18)
(above f15 f19)

(above f16 f17)
(above f16 f18)
(above f16 f19)

(above f17 f18)
(above f17 f19)

(above f18 f19)



(origin p0 f15)
(destin p0 f11)

(origin p1 f2)
(destin p1 f0)

(origin p2 f2)
(destin p2 f18)

(origin p3 f7)
(destin p3 f5)

(origin p4 f9)
(destin p4 f4)

(origin p5 f10)
(destin p5 f9)

(origin p6 f2)
(destin p6 f19)

(origin p7 f18)
(destin p7 f13)

(origin p8 f0)
(destin p8 f13)

(origin p9 f3)
(destin p9 f9)






(lift-at f0)
)


(:goal (and 
(served p0)
(served p1)
(served p2)
(served p3)
(served p4)
(served p5)
(served p6)
(served p7)
(served p8)
(served p9)
))
)


","board f0 p8 (1)
up f0 f10 (1)
board f10 p5 (1)
down f10 f2 (1)
board f2 p1 (1)
board f2 p2 (1)
board f2 p6 (1)
down f2 f0 (1)
depart f0 p1 (1)
up f0 f15 (1)
board f15 p0 (1)
down f15 f11 (1)
depart f11 p0 (1)
down f11 f3 (1)
board f3 p9 (1)
up f3 f18 (1)
board f18 p7 (1)
depart f18 p2 (1)
down f18 f13 (1)
depart f13 p8 (1)
depart f13 p7 (1)
down f13 f7 (1)
board f7 p3 (1)
down f7 f5 (1)
depart f5 p3 (1)
up f5 f19 (1)
depart f19 p6 (1)
down f19 f9 (1)
board f9 p4 (1)
depart f9 p9 (1)
depart f9 p5 (1)
down f9 f4 (1)
depart f4 p4 (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-1)
   (:domain movie-strips)
   (:objects c5 c4 c3 c2 c1 d5 d4 d3 d2 d1 p5 p4 p3 p2 p1 z5 z4 z3 z2 z1 k5 k4 k3 k2
             k1)
   (:init (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-2)
   (:domain movie-strips)
   (:objects c6 c5 c4 c3 c2 c1 d6 d5 d4 d3 d2 d1 p6 p5 p4 p3 p2 p1 z6 z5 z4 z3 z2 z1
             k6 k5 k4 k3 k2 k1)
   (:init (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-3)
   (:domain movie-strips)
   (:objects c7 c6 c5 c4 c3 c2 c1 d7 d6 d5 d4 d3 d2 d1 p7 p6 p5 p4 p3 p2 p1 z7 z6 z5
             z4 z3 z2 z1 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-4)
   (:domain movie-strips)
   (:objects c8 c7 c6 c5 c4 c3 c2 c1 d8 d7 d6 d5 d4 d3 d2 d1 p8 p7 p6 p5 p4 p3 p2 p1
             z8 z7 z6 z5 z4 z3 z2 z1 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-5)
   (:domain movie-strips)
   (:objects c9 c8 c7 c6 c5 c4 c3 c2 c1 d9 d8 d7 d6 d5 d4 d3 d2 d1 p9 p8 p7 p6 p5 p4
             p3 p2 p1 z9 z8 z7 z6 z5 z4 z3 z2 z1 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-6)
   (:domain movie-strips)
   (:objects c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p10 p9
             p8 p7 p6 p5 p4 p3 p2 p1 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k10 k9 k8 k7 k6 k5
             k4 k3 k2 k1)
   (:init (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-7)
   (:domain movie-strips)
   (:objects c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1
             p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k11
             k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-8)
   (:domain movie-strips)
   (:objects c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d12 d11 d10 d9 d8 d7 d6 d5 d4
             d3 d2 d1 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z12 z11 z10 z9 z8 z7 z6
             z5 z4 z3 z2 z1 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-9)
   (:domain movie-strips)
   (:objects c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d13 d12 d11 d10 d9 d8 d7
             d6 d5 d4 d3 d2 d1 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z13 z12
             z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k13 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3
             k2 k1)
   (:init (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-10)
   (:domain movie-strips)
   (:objects c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d14 d13 d12 d11 d10
             d9 d8 d7 d6 d5 d4 d3 d2 d1 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2
             p1 z14 z13 z12 z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k14 k13 k12 k11 k10
             k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-11)
   (:domain movie-strips)
   (:objects c15 c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d15 d14 d13 d12
             d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6
             p5 p4 p3 p2 p1 z15 z14 z13 z12 z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k15
             k14 k13 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-12)
   (:domain movie-strips)
   (:objects c16 c15 c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d16 d15 d14
             d13 d12 d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p16 p15 p14 p13 p12 p11 p10
             p9 p8 p7 p6 p5 p4 p3 p2 p1 z16 z15 z14 z13 z12 z11 z10 z9 z8 z7 z6 z5
             z4 z3 z2 z1 k16 k15 k14 k13 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-13)
   (:domain movie-strips)
   (:objects c17 c16 c15 c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d17 d16
             d15 d14 d13 d12 d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p17 p16 p15 p14 p13
             p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z17 z16 z15 z14 z13 z12 z11 z10
             z9 z8 z7 z6 z5 z4 z3 z2 z1 k17 k16 k15 k14 k13 k12 k11 k10 k9 k8 k7 k6
             k5 k4 k3 k2 k1)
   (:init (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-14)
   (:domain movie-strips)
   (:objects c18 c17 c16 c15 c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d18
             d17 d16 d15 d14 d13 d12 d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p18 p17 p16
             p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z18 z17 z16 z15 z14
             z13 z12 z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k18 k17 k16 k15 k14 k13 k12
             k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-15)
   (:domain movie-strips)
   (:objects c19 c18 c17 c16 c15 c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1
             d19 d18 d17 d16 d15 d14 d13 d12 d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p19
             p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z19 z18
             z17 z16 z15 z14 z13 z12 z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k19 k18 k17
             k16 k15 k14 k13 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-16)
   (:domain movie-strips)
   (:objects c20 c19 c18 c17 c16 c15 c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3
             c2 c1 d20 d19 d18 d17 d16 d15 d14 d13 d12 d11 d10 d9 d8 d7 d6 d5 d4
             d3 d2 d1 p20 p19 p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5
             p4 p3 p2 p1 z20 z19 z18 z17 z16 z15 z14 z13 z12 z11 z10 z9 z8 z7 z6
             z5 z4 z3 z2 z1 k20 k19 k18 k17 k16 k15 k14 k13 k12 k11 k10 k9 k8 k7
             k6 k5 k4 k3 k2 k1)
   (:init (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-17)
   (:domain movie-strips)
   (:objects c21 c20 c19 c18 c17 c16 c15 c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4
             c3 c2 c1 d21 d20 d19 d18 d17 d16 d15 d14 d13 d12 d11 d10 d9 d8 d7 d6
             d5 d4 d3 d2 d1 p21 p20 p19 p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8
             p7 p6 p5 p4 p3 p2 p1 z21 z20 z19 z18 z17 z16 z15 z14 z13 z12 z11 z10
             z9 z8 z7 z6 z5 z4 z3 z2 z1 k21 k20 k19 k18 k17 k16 k15 k14 k13 k12
             k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-18)
   (:domain movie-strips)
   (:objects c22 c21 c20 c19 c18 c17 c16 c15 c14 c13 c12 c11 c10 c9 c8 c7 c6
             c5 c4 c3 c2 c1 d22 d21 d20 d19 d18 d17 d16 d15 d14 d13 d12 d11 d10
             d9 d8 d7 d6 d5 d4 d3 d2 d1 p22 p21 p20 p19 p18 p17 p16 p15 p14 p13
             p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z22 z21 z20 z19 z18 z17 z16 z15
             z14 z13 z12 z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k22 k21 k20 k19 k18 k17
             k16 k15 k14 k13 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c22)
          (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d22)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p22)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z22)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k22)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-19)
   (:domain movie-strips)
   (:objects c23 c22 c21 c20 c19 c18 c17 c16 c15 c14 c13 c12 c11 c10 c9 c8 c7
             c6 c5 c4 c3 c2 c1 d23 d22 d21 d20 d19 d18 d17 d16 d15 d14 d13 d12
             d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p23 p22 p21 p20 p19 p18 p17 p16 p15
             p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z23 z22 z21 z20 z19 z18
             z17 z16 z15 z14 z13 z12 z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k23 k22 k21
             k20 k19 k18 k17 k16 k15 k14 k13 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c23)
          (chips c22)
          (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d23)
          (dip d22)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p23)
          (pop p22)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z23)
          (cheese z22)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k23)
          (crackers k22)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-20)
   (:domain movie-strips)
   (:objects c24 c23 c22 c21 c20 c19 c18 c17 c16 c15 c14 c13 c12 c11 c10 c9
             c8 c7 c6 c5 c4 c3 c2 c1 d24 d23 d22 d21 d20 d19 d18 d17 d16 d15 d14
             d13 d12 d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p24 p23 p22 p21 p20 p19 p18
             p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z24 z23 z22
             z21 z20 z19 z18 z17 z16 z15 z14 z13 z12 z11 z10 z9 z8 z7 z6 z5 z4 z3
             z2 z1 k24 k23 k22 k21 k20 k19 k18 k17 k16 k15 k14 k13 k12 k11 k10
             k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c24)
          (chips c23)
          (chips c22)
          (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d24)
          (dip d23)
          (dip d22)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p24)
          (pop p23)
          (pop p22)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z24)
          (cheese z23)
          (cheese z22)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k24)
          (crackers k23)
          (crackers k22)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-21)
   (:domain movie-strips)
   (:objects c25 c24 c23 c22 c21 c20 c19 c18 c17 c16 c15 c14 c13 c12 c11 c10
             c9 c8 c7 c6 c5 c4 c3 c2 c1 d25 d24 d23 d22 d21 d20 d19 d18 d17 d16
             d15 d14 d13 d12 d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p25 p24 p23 p22 p21
             p20 p19 p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1
             z25 z24 z23 z22 z21 z20 z19 z18 z17 z16 z15 z14 z13 z12 z11 z10 z9
             z8 z7 z6 z5 z4 z3 z2 z1 k25 k24 k23 k22 k21 k20 k19 k18 k17 k16 k15
             k14 k13 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c25)
          (chips c24)
          (chips c23)
          (chips c22)
          (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d25)
          (dip d24)
          (dip d23)
          (dip d22)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p25)
          (pop p24)
          (pop p23)
          (pop p22)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z25)
          (cheese z24)
          (cheese z23)
          (cheese z22)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k25)
          (crackers k24)
          (crackers k23)
          (crackers k22)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-22)
   (:domain movie-strips)
   (:objects c26 c25 c24 c23 c22 c21 c20 c19 c18 c17 c16 c15 c14 c13 c12 c11
             c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d26 d25 d24 d23 d22 d21 d20 d19 d18 d17
             d16 d15 d14 d13 d12 d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p26 p25 p24 p23
             p22 p21 p20 p19 p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4
             p3 p2 p1 z26 z25 z24 z23 z22 z21 z20 z19 z18 z17 z16 z15 z14 z13
             z12 z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k26 k25 k24 k23 k22 k21 k20 k19
             k18 k17 k16 k15 k14 k13 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c26)
          (chips c25)
          (chips c24)
          (chips c23)
          (chips c22)
          (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d26)
          (dip d25)
          (dip d24)
          (dip d23)
          (dip d22)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p26)
          (pop p25)
          (pop p24)
          (pop p23)
          (pop p22)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z26)
          (cheese z25)
          (cheese z24)
          (cheese z23)
          (cheese z22)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k26)
          (crackers k25)
          (crackers k24)
          (crackers k23)
          (crackers k22)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-23)
   (:domain movie-strips)
   (:objects c27 c26 c25 c24 c23 c22 c21 c20 c19 c18 c17 c16 c15 c14 c13 c12
             c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d27 d26 d25 d24 d23 d22 d21 d20 d19
             d18 d17 d16 d15 d14 d13 d12 d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p27 p26
             p25 p24 p23 p22 p21 p20 p19 p18 p17 p16 p15 p14 p13 p12 p11 p10 p9
             p8 p7 p6 p5 p4 p3 p2 p1 z27 z26 z25 z24 z23 z22 z21 z20 z19 z18 z17
             z16 z15 z14 z13 z12 z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k27 k26 k25 k24
             k23 k22 k21 k20 k19 k18 k17 k16 k15 k14 k13 k12 k11 k10 k9 k8 k7 k6
             k5 k4 k3 k2 k1)
   (:init (chips c27)
          (chips c26)
          (chips c25)
          (chips c24)
          (chips c23)
          (chips c22)
          (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d27)
          (dip d26)
          (dip d25)
          (dip d24)
          (dip d23)
          (dip d22)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p27)
          (pop p26)
          (pop p25)
          (pop p24)
          (pop p23)
          (pop p22)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z27)
          (cheese z26)
          (cheese z25)
          (cheese z24)
          (cheese z23)
          (cheese z22)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k27)
          (crackers k26)
          (crackers k25)
          (crackers k24)
          (crackers k23)
          (crackers k22)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-24)
   (:domain movie-strips)
   (:objects c28 c27 c26 c25 c24 c23 c22 c21 c20 c19 c18 c17 c16 c15 c14 c13
             c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d28 d27 d26 d25 d24 d23 d22 d21
             d20 d19 d18 d17 d16 d15 d14 d13 d12 d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1
             p28 p27 p26 p25 p24 p23 p22 p21 p20 p19 p18 p17 p16 p15 p14 p13 p12
             p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z28 z27 z26 z25 z24 z23 z22 z21 z20
             z19 z18 z17 z16 z15 z14 z13 z12 z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k28
             k27 k26 k25 k24 k23 k22 k21 k20 k19 k18 k17 k16 k15 k14 k13 k12 k11
             k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c28)
          (chips c27)
          (chips c26)
          (chips c25)
          (chips c24)
          (chips c23)
          (chips c22)
          (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d28)
          (dip d27)
          (dip d26)
          (dip d25)
          (dip d24)
          (dip d23)
          (dip d22)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p28)
          (pop p27)
          (pop p26)
          (pop p25)
          (pop p24)
          (pop p23)
          (pop p22)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z28)
          (cheese z27)
          (cheese z26)
          (cheese z25)
          (cheese z24)
          (cheese z23)
          (cheese z22)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k28)
          (crackers k27)
          (crackers k26)
          (crackers k25)
          (crackers k24)
          (crackers k23)
          (crackers k22)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-25)
   (:domain movie-strips)
   (:objects c29 c28 c27 c26 c25 c24 c23 c22 c21 c20 c19 c18 c17 c16 c15 c14
             c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d29 d28 d27 d26 d25 d24 d23
             d22 d21 d20 d19 d18 d17 d16 d15 d14 d13 d12 d11 d10 d9 d8 d7 d6 d5 d4
             d3 d2 d1 p29 p28 p27 p26 p25 p24 p23 p22 p21 p20 p19 p18 p17 p16
             p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z29 z28 z27 z26 z25
             z24 z23 z22 z21 z20 z19 z18 z17 z16 z15 z14 z13 z12 z11 z10 z9 z8 z7
             z6 z5 z4 z3 z2 z1 k29 k28 k27 k26 k25 k24 k23 k22 k21 k20 k19 k18
             k17 k16 k15 k14 k13 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c29)
          (chips c28)
          (chips c27)
          (chips c26)
          (chips c25)
          (chips c24)
          (chips c23)
          (chips c22)
          (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d29)
          (dip d28)
          (dip d27)
          (dip d26)
          (dip d25)
          (dip d24)
          (dip d23)
          (dip d22)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p29)
          (pop p28)
          (pop p27)
          (pop p26)
          (pop p25)
          (pop p24)
          (pop p23)
          (pop p22)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z29)
          (cheese z28)
          (cheese z27)
          (cheese z26)
          (cheese z25)
          (cheese z24)
          (cheese z23)
          (cheese z22)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k29)
          (crackers k28)
          (crackers k27)
          (crackers k26)
          (crackers k25)
          (crackers k24)
          (crackers k23)
          (crackers k22)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-26)
   (:domain movie-strips)
   (:objects c30 c29 c28 c27 c26 c25 c24 c23 c22 c21 c20 c19 c18 c17 c16 c15
             c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d30 d29 d28 d27 d26 d25
             d24 d23 d22 d21 d20 d19 d18 d17 d16 d15 d14 d13 d12 d11 d10 d9 d8 d7
             d6 d5 d4 d3 d2 d1 p30 p29 p28 p27 p26 p25 p24 p23 p22 p21 p20 p19
             p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z30 z29
             z28 z27 z26 z25 z24 z23 z22 z21 z20 z19 z18 z17 z16 z15 z14 z13 z12
             z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k30 k29 k28 k27 k26 k25 k24 k23 k22
             k21 k20 k19 k18 k17 k16 k15 k14 k13 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3
             k2 k1)
   (:init (chips c30)
          (chips c29)
          (chips c28)
          (chips c27)
          (chips c26)
          (chips c25)
          (chips c24)
          (chips c23)
          (chips c22)
          (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d30)
          (dip d29)
          (dip d28)
          (dip d27)
          (dip d26)
          (dip d25)
          (dip d24)
          (dip d23)
          (dip d22)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p30)
          (pop p29)
          (pop p28)
          (pop p27)
          (pop p26)
          (pop p25)
          (pop p24)
          (pop p23)
          (pop p22)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z30)
          (cheese z29)
          (cheese z28)
          (cheese z27)
          (cheese z26)
          (cheese z25)
          (cheese z24)
          (cheese z23)
          (cheese z22)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k30)
          (crackers k29)
          (crackers k28)
          (crackers k27)
          (crackers k26)
          (crackers k25)
          (crackers k24)
          (crackers k23)
          (crackers k22)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-27)
   (:domain movie-strips)
   (:objects c31 c30 c29 c28 c27 c26 c25 c24 c23 c22 c21 c20 c19 c18 c17 c16
             c15 c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d31 d30 d29 d28 d27
             d26 d25 d24 d23 d22 d21 d20 d19 d18 d17 d16 d15 d14 d13 d12 d11 d10
             d9 d8 d7 d6 d5 d4 d3 d2 d1 p31 p30 p29 p28 p27 p26 p25 p24 p23 p22
             p21 p20 p19 p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3
             p2 p1 z31 z30 z29 z28 z27 z26 z25 z24 z23 z22 z21 z20 z19 z18 z17
             z16 z15 z14 z13 z12 z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k31 k30 k29 k28
             k27 k26 k25 k24 k23 k22 k21 k20 k19 k18 k17 k16 k15 k14 k13 k12 k11
             k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c31)
          (chips c30)
          (chips c29)
          (chips c28)
          (chips c27)
          (chips c26)
          (chips c25)
          (chips c24)
          (chips c23)
          (chips c22)
          (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d31)
          (dip d30)
          (dip d29)
          (dip d28)
          (dip d27)
          (dip d26)
          (dip d25)
          (dip d24)
          (dip d23)
          (dip d22)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p31)
          (pop p30)
          (pop p29)
          (pop p28)
          (pop p27)
          (pop p26)
          (pop p25)
          (pop p24)
          (pop p23)
          (pop p22)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z31)
          (cheese z30)
          (cheese z29)
          (cheese z28)
          (cheese z27)
          (cheese z26)
          (cheese z25)
          (cheese z24)
          (cheese z23)
          (cheese z22)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k31)
          (crackers k30)
          (crackers k29)
          (crackers k28)
          (crackers k27)
          (crackers k26)
          (crackers k25)
          (crackers k24)
          (crackers k23)
          (crackers k22)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-28)
   (:domain movie-strips)
   (:objects c32 c31 c30 c29 c28 c27 c26 c25 c24 c23 c22 c21 c20 c19 c18 c17
             c16 c15 c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d32 d31 d30 d29
             d28 d27 d26 d25 d24 d23 d22 d21 d20 d19 d18 d17 d16 d15 d14 d13 d12
             d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p32 p31 p30 p29 p28 p27 p26 p25 p24
             p23 p22 p21 p20 p19 p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6
             p5 p4 p3 p2 p1 z32 z31 z30 z29 z28 z27 z26 z25 z24 z23 z22 z21 z20
             z19 z18 z17 z16 z15 z14 z13 z12 z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k32
             k31 k30 k29 k28 k27 k26 k25 k24 k23 k22 k21 k20 k19 k18 k17 k16 k15
             k14 k13 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c32)
          (chips c31)
          (chips c30)
          (chips c29)
          (chips c28)
          (chips c27)
          (chips c26)
          (chips c25)
          (chips c24)
          (chips c23)
          (chips c22)
          (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d32)
          (dip d31)
          (dip d30)
          (dip d29)
          (dip d28)
          (dip d27)
          (dip d26)
          (dip d25)
          (dip d24)
          (dip d23)
          (dip d22)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p32)
          (pop p31)
          (pop p30)
          (pop p29)
          (pop p28)
          (pop p27)
          (pop p26)
          (pop p25)
          (pop p24)
          (pop p23)
          (pop p22)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z32)
          (cheese z31)
          (cheese z30)
          (cheese z29)
          (cheese z28)
          (cheese z27)
          (cheese z26)
          (cheese z25)
          (cheese z24)
          (cheese z23)
          (cheese z22)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k32)
          (crackers k31)
          (crackers k30)
          (crackers k29)
          (crackers k28)
          (crackers k27)
          (crackers k26)
          (crackers k25)
          (crackers k24)
          (crackers k23)
          (crackers k22)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-29)
   (:domain movie-strips)
   (:objects c33 c32 c31 c30 c29 c28 c27 c26 c25 c24 c23 c22 c21 c20 c19 c18
             c17 c16 c15 c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d33 d32 d31
             d30 d29 d28 d27 d26 d25 d24 d23 d22 d21 d20 d19 d18 d17 d16 d15 d14
             d13 d12 d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p33 p32 p31 p30 p29 p28 p27
             p26 p25 p24 p23 p22 p21 p20 p19 p18 p17 p16 p15 p14 p13 p12 p11 p10
             p9 p8 p7 p6 p5 p4 p3 p2 p1 z33 z32 z31 z30 z29 z28 z27 z26 z25 z24
             z23 z22 z21 z20 z19 z18 z17 z16 z15 z14 z13 z12 z11 z10 z9 z8 z7 z6
             z5 z4 z3 z2 z1 k33 k32 k31 k30 k29 k28 k27 k26 k25 k24 k23 k22 k21
             k20 k19 k18 k17 k16 k15 k14 k13 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)
   (:init (chips c33)
          (chips c32)
          (chips c31)
          (chips c30)
          (chips c29)
          (chips c28)
          (chips c27)
          (chips c26)
          (chips c25)
          (chips c24)
          (chips c23)
          (chips c22)
          (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d33)
          (dip d32)
          (dip d31)
          (dip d30)
          (dip d29)
          (dip d28)
          (dip d27)
          (dip d26)
          (dip d25)
          (dip d24)
          (dip d23)
          (dip d22)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p33)
          (pop p32)
          (pop p31)
          (pop p30)
          (pop p29)
          (pop p28)
          (pop p27)
          (pop p26)
          (pop p25)
          (pop p24)
          (pop p23)
          (pop p22)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z33)
          (cheese z32)
          (cheese z31)
          (cheese z30)
          (cheese z29)
          (cheese z28)
          (cheese z27)
          (cheese z26)
          (cheese z25)
          (cheese z24)
          (cheese z23)
          (cheese z22)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k33)
          (crackers k32)
          (crackers k31)
          (crackers k30)
          (crackers k29)
          (crackers k28)
          (crackers k27)
          (crackers k26)
          (crackers k25)
          (crackers k24)
          (crackers k23)
          (crackers k22)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
movie,"(define (domain movie-strips)
  (:predicates (movie-rewound)
               (counter-at-two-hours)
               (counter-at-other-than-two-hours)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers)
               (chips ?x)
               (dip ?x)
               (pop ?x)
               (cheese ?x)
               (crackers ?x))
  
  (:action rewind-movie-2
           :parameters ()
           :precondition (counter-at-two-hours)
           :effect (movie-rewound))
  
  (:action rewind-movie
           :parameters ()
           :precondition (counter-at-other-than-two-hours)
           :effect (and (movie-rewound)
                        ;; Let's assume that the movie is 2 hours long
                        (not (counter-at-zero))))

  (:action reset-counter
           :parameters ()
           :precondition (and)
           :effect (counter-at-zero))


  ;;; Get the food and snacks for the movie
  (:action get-chips

           :parameters (?x)
           :precondition (chips ?x)
           :effect (have-chips))
  
  (:action get-dip
           :parameters (?x)
           :precondition (dip ?x)
           :effect (have-dip))

  (:action get-pop
           :parameters (?x)
           :precondition (pop ?x)
           :effect (have-pop))
  
  (:action get-cheese
           :parameters (?x)
           :precondition (cheese ?x)
           :effect (have-cheese))
  
  (:action get-crackers
           :parameters (?x)
           :precondition (crackers ?x)
           :effect (have-crackers)))","(define (problem strips-movie-x-30)
   (:domain movie-strips)
   (:objects c34 c33 c32 c31 c30 c29 c28 c27 c26 c25 c24 c23 c22 c21 c20 c19
             c18 c17 c16 c15 c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d34 d33
             d32 d31 d30 d29 d28 d27 d26 d25 d24 d23 d22 d21 d20 d19 d18 d17 d16
             d15 d14 d13 d12 d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p34 p33 p32 p31 p30
             p29 p28 p27 p26 p25 p24 p23 p22 p21 p20 p19 p18 p17 p16 p15 p14 p13
             p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z34 z33 z32 z31 z30 z29 z28 z27
             z26 z25 z24 z23 z22 z21 z20 z19 z18 z17 z16 z15 z14 z13 z12 z11 z10
             z9 z8 z7 z6 z5 z4 z3 z2 z1 k34 k33 k32 k31 k30 k29 k28 k27 k26 k25
             k24 k23 k22 k21 k20 k19 k18 k17 k16 k15 k14 k13 k12 k11 k10 k9 k8 k7
             k6 k5 k4 k3 k2 k1)
   (:init (chips c34)
          (chips c33)
          (chips c32)
          (chips c31)
          (chips c30)
          (chips c29)
          (chips c28)
          (chips c27)
          (chips c26)
          (chips c25)
          (chips c24)
          (chips c23)
          (chips c22)
          (chips c21)
          (chips c20)
          (chips c19)
          (chips c18)
          (chips c17)
          (chips c16)
          (chips c15)
          (chips c14)
          (chips c13)
          (chips c12)
          (chips c11)
          (chips c10)
          (chips c9)
          (chips c8)
          (chips c7)
          (chips c6)
          (chips c5)
          (chips c4)
          (chips c3)
          (chips c2)
          (chips c1)
          (dip d34)
          (dip d33)
          (dip d32)
          (dip d31)
          (dip d30)
          (dip d29)
          (dip d28)
          (dip d27)
          (dip d26)
          (dip d25)
          (dip d24)
          (dip d23)
          (dip d22)
          (dip d21)
          (dip d20)
          (dip d19)
          (dip d18)
          (dip d17)
          (dip d16)
          (dip d15)
          (dip d14)
          (dip d13)
          (dip d12)
          (dip d11)
          (dip d10)
          (dip d9)
          (dip d8)
          (dip d7)
          (dip d6)
          (dip d5)
          (dip d4)
          (dip d3)
          (dip d2)
          (dip d1)
          (pop p34)
          (pop p33)
          (pop p32)
          (pop p31)
          (pop p30)
          (pop p29)
          (pop p28)
          (pop p27)
          (pop p26)
          (pop p25)
          (pop p24)
          (pop p23)
          (pop p22)
          (pop p21)
          (pop p20)
          (pop p19)
          (pop p18)
          (pop p17)
          (pop p16)
          (pop p15)
          (pop p14)
          (pop p13)
          (pop p12)
          (pop p11)
          (pop p10)
          (pop p9)
          (pop p8)
          (pop p7)
          (pop p6)
          (pop p5)
          (pop p4)
          (pop p3)
          (pop p2)
          (pop p1)
          (cheese z34)
          (cheese z33)
          (cheese z32)
          (cheese z31)
          (cheese z30)
          (cheese z29)
          (cheese z28)
          (cheese z27)
          (cheese z26)
          (cheese z25)
          (cheese z24)
          (cheese z23)
          (cheese z22)
          (cheese z21)
          (cheese z20)
          (cheese z19)
          (cheese z18)
          (cheese z17)
          (cheese z16)
          (cheese z15)
          (cheese z14)
          (cheese z13)
          (cheese z12)
          (cheese z11)
          (cheese z10)
          (cheese z9)
          (cheese z8)
          (cheese z7)
          (cheese z6)
          (cheese z5)
          (cheese z4)
          (cheese z3)
          (cheese z2)
          (cheese z1)
          (crackers k34)
          (crackers k33)
          (crackers k32)
          (crackers k31)
          (crackers k30)
          (crackers k29)
          (crackers k28)
          (crackers k27)
          (crackers k26)
          (crackers k25)
          (crackers k24)
          (crackers k23)
          (crackers k22)
          (crackers k21)
          (crackers k20)
          (crackers k19)
          (crackers k18)
          (crackers k17)
          (crackers k16)
          (crackers k15)
          (crackers k14)
          (crackers k13)
          (crackers k12)
          (crackers k11)
          (crackers k10)
          (crackers k9)
          (crackers k8)
          (crackers k7)
          (crackers k6)
          (crackers k5)
          (crackers k4)
          (crackers k3)
          (crackers k2)
          (crackers k1)
          (counter-at-other-than-two-hours))
   (:goal (and (movie-rewound)
               (counter-at-zero)
               (have-chips)
               (have-dip)
               (have-pop)
               (have-cheese)
               (have-crackers))))","get-cheese z1 (1)
get-chips c1 (1)
get-crackers k1 (1)
get-dip d1 (1)
get-pop p1 (1)
rewind-movie  (1)
reset-counter  (1)"
mprime,"(define (domain mystery-prime-strips)
   (:requirements :negative-preconditions :equality)
   (:predicates
       (province ?x)
       (planet ?x)
       (food ?x)
       (pleasure ?x)
       (pain ?x)
       (eats ?n1 ?n2)
       (craves ?v ?n)
       (fears ?c ?v)
       (locale ?n ?a)
       (harmony ?v ?s)
       (attacks ?i ?j)
       (orbits ?i ?j))

   (:action overcome
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (pain ?c)
                          (pleasure ?v)
                          (craves ?c ?n)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s2)
                          (planet ?s2)
                          (orbits ?s1 ?s2)
                          (planet ?s1))
       :effect (and (not (craves ?c ?n))
                    (fears ?c ?v)
                    (not (harmony ?v ?s2))
                    (harmony ?v ?s1)))
   (:action feast
       :parameters (?v ?n1 ?n2 ?l1 ?l2)
       :precondition (and (craves ?v ?n1)
                          (food ?n1)
                          (pleasure ?v)
                          (eats ?n1 ?n2)
                          (food ?n2)
                          (locale ?n1 ?l2)
                          (attacks ?l1 ?l2))
       :effect (and (not (craves ?v ?n1))
                    (craves ?v ?n2)
                    (not (locale ?n1 ?l2))
                    (locale ?n1 ?l1)))
   (:action succumb
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (fears ?c ?v)
                          (pain ?c)
                          (pleasure ?v)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s1)
                          (orbits ?s1 ?s2))
       :effect (and (not (fears ?c ?v))
                    (craves ?c ?n)
                    (not (harmony ?v ?s1))
                    (harmony ?v ?s2)))
   (:action drink
      :parameters (?n1 ?n2 ?l11 ?l12 ?l13 ?l21 ?l22)
      :precondition (and (not (= ?n1 ?n2)) ; MALTE: fix
                         (locale ?n1 ?l11)
                         (attacks ?l12 ?l11)
                         (attacks ?l13 ?l12)
                         (locale ?n2 ?l21)
                         (attacks ?l21 ?l22))
      :effect (and (not (locale ?n1 ?l11))
                   (locale ?n1 ?l12)
                   (not (locale ?n2 ?l21))
                   (locale ?n2 ?l22))))

","(define (problem strips-mprime-x-1)
   (:domain mystery-prime-strips)
   (:objects rice pear flounder okra pork lamb rest hangover
             depression abrasion kentucky bosnia surrey pennsylvania alsace
             quebec guanabara mars earth uranus venus)
   (:init (food rice)
          (food pear)
          (food flounder)
          (food okra)
          (food pork)
          (food lamb)
          (pleasure rest)
          (pain hangover)
          (pain depression)
          (pain abrasion)
          (province kentucky)
          (province bosnia)
          (province surrey)
          (province pennsylvania)
          (province alsace)
          (province quebec)
          (province guanabara)
          (planet mars)
          (planet earth)
          (planet uranus)
          (planet venus)
          (eats lamb pork)
          (eats pork okra)
          (locale okra guanabara)
          (locale pork quebec)
          (eats pork lamb)
          (harmony rest venus)
          (eats lamb flounder)
          (craves depression flounder)
          (eats okra pear)
          (eats rice rice)
          (eats rice flounder)
          (attacks kentucky bosnia)
          (attacks pennsylvania alsace)
          (attacks alsace quebec)
          (craves abrasion pork)
          (locale rice bosnia)
          (orbits mars earth)
          (eats flounder lamb)
          (craves rest pork)
          (orbits earth uranus)
          (locale pear surrey)
          (craves hangover rice)
          (attacks bosnia surrey)
          (attacks surrey pennsylvania)
          (locale lamb pennsylvania)
          (eats flounder rice)
          (eats rice pear)
          (attacks quebec guanabara)
          (eats pear okra)
          (eats pear rice)
          (eats okra pork)
          (orbits uranus venus)
          (locale flounder alsace))
   (:goal (and (craves abrasion rice))))","overcome abrasion rest pork uranus venus (1)
feast rest pork lamb alsace quebec (1)
feast rest lamb flounder surrey pennsylvania (1)
feast rest flounder rice pennsylvania alsace (1)
succumb abrasion rest rice uranus venus (1)"
mprime,"(define (domain mystery-prime-strips)
   (:requirements :negative-preconditions :equality)
   (:predicates
       (province ?x)
       (planet ?x)
       (food ?x)
       (pleasure ?x)
       (pain ?x)
       (eats ?n1 ?n2)
       (craves ?v ?n)
       (fears ?c ?v)
       (locale ?n ?a)
       (harmony ?v ?s)
       (attacks ?i ?j)
       (orbits ?i ?j))

   (:action overcome
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (pain ?c)
                          (pleasure ?v)
                          (craves ?c ?n)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s2)
                          (planet ?s2)
                          (orbits ?s1 ?s2)
                          (planet ?s1))
       :effect (and (not (craves ?c ?n))
                    (fears ?c ?v)
                    (not (harmony ?v ?s2))
                    (harmony ?v ?s1)))
   (:action feast
       :parameters (?v ?n1 ?n2 ?l1 ?l2)
       :precondition (and (craves ?v ?n1)
                          (food ?n1)
                          (pleasure ?v)
                          (eats ?n1 ?n2)
                          (food ?n2)
                          (locale ?n1 ?l2)
                          (attacks ?l1 ?l2))
       :effect (and (not (craves ?v ?n1))
                    (craves ?v ?n2)
                    (not (locale ?n1 ?l2))
                    (locale ?n1 ?l1)))
   (:action succumb
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (fears ?c ?v)
                          (pain ?c)
                          (pleasure ?v)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s1)
                          (orbits ?s1 ?s2))
       :effect (and (not (fears ?c ?v))
                    (craves ?c ?n)
                    (not (harmony ?v ?s1))
                    (harmony ?v ?s2)))
   (:action drink
      :parameters (?n1 ?n2 ?l11 ?l12 ?l13 ?l21 ?l22)
      :precondition (and (not (= ?n1 ?n2)) ; MALTE: fix
                         (locale ?n1 ?l11)
                         (attacks ?l12 ?l11)
                         (attacks ?l13 ?l12)
                         (locale ?n2 ?l21)
                         (attacks ?l21 ?l22))
      :effect (and (not (locale ?n1 ?l11))
                   (locale ?n1 ?l12)
                   (not (locale ?n2 ?l21))
                   (locale ?n2 ?l22))))

","(define (problem strips-mprime-x-2)
   (:domain mystery-prime-strips)
   (:objects beef onion tuna flounder cherry muffin ham satiety
             stimulation curiosity entertainment anger depression prostatitis
             grief abrasion loneliness dread angina boils laceration
             sciatica hangover anxiety jealousy jealousy-2 depression-1
             grief-7 dread-8 prostatitis-3 boils-4 alsace arizona kentucky
             bosnia surrey mercury vulcan pluto jupiter)
   (:init (food beef)
          (food onion)
          (food tuna)
          (food flounder)
          (food cherry)
          (food muffin)
          (food ham)
          (pleasure satiety)
          (pleasure stimulation)
          (pleasure curiosity)
          (pleasure entertainment)
          (pain anger)
          (pain depression)
          (pain prostatitis)
          (pain grief)
          (pain abrasion)
          (pain loneliness)
          (pain dread)
          (pain angina)
          (pain boils)
          (pain laceration)
          (pain sciatica)
          (pain hangover)
          (pain anxiety)
          (pain jealousy)
          (pain jealousy-2)
          (pain depression-1)
          (pain grief-7)
          (pain dread-8)
          (pain prostatitis-3)
          (pain boils-4)
          (province alsace)
          (province arizona)
          (province kentucky)
          (province bosnia)
          (province surrey)
          (planet mercury)
          (planet vulcan)
          (planet pluto)
          (planet jupiter)
          (orbits mercury vulcan)
          (eats onion muffin)
          (eats tuna muffin)
          (eats muffin ham)
          (attacks arizona kentucky)
          (locale beef surrey)
          (craves laceration tuna)
          (craves dread onion)
          (locale onion bosnia)
          (locale tuna kentucky)
          (locale ham surrey)
          (eats flounder tuna)
          (craves prostatitis beef)
          (craves boils-4 ham)
          (craves entertainment ham)
          (harmony satiety vulcan)
          (craves satiety onion)
          (eats tuna ham)
          (craves stimulation flounder)
          (eats onion cherry)
          (eats tuna flounder)
          (eats beef tuna)
          (eats cherry flounder)
          (craves curiosity cherry)
          (orbits vulcan pluto)
          (locale flounder kentucky)
          (harmony entertainment jupiter)
          (attacks alsace arizona)
          (craves jealousy flounder)
          (eats ham tuna)
          (craves loneliness onion)
          (eats onion beef)
          (eats cherry onion)
          (harmony stimulation pluto)
          (craves anxiety flounder)
          (attacks kentucky bosnia)
          (locale muffin kentucky)
          (craves sciatica tuna)
          (craves grief beef)
          (craves grief-7 ham)
          (harmony curiosity pluto)
          (craves jealousy-2 cherry)
          (craves angina onion)
          (craves depression-1 muffin)
          (eats muffin tuna)
          (craves anger beef)
          (locale cherry surrey)
          (eats beef onion)
          (craves abrasion beef)
          (attacks bosnia surrey)
          (eats cherry beef)
          (eats beef cherry)
          (craves hangover tuna)
          (eats muffin onion)
          (orbits pluto jupiter)
          (eats flounder cherry)
          (craves boils tuna)
          (eats tuna beef)
          (craves prostatitis-3 ham)
          (eats ham muffin)
          (craves dread-8 ham)
          (craves depression beef))
   (:goal (and (craves grief-7 beef)
               (craves depression-1 beef))))","overcome grief-7 entertainment ham pluto jupiter (1)
feast entertainment ham muffin bosnia surrey (1)
overcome depression-1 entertainment muffin vulcan pluto (1)
feast entertainment muffin onion arizona kentucky (1)
feast entertainment onion beef kentucky bosnia (1)
succumb depression-1 entertainment beef vulcan pluto (1)
succumb grief-7 entertainment beef pluto jupiter (1)"
mprime,"(define (domain mystery-prime-strips)
   (:requirements :negative-preconditions :equality)
   (:predicates
       (province ?x)
       (planet ?x)
       (food ?x)
       (pleasure ?x)
       (pain ?x)
       (eats ?n1 ?n2)
       (craves ?v ?n)
       (fears ?c ?v)
       (locale ?n ?a)
       (harmony ?v ?s)
       (attacks ?i ?j)
       (orbits ?i ?j))

   (:action overcome
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (pain ?c)
                          (pleasure ?v)
                          (craves ?c ?n)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s2)
                          (planet ?s2)
                          (orbits ?s1 ?s2)
                          (planet ?s1))
       :effect (and (not (craves ?c ?n))
                    (fears ?c ?v)
                    (not (harmony ?v ?s2))
                    (harmony ?v ?s1)))
   (:action feast
       :parameters (?v ?n1 ?n2 ?l1 ?l2)
       :precondition (and (craves ?v ?n1)
                          (food ?n1)
                          (pleasure ?v)
                          (eats ?n1 ?n2)
                          (food ?n2)
                          (locale ?n1 ?l2)
                          (attacks ?l1 ?l2))
       :effect (and (not (craves ?v ?n1))
                    (craves ?v ?n2)
                    (not (locale ?n1 ?l2))
                    (locale ?n1 ?l1)))
   (:action succumb
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (fears ?c ?v)
                          (pain ?c)
                          (pleasure ?v)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s1)
                          (orbits ?s1 ?s2))
       :effect (and (not (fears ?c ?v))
                    (craves ?c ?n)
                    (not (harmony ?v ?s1))
                    (harmony ?v ?s2)))
   (:action drink
      :parameters (?n1 ?n2 ?l11 ?l12 ?l13 ?l21 ?l22)
      :precondition (and (not (= ?n1 ?n2)) ; MALTE: fix
                         (locale ?n1 ?l11)
                         (attacks ?l12 ?l11)
                         (attacks ?l13 ?l12)
                         (locale ?n2 ?l21)
                         (attacks ?l21 ?l22))
      :effect (and (not (locale ?n1 ?l11))
                   (locale ?n1 ?l12)
                   (not (locale ?n2 ?l21))
                   (locale ?n2 ?l22))))

","(define (problem strips-mprime-x-3)
   (:domain mystery-prime-strips)
   (:objects pepper pea lemon snickers marzipan popover melon orange
             chocolate ham mutton entertainment triumph love satisfaction
             laceration anxiety grief depression boils angina hangover
             jealousy goias guanabara bavaria arizona manitoba vulcan venus
             neptune)
   (:init (food pepper)
          (food pea)
          (food lemon)
          (food snickers)
          (food marzipan)
          (food popover)
          (food melon)
          (food orange)
          (food chocolate)
          (food ham)
          (food mutton)
          (pleasure entertainment)
          (pleasure triumph)
          (pleasure love)
          (pleasure satisfaction)
          (pain laceration)
          (pain anxiety)
          (pain grief)
          (pain depression)
          (pain boils)
          (pain angina)
          (pain hangover)
          (pain jealousy)
          (province goias)
          (province guanabara)
          (province bavaria)
          (province arizona)
          (province manitoba)
          (planet vulcan)
          (planet venus)
          (planet neptune)
          (eats orange mutton)
          (harmony satisfaction neptune)
          (craves angina orange)
          (craves grief marzipan)
          (eats pea snickers)
          (eats popover pepper)
          (attacks guanabara bavaria)
          (eats mutton orange)
          (attacks bavaria arizona)
          (attacks goias guanabara)
          (harmony triumph neptune)
          (eats marzipan pea)
          (locale popover arizona)
          (locale ham manitoba)
          (eats mutton melon)
          (craves jealousy ham)
          (eats pea pepper)
          (eats pepper melon)
          (locale melon manitoba)
          (locale pea bavaria)
          (craves boils melon)
          (eats popover lemon)
          (craves laceration pepper)
          (eats popover marzipan)
          (eats chocolate ham)
          (locale mutton guanabara)
          (eats melon ham)
          (orbits venus neptune)
          (harmony love neptune)
          (eats marzipan snickers)
          (eats pepper popover)
          (locale lemon goias)
          (craves triumph popover)
          (orbits vulcan venus)
          (eats ham melon)
          (locale marzipan bavaria)
          (eats chocolate orange)
          (eats marzipan popover)
          (eats orange chocolate)
          (eats snickers pea)
          (eats pea marzipan)
          (harmony entertainment venus)
          (eats lemon pea)
          (eats melon pepper)
          (locale orange bavaria)
          (craves love orange)
          (craves anxiety snickers)
          (locale pepper manitoba)
          (eats melon mutton)
          (eats pepper pea)
          (locale chocolate guanabara)
          (eats ham chocolate)
          (craves entertainment pepper)
          (eats snickers marzipan)
          (attacks arizona manitoba)
          (craves satisfaction mutton)
          (eats lemon popover)
          (locale snickers bavaria)
          (eats pea lemon)
          (craves depression popover)
          (craves hangover chocolate))
   (:goal (and (craves hangover ham))))","feast love orange chocolate guanabara bavaria (1)
overcome hangover love chocolate venus neptune (1)
feast love chocolate ham goias guanabara (1)
succumb hangover love ham venus neptune (1)"
mprime,"(define (domain mystery-prime-strips)
   (:requirements :negative-preconditions :equality)
   (:predicates
       (province ?x)
       (planet ?x)
       (food ?x)
       (pleasure ?x)
       (pain ?x)
       (eats ?n1 ?n2)
       (craves ?v ?n)
       (fears ?c ?v)
       (locale ?n ?a)
       (harmony ?v ?s)
       (attacks ?i ?j)
       (orbits ?i ?j))

   (:action overcome
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (pain ?c)
                          (pleasure ?v)
                          (craves ?c ?n)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s2)
                          (planet ?s2)
                          (orbits ?s1 ?s2)
                          (planet ?s1))
       :effect (and (not (craves ?c ?n))
                    (fears ?c ?v)
                    (not (harmony ?v ?s2))
                    (harmony ?v ?s1)))
   (:action feast
       :parameters (?v ?n1 ?n2 ?l1 ?l2)
       :precondition (and (craves ?v ?n1)
                          (food ?n1)
                          (pleasure ?v)
                          (eats ?n1 ?n2)
                          (food ?n2)
                          (locale ?n1 ?l2)
                          (attacks ?l1 ?l2))
       :effect (and (not (craves ?v ?n1))
                    (craves ?v ?n2)
                    (not (locale ?n1 ?l2))
                    (locale ?n1 ?l1)))
   (:action succumb
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (fears ?c ?v)
                          (pain ?c)
                          (pleasure ?v)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s1)
                          (orbits ?s1 ?s2))
       :effect (and (not (fears ?c ?v))
                    (craves ?c ?n)
                    (not (harmony ?v ?s1))
                    (harmony ?v ?s2)))
   (:action drink
      :parameters (?n1 ?n2 ?l11 ?l12 ?l13 ?l21 ?l22)
      :precondition (and (not (= ?n1 ?n2)) ; MALTE: fix
                         (locale ?n1 ?l11)
                         (attacks ?l12 ?l11)
                         (attacks ?l13 ?l12)
                         (locale ?n2 ?l21)
                         (attacks ?l21 ?l22))
      :effect (and (not (locale ?n1 ?l11))
                   (locale ?n1 ?l12)
                   (not (locale ?n2 ?l21))
                   (locale ?n2 ?l22))))

","(define (problem strips-mprime-x-4)
   (:domain mystery-prime-strips)
   (:objects muffin ham scallion shrimp cherry grapefruit bacon
             arugula scallop wurst aesthetics hangover dread sciatica
             jealousy loneliness abrasion anger surrey quebec bosnia oregon
             kentucky mars vulcan)
   (:init (food muffin)
          (food ham)
          (food scallion)
          (food shrimp)
          (food cherry)
          (food grapefruit)
          (food bacon)
          (food arugula)
          (food scallop)
          (food wurst)
          (pleasure aesthetics)
          (pain hangover)
          (pain dread)
          (pain sciatica)
          (pain jealousy)
          (pain loneliness)
          (pain abrasion)
          (pain anger)
          (province surrey)
          (province quebec)
          (province bosnia)
          (province oregon)
          (province kentucky)
          (planet mars)
          (planet vulcan)
          (locale cherry kentucky)
          (eats ham muffin)
          (eats cherry shrimp)
          (locale scallion quebec)
          (craves dread ham)
          (eats cherry ham)
          (eats grapefruit scallop)
          (craves sciatica grapefruit)
          (eats wurst bacon)
          (eats muffin ham)
          (attacks oregon kentucky)
          (eats arugula scallop)
          (eats arugula bacon)
          (eats bacon wurst)
          (eats arugula muffin)
          (craves anger wurst)
          (eats scallion shrimp)
          (eats arugula wurst)
          (locale arugula kentucky)
          (eats grapefruit wurst)
          (craves loneliness arugula)
          (harmony aesthetics vulcan)
          (eats muffin cherry)
          (eats scallop arugula)
          (locale muffin kentucky)
          (locale grapefruit surrey)
          (craves hangover muffin)
          (eats cherry arugula)
          (eats shrimp scallion)
          (locale ham bosnia)
          (eats muffin scallion)
          (eats arugula cherry)
          (eats scallop grapefruit)
          (craves abrasion scallop)
          (eats bacon arugula)
          (eats ham cherry)
          (eats cherry muffin)
          (locale bacon quebec)
          (locale wurst surrey)
          (attacks bosnia oregon)
          (locale scallop oregon)
          (eats shrimp cherry)
          (eats wurst arugula)
          (attacks quebec bosnia)
          (eats muffin arugula)
          (attacks surrey quebec)
          (craves aesthetics shrimp)
          (eats scallion muffin)
          (orbits mars vulcan)
          (locale shrimp bosnia)
          (craves jealousy bacon)
          (eats wurst grapefruit))
   (:goal (and (craves sciatica wurst))))","feast aesthetics shrimp cherry quebec bosnia (1)
feast aesthetics cherry arugula oregon kentucky (1)
feast aesthetics arugula scallop oregon kentucky (1)
feast aesthetics scallop grapefruit bosnia oregon (1)
overcome sciatica aesthetics grapefruit mars vulcan (1)
drink arugula grapefruit oregon bosnia quebec surrey quebec (1)
feast aesthetics grapefruit wurst surrey quebec (1)
succumb sciatica aesthetics wurst mars vulcan (1)"
mystery,"(define (domain mystery-strips)
   (:predicates
       (province ?x)
       (planet ?x)
       (food ?x)
       (pleasure ?x)
       (pain ?x)
       (eats ?n1 ?n2)
       (craves ?v ?n)
       (fears ?c ?v)
       (locale ?n ?a)
       (harmony ?v ?s)
       (attacks ?i ?j)
       (orbits ?i ?j))

   (:action overcome
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (pain ?c)
                          (pleasure ?v)
                          (craves ?c ?n)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s2)
                          (planet ?s2)
                          (orbits ?s1 ?s2)
                          (planet ?s1))
       :effect (and (not (craves ?c ?n))
                    (fears ?c ?v)
                    (not (harmony ?v ?s2))
                    (harmony ?v ?s1)))
   (:action feast
       :parameters (?v ?n1 ?n2 ?l1 ?l2)
       :precondition (and (craves ?v ?n1)
                          (food ?n1)
                          (pleasure ?v)
                          (eats ?n1 ?n2)
                          (food ?n2)
                          (locale ?n1 ?l2)
                          (attacks ?l1 ?l2))
       :effect (and (not (craves ?v ?n1))
                    (craves ?v ?n2)
                    (not (locale ?n1 ?l2))
                    (locale ?n1 ?l1)))
   (:action succumb
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (fears ?c ?v)
                          (pain ?c)
                          (pleasure ?v)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s1)
                          (orbits ?s1 ?s2))
       :effect (and (not (fears ?c ?v))
                    (craves ?c ?n)
                    (not (harmony ?v ?s1))
                    (harmony ?v ?s2))))
","(define (problem strips-mysty-x-1)
   (:domain mystery-strips)
   (:objects rice pear flounder okra pork lamb rest hangover
             depression abrasion kentucky bosnia surrey pennsylvania alsace
             quebec guanabara mars earth uranus venus)
   (:init (food rice)
          (food pear)
          (food flounder)
          (food okra)
          (food pork)
          (food lamb)
          (pleasure rest)
          (pain hangover)
          (pain depression)
          (pain abrasion)
          (province kentucky)
          (province bosnia)
          (province surrey)
          (province pennsylvania)
          (province alsace)
          (province quebec)
          (province guanabara)
          (planet mars)
          (planet earth)
          (planet uranus)
          (planet venus)
          (eats lamb pork)
          (eats pork okra)
          (locale okra guanabara)
          (locale pork quebec)
          (eats pork lamb)
          (harmony rest venus)
          (eats lamb flounder)
          (craves depression flounder)
          (eats okra pear)
          (eats rice rice)
          (eats rice flounder)
          (attacks kentucky bosnia)
          (attacks pennsylvania alsace)
          (attacks alsace quebec)
          (craves abrasion pork)
          (locale rice bosnia)
          (orbits mars earth)
          (eats flounder lamb)
          (craves rest pork)
          (orbits earth uranus)
          (locale pear surrey)
          (craves hangover rice)
          (attacks bosnia surrey)
          (attacks surrey pennsylvania)
          (locale lamb pennsylvania)
          (eats flounder rice)
          (eats rice pear)
          (attacks quebec guanabara)
          (eats pear okra)
          (eats pear rice)
          (eats okra pork)
          (orbits uranus venus)
          (locale flounder alsace))
   (:goal (and (craves abrasion rice))))","overcome abrasion rest pork uranus venus (1)
feast rest pork lamb alsace quebec (1)
feast rest lamb flounder surrey pennsylvania (1)
feast rest flounder rice pennsylvania alsace (1)
succumb abrasion rest rice uranus venus (1)"
mystery,"(define (domain mystery-strips)
   (:predicates
       (province ?x)
       (planet ?x)
       (food ?x)
       (pleasure ?x)
       (pain ?x)
       (eats ?n1 ?n2)
       (craves ?v ?n)
       (fears ?c ?v)
       (locale ?n ?a)
       (harmony ?v ?s)
       (attacks ?i ?j)
       (orbits ?i ?j))

   (:action overcome
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (pain ?c)
                          (pleasure ?v)
                          (craves ?c ?n)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s2)
                          (planet ?s2)
                          (orbits ?s1 ?s2)
                          (planet ?s1))
       :effect (and (not (craves ?c ?n))
                    (fears ?c ?v)
                    (not (harmony ?v ?s2))
                    (harmony ?v ?s1)))
   (:action feast
       :parameters (?v ?n1 ?n2 ?l1 ?l2)
       :precondition (and (craves ?v ?n1)
                          (food ?n1)
                          (pleasure ?v)
                          (eats ?n1 ?n2)
                          (food ?n2)
                          (locale ?n1 ?l2)
                          (attacks ?l1 ?l2))
       :effect (and (not (craves ?v ?n1))
                    (craves ?v ?n2)
                    (not (locale ?n1 ?l2))
                    (locale ?n1 ?l1)))
   (:action succumb
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (fears ?c ?v)
                          (pain ?c)
                          (pleasure ?v)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s1)
                          (orbits ?s1 ?s2))
       :effect (and (not (fears ?c ?v))
                    (craves ?c ?n)
                    (not (harmony ?v ?s1))
                    (harmony ?v ?s2))))
","(define (problem strips-mysty-x-2)
   (:domain mystery-strips)
   (:objects beef onion tuna flounder cherry muffin ham satiety
             stimulation curiosity entertainment anger depression prostatitis
             grief abrasion loneliness dread angina boils laceration
             sciatica hangover anxiety jealousy jealousy-2 depression-1
             grief-7 dread-8 prostatitis-3 boils-4 alsace arizona kentucky
             bosnia surrey mercury vulcan pluto jupiter)
   (:init (food beef)
          (food onion)
          (food tuna)
          (food flounder)
          (food cherry)
          (food muffin)
          (food ham)
          (pleasure satiety)
          (pleasure stimulation)
          (pleasure curiosity)
          (pleasure entertainment)
          (pain anger)
          (pain depression)
          (pain prostatitis)
          (pain grief)
          (pain abrasion)
          (pain loneliness)
          (pain dread)
          (pain angina)
          (pain boils)
          (pain laceration)
          (pain sciatica)
          (pain hangover)
          (pain anxiety)
          (pain jealousy)
          (pain jealousy-2)
          (pain depression-1)
          (pain grief-7)
          (pain dread-8)
          (pain prostatitis-3)
          (pain boils-4)
          (province alsace)
          (province arizona)
          (province kentucky)
          (province bosnia)
          (province surrey)
          (planet mercury)
          (planet vulcan)
          (planet pluto)
          (planet jupiter)
          (orbits mercury vulcan)
          (eats onion muffin)
          (eats tuna muffin)
          (eats muffin ham)
          (attacks arizona kentucky)
          (locale beef surrey)
          (craves laceration tuna)
          (craves dread onion)
          (locale onion bosnia)
          (locale tuna kentucky)
          (locale ham surrey)
          (eats flounder tuna)
          (craves prostatitis beef)
          (craves boils-4 ham)
          (craves entertainment ham)
          (harmony satiety vulcan)
          (craves satiety onion)
          (eats tuna ham)
          (craves stimulation flounder)
          (eats onion cherry)
          (eats tuna flounder)
          (eats beef tuna)
          (eats cherry flounder)
          (craves curiosity cherry)
          (orbits vulcan pluto)
          (locale flounder kentucky)
          (harmony entertainment jupiter)
          (attacks alsace arizona)
          (craves jealousy flounder)
          (eats ham tuna)
          (craves loneliness onion)
          (eats onion beef)
          (eats cherry onion)
          (harmony stimulation pluto)
          (craves anxiety flounder)
          (attacks kentucky bosnia)
          (locale muffin kentucky)
          (craves sciatica tuna)
          (craves grief beef)
          (craves grief-7 ham)
          (harmony curiosity pluto)
          (craves jealousy-2 cherry)
          (craves angina onion)
          (craves depression-1 muffin)
          (eats muffin tuna)
          (craves anger beef)
          (locale cherry surrey)
          (eats beef onion)
          (craves abrasion beef)
          (attacks bosnia surrey)
          (eats cherry beef)
          (eats beef cherry)
          (craves hangover tuna)
          (eats muffin onion)
          (orbits pluto jupiter)
          (eats flounder cherry)
          (craves boils tuna)
          (eats tuna beef)
          (craves prostatitis-3 ham)
          (eats ham muffin)
          (craves dread-8 ham)
          (craves depression beef))
   (:goal (and (craves grief-7 beef)
               (craves depression-1 beef))))","overcome grief-7 entertainment ham pluto jupiter (1)
feast entertainment ham muffin bosnia surrey (1)
overcome depression-1 entertainment muffin vulcan pluto (1)
feast entertainment muffin onion arizona kentucky (1)
feast entertainment onion beef kentucky bosnia (1)
succumb depression-1 entertainment beef vulcan pluto (1)
succumb grief-7 entertainment beef pluto jupiter (1)"
mystery,"(define (domain mystery-strips)
   (:predicates
       (province ?x)
       (planet ?x)
       (food ?x)
       (pleasure ?x)
       (pain ?x)
       (eats ?n1 ?n2)
       (craves ?v ?n)
       (fears ?c ?v)
       (locale ?n ?a)
       (harmony ?v ?s)
       (attacks ?i ?j)
       (orbits ?i ?j))

   (:action overcome
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (pain ?c)
                          (pleasure ?v)
                          (craves ?c ?n)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s2)
                          (planet ?s2)
                          (orbits ?s1 ?s2)
                          (planet ?s1))
       :effect (and (not (craves ?c ?n))
                    (fears ?c ?v)
                    (not (harmony ?v ?s2))
                    (harmony ?v ?s1)))
   (:action feast
       :parameters (?v ?n1 ?n2 ?l1 ?l2)
       :precondition (and (craves ?v ?n1)
                          (food ?n1)
                          (pleasure ?v)
                          (eats ?n1 ?n2)
                          (food ?n2)
                          (locale ?n1 ?l2)
                          (attacks ?l1 ?l2))
       :effect (and (not (craves ?v ?n1))
                    (craves ?v ?n2)
                    (not (locale ?n1 ?l2))
                    (locale ?n1 ?l1)))
   (:action succumb
       :parameters (?c ?v ?n ?s1 ?s2)
       :precondition (and (fears ?c ?v)
                          (pain ?c)
                          (pleasure ?v)
                          (craves ?v ?n)
                          (food ?n)
                          (harmony ?v ?s1)
                          (orbits ?s1 ?s2))
       :effect (and (not (fears ?c ?v))
                    (craves ?c ?n)
                    (not (harmony ?v ?s1))
                    (harmony ?v ?s2))))
","(define (problem strips-mysty-x-3)
   (:domain mystery-strips)
   (:objects pepper pea lemon snickers marzipan popover melon orange
             chocolate ham mutton entertainment triumph love satisfaction
             laceration anxiety grief depression boils angina hangover
             jealousy goias guanabara bavaria arizona manitoba vulcan venus
             neptune)
   (:init (food pepper)
          (food pea)
          (food lemon)
          (food snickers)
          (food marzipan)
          (food popover)
          (food melon)
          (food orange)
          (food chocolate)
          (food ham)
          (food mutton)
          (pleasure entertainment)
          (pleasure triumph)
          (pleasure love)
          (pleasure satisfaction)
          (pain laceration)
          (pain anxiety)
          (pain grief)
          (pain depression)
          (pain boils)
          (pain angina)
          (pain hangover)
          (pain jealousy)
          (province goias)
          (province guanabara)
          (province bavaria)
          (province arizona)
          (province manitoba)
          (planet vulcan)
          (planet venus)
          (planet neptune)
          (eats orange mutton)
          (harmony satisfaction neptune)
          (craves angina orange)
          (craves grief marzipan)
          (eats pea snickers)
          (eats popover pepper)
          (attacks guanabara bavaria)
          (eats mutton orange)
          (attacks bavaria arizona)
          (attacks goias guanabara)
          (harmony triumph neptune)
          (eats marzipan pea)
          (locale popover arizona)
          (locale ham manitoba)
          (eats mutton melon)
          (craves jealousy ham)
          (eats pea pepper)
          (eats pepper melon)
          (locale melon manitoba)
          (locale pea bavaria)
          (craves boils melon)
          (eats popover lemon)
          (craves laceration pepper)
          (eats popover marzipan)
          (eats chocolate ham)
          (locale mutton guanabara)
          (eats melon ham)
          (orbits venus neptune)
          (harmony love neptune)
          (eats marzipan snickers)
          (eats pepper popover)
          (locale lemon goias)
          (craves triumph popover)
          (orbits vulcan venus)
          (eats ham melon)
          (locale marzipan bavaria)
          (eats chocolate orange)
          (eats marzipan popover)
          (eats orange chocolate)
          (eats snickers pea)
          (eats pea marzipan)
          (harmony entertainment venus)
          (eats lemon pea)
          (eats melon pepper)
          (locale orange bavaria)
          (craves love orange)
          (craves anxiety snickers)
          (locale pepper manitoba)
          (eats melon mutton)
          (eats pepper pea)
          (locale chocolate guanabara)
          (eats ham chocolate)
          (craves entertainment pepper)
          (eats snickers marzipan)
          (attacks arizona manitoba)
          (craves satisfaction mutton)
          (eats lemon popover)
          (locale snickers bavaria)
          (eats pea lemon)
          (craves depression popover)
          (craves hangover chocolate))
   (:goal (and (craves hangover ham))))","feast love orange chocolate guanabara bavaria (1)
overcome hangover love chocolate venus neptune (1)
feast love chocolate ham goias guanabara (1)
succumb hangover love ham venus neptune (1)"
rovers,"(define (domain Rover)
(:requirements :typing)
(:types rover waypoint store camera mode lander objective)

(:predicates (at ?x - rover ?y - waypoint) 
             (at_lander ?x - lander ?y - waypoint)
             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)
             (equipped_for_soil_analysis ?r - rover)
             (equipped_for_rock_analysis ?r - rover)
             (equipped_for_imaging ?r - rover)
             (empty ?s - store)
             (have_rock_analysis ?r - rover ?w - waypoint)
             (have_soil_analysis ?r - rover ?w - waypoint)
             (full ?s - store)
             (calibrated ?c - camera ?r - rover) 
             (supports ?c - camera ?m - mode)
             (available ?r - rover)
             (visible ?w - waypoint ?p - waypoint)
             (have_image ?r - rover ?o - objective ?m - mode)
             (communicated_soil_data ?w - waypoint)
             (communicated_rock_data ?w - waypoint)
             (communicated_image_data ?o - objective ?m - mode)
             (at_soil_sample ?w - waypoint)
             (at_rock_sample ?w - waypoint)
             (visible_from ?o - objective ?w - waypoint)
             (store_of ?s - store ?r - rover)
             (calibration_target ?i - camera ?o - objective)
             (on_board ?i - camera ?r - rover)
             (channel_free ?l - lander)

)

        
(:action navigate
:parameters (?x - rover ?y - waypoint ?z - waypoint) 
:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) 
                (visible ?y ?z)
            )
:effect (and (not (at ?x ?y)) (at ?x ?z)
                )
)

(:action sample_soil
:parameters (?x - rover ?s - store ?p - waypoint)
:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)
                )
:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))
                )
)

(:action sample_rock
:parameters (?x - rover ?s - store ?p - waypoint)
:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)
                )
:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))
                )
)

(:action drop
:parameters (?x - rover ?y - store)
:precondition (and (store_of ?y ?x) (full ?y)
                )
:effect (and (not (full ?y)) (empty ?y)
        )
)

(:action calibrate
 :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)
 :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)
                )
 :effect (calibrated ?i ?r) 
)




(:action take_image
 :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)
 :precondition (and (calibrated ?i ?r)
                         (on_board ?i ?r)
                      (equipped_for_imaging ?r)
                      (supports ?i ?m)
                          (visible_from ?o ?p)
                     (at ?r ?p)
               )
 :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))
                )
)


(:action communicate_soil_data
 :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) 
                   (visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)
                (communicated_soil_data ?p)(available ?r)
        )
)

(:action communicate_rock_data
 :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)
                   (visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)
          )
)


(:action communicate_image_data
 :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)
          )
)

)
","(define (problem roverprob1234) (:domain Rover)
(:objects
	general - Lander
	colour high_res low_res - Mode
	rover0 - Rover
	rover0store - Store
	waypoint0 waypoint1 waypoint2 waypoint3 - Waypoint
	camera0 - Camera
	objective0 objective1 - Objective
	)
(:init
	(visible waypoint1 waypoint0)
	(visible waypoint0 waypoint1)
	(visible waypoint2 waypoint0)
	(visible waypoint0 waypoint2)
	(visible waypoint2 waypoint1)
	(visible waypoint1 waypoint2)
	(visible waypoint3 waypoint0)
	(visible waypoint0 waypoint3)
	(visible waypoint3 waypoint1)
	(visible waypoint1 waypoint3)
	(visible waypoint3 waypoint2)
	(visible waypoint2 waypoint3)
	(at_soil_sample waypoint0)
	(at_rock_sample waypoint1)
	(at_soil_sample waypoint2)
	(at_rock_sample waypoint2)
	(at_soil_sample waypoint3)
	(at_rock_sample waypoint3)
	(at_lander general waypoint0)
	(channel_free general)
	(at rover0 waypoint3)
	(available rover0)
	(store_of rover0store rover0)
	(empty rover0store)
	(equipped_for_soil_analysis rover0)
	(equipped_for_rock_analysis rover0)
	(equipped_for_imaging rover0)
	(can_traverse rover0 waypoint3 waypoint0)
	(can_traverse rover0 waypoint0 waypoint3)
	(can_traverse rover0 waypoint3 waypoint1)
	(can_traverse rover0 waypoint1 waypoint3)
	(can_traverse rover0 waypoint1 waypoint2)
	(can_traverse rover0 waypoint2 waypoint1)
	(on_board camera0 rover0)
	(calibration_target camera0 objective1)
	(supports camera0 colour)
	(supports camera0 high_res)
	(visible_from objective0 waypoint0)
	(visible_from objective0 waypoint1)
	(visible_from objective0 waypoint2)
	(visible_from objective0 waypoint3)
	(visible_from objective1 waypoint0)
	(visible_from objective1 waypoint1)
	(visible_from objective1 waypoint2)
	(visible_from objective1 waypoint3)
)

(:goal (and
(communicated_soil_data waypoint2)
(communicated_rock_data waypoint3)
(communicated_image_data objective1 high_res)
	)
)
)","calibrate rover0 camera0 objective1 waypoint3 (1)
sample_rock rover0 rover0store waypoint3 (1)
navigate rover0 waypoint3 waypoint1 (1)
communicate_rock_data rover0 general waypoint3 waypoint1 waypoint0 (1)
drop rover0 rover0store (1)
navigate rover0 waypoint1 waypoint2 (1)
take_image rover0 waypoint2 objective1 camera0 high_res (1)
communicate_image_data rover0 general objective1 high_res waypoint2 waypoint0 (1)
sample_soil rover0 rover0store waypoint2 (1)
communicate_soil_data rover0 general waypoint2 waypoint2 waypoint0 (1)"
rovers,"(define (domain Rover)
(:requirements :typing)
(:types rover waypoint store camera mode lander objective)

(:predicates (at ?x - rover ?y - waypoint) 
             (at_lander ?x - lander ?y - waypoint)
             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)
             (equipped_for_soil_analysis ?r - rover)
             (equipped_for_rock_analysis ?r - rover)
             (equipped_for_imaging ?r - rover)
             (empty ?s - store)
             (have_rock_analysis ?r - rover ?w - waypoint)
             (have_soil_analysis ?r - rover ?w - waypoint)
             (full ?s - store)
             (calibrated ?c - camera ?r - rover) 
             (supports ?c - camera ?m - mode)
             (available ?r - rover)
             (visible ?w - waypoint ?p - waypoint)
             (have_image ?r - rover ?o - objective ?m - mode)
             (communicated_soil_data ?w - waypoint)
             (communicated_rock_data ?w - waypoint)
             (communicated_image_data ?o - objective ?m - mode)
             (at_soil_sample ?w - waypoint)
             (at_rock_sample ?w - waypoint)
             (visible_from ?o - objective ?w - waypoint)
             (store_of ?s - store ?r - rover)
             (calibration_target ?i - camera ?o - objective)
             (on_board ?i - camera ?r - rover)
             (channel_free ?l - lander)

)

        
(:action navigate
:parameters (?x - rover ?y - waypoint ?z - waypoint) 
:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) 
                (visible ?y ?z)
            )
:effect (and (not (at ?x ?y)) (at ?x ?z)
                )
)

(:action sample_soil
:parameters (?x - rover ?s - store ?p - waypoint)
:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)
                )
:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))
                )
)

(:action sample_rock
:parameters (?x - rover ?s - store ?p - waypoint)
:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)
                )
:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))
                )
)

(:action drop
:parameters (?x - rover ?y - store)
:precondition (and (store_of ?y ?x) (full ?y)
                )
:effect (and (not (full ?y)) (empty ?y)
        )
)

(:action calibrate
 :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)
 :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)
                )
 :effect (calibrated ?i ?r) 
)




(:action take_image
 :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)
 :precondition (and (calibrated ?i ?r)
                         (on_board ?i ?r)
                      (equipped_for_imaging ?r)
                      (supports ?i ?m)
                          (visible_from ?o ?p)
                     (at ?r ?p)
               )
 :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))
                )
)


(:action communicate_soil_data
 :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) 
                   (visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)
                (communicated_soil_data ?p)(available ?r)
        )
)

(:action communicate_rock_data
 :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)
                   (visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)
          )
)


(:action communicate_image_data
 :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)
          )
)

)
","(define (problem roverprob4213) (:domain Rover)
(:objects
        general - Lander
        colour high_res low_res - Mode
        rover0 - Rover
        rover0store - Store
        waypoint0 waypoint1 waypoint2 waypoint3 - Waypoint
        camera0 camera1 - Camera
        objective0 objective1 - Objective
        )
(:init
        (visible waypoint0 waypoint1)
        (visible waypoint1 waypoint0)
        (visible waypoint1 waypoint2)
        (visible waypoint2 waypoint1)
        (visible waypoint1 waypoint3)
        (visible waypoint3 waypoint1)
        (visible waypoint2 waypoint0)
        (visible waypoint0 waypoint2)
        (visible waypoint2 waypoint3)
        (visible waypoint3 waypoint2)
        (visible waypoint3 waypoint0)
        (visible waypoint0 waypoint3)
        (at_soil_sample waypoint0)
        (at_rock_sample waypoint0)
        (at_lander general waypoint1)
        (channel_free general)
        (at rover0 waypoint0)
        (available rover0)
        (store_of rover0store rover0)
        (empty rover0store)
        (equipped_for_soil_analysis rover0)
        (equipped_for_rock_analysis rover0)
        (equipped_for_imaging rover0)
        (can_traverse rover0 waypoint0 waypoint1)
        (can_traverse rover0 waypoint1 waypoint0)
        (can_traverse rover0 waypoint0 waypoint2)
        (can_traverse rover0 waypoint2 waypoint0)
        (can_traverse rover0 waypoint0 waypoint3)
        (can_traverse rover0 waypoint3 waypoint0)
        (on_board camera0 rover0)
        (calibration_target camera0 objective0)
        (supports camera0 colour)
        (supports camera0 high_res)
        (supports camera0 low_res)
        (on_board camera1 rover0)
        (calibration_target camera1 objective1)
        (supports camera1 high_res)
        (visible_from objective0 waypoint0)
        (visible_from objective1 waypoint0)
        (visible_from objective1 waypoint1)
        (visible_from objective1 waypoint2)
)

(:goal (and
(communicated_soil_data waypoint0)
(communicated_rock_data waypoint0)
(communicated_image_data objective1 low_res)
        )
)
)
","calibrate rover0 camera0 objective0 waypoint0 (1)
take_image rover0 waypoint0 objective1 camera0 low_res (1)
communicate_image_data rover0 general objective1 low_res waypoint0 waypoint1 (1)
sample_rock rover0 rover0store waypoint0 (1)
communicate_rock_data rover0 general waypoint0 waypoint0 waypoint1 (1)
drop rover0 rover0store (1)
sample_soil rover0 rover0store waypoint0 (1)
communicate_soil_data rover0 general waypoint0 waypoint0 waypoint1 (1)"
rovers,"(define (domain Rover)
(:requirements :typing)
(:types rover waypoint store camera mode lander objective)

(:predicates (at ?x - rover ?y - waypoint) 
             (at_lander ?x - lander ?y - waypoint)
             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)
             (equipped_for_soil_analysis ?r - rover)
             (equipped_for_rock_analysis ?r - rover)
             (equipped_for_imaging ?r - rover)
             (empty ?s - store)
             (have_rock_analysis ?r - rover ?w - waypoint)
             (have_soil_analysis ?r - rover ?w - waypoint)
             (full ?s - store)
             (calibrated ?c - camera ?r - rover) 
             (supports ?c - camera ?m - mode)
             (available ?r - rover)
             (visible ?w - waypoint ?p - waypoint)
             (have_image ?r - rover ?o - objective ?m - mode)
             (communicated_soil_data ?w - waypoint)
             (communicated_rock_data ?w - waypoint)
             (communicated_image_data ?o - objective ?m - mode)
             (at_soil_sample ?w - waypoint)
             (at_rock_sample ?w - waypoint)
             (visible_from ?o - objective ?w - waypoint)
             (store_of ?s - store ?r - rover)
             (calibration_target ?i - camera ?o - objective)
             (on_board ?i - camera ?r - rover)
             (channel_free ?l - lander)

)

        
(:action navigate
:parameters (?x - rover ?y - waypoint ?z - waypoint) 
:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) 
                (visible ?y ?z)
            )
:effect (and (not (at ?x ?y)) (at ?x ?z)
                )
)

(:action sample_soil
:parameters (?x - rover ?s - store ?p - waypoint)
:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)
                )
:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))
                )
)

(:action sample_rock
:parameters (?x - rover ?s - store ?p - waypoint)
:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)
                )
:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))
                )
)

(:action drop
:parameters (?x - rover ?y - store)
:precondition (and (store_of ?y ?x) (full ?y)
                )
:effect (and (not (full ?y)) (empty ?y)
        )
)

(:action calibrate
 :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)
 :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)
                )
 :effect (calibrated ?i ?r) 
)




(:action take_image
 :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)
 :precondition (and (calibrated ?i ?r)
                         (on_board ?i ?r)
                      (equipped_for_imaging ?r)
                      (supports ?i ?m)
                          (visible_from ?o ?p)
                     (at ?r ?p)
               )
 :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))
                )
)


(:action communicate_soil_data
 :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) 
                   (visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)
                (communicated_soil_data ?p)(available ?r)
        )
)

(:action communicate_rock_data
 :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)
                   (visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)
          )
)


(:action communicate_image_data
 :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)
          )
)

)
","(define (problem roverprob3726) (:domain Rover)
(:objects
        general - Lander
        colour high_res low_res - Mode
        rover0 rover1 - Rover
        rover0store rover1store - Store
        waypoint0 waypoint1 waypoint2 waypoint3 - Waypoint
        camera0 camera1 - Camera
        objective0 objective1 - Objective
        )
(:init
        (visible waypoint0 waypoint1)
        (visible waypoint1 waypoint0)
        (visible waypoint0 waypoint3)
        (visible waypoint3 waypoint0)
        (visible waypoint1 waypoint2)
        (visible waypoint2 waypoint1)
        (visible waypoint1 waypoint3)
        (visible waypoint3 waypoint1)
        (visible waypoint2 waypoint0)
        (visible waypoint0 waypoint2)
        (visible waypoint3 waypoint2)
        (visible waypoint2 waypoint3)
        (at_rock_sample waypoint0)
        (at_rock_sample waypoint1)
        (at_soil_sample waypoint2)
        (at_rock_sample waypoint2)
        (at_lander general waypoint0)
        (channel_free general)
        (at rover0 waypoint1)
        (available rover0)
        (store_of rover0store rover0)
        (empty rover0store)
        (equipped_for_soil_analysis rover0)
        (equipped_for_rock_analysis rover0)
        (equipped_for_imaging rover0)
        (can_traverse rover0 waypoint1 waypoint0)
        (can_traverse rover0 waypoint0 waypoint1)
        (can_traverse rover0 waypoint1 waypoint3)
        (can_traverse rover0 waypoint3 waypoint1)
        (at rover1 waypoint3)
        (available rover1)
        (store_of rover1store rover1)
        (empty rover1store)
        (equipped_for_soil_analysis rover1)
        (equipped_for_rock_analysis rover1)
        (equipped_for_imaging rover1)
        (can_traverse rover1 waypoint3 waypoint0)
        (can_traverse rover1 waypoint0 waypoint3)
        (can_traverse rover1 waypoint3 waypoint2)
        (can_traverse rover1 waypoint2 waypoint3)
        (can_traverse rover1 waypoint0 waypoint1)
        (can_traverse rover1 waypoint1 waypoint0)
        (on_board camera0 rover0)
        (calibration_target camera0 objective1)
        (supports camera0 low_res)
        (on_board camera1 rover1)
        (calibration_target camera1 objective0)
        (supports camera1 colour)
        (supports camera1 high_res)
        (supports camera1 low_res)
        (visible_from objective0 waypoint0)
        (visible_from objective0 waypoint1)
        (visible_from objective1 waypoint0)
        (visible_from objective1 waypoint1)
)

(:goal (and
(communicated_soil_data waypoint2)
(communicated_rock_data waypoint0)
(communicated_image_data objective0 colour)
        )
)
)
","navigate rover1 waypoint3 waypoint0 (1)
calibrate rover1 camera1 objective0 waypoint0 (1)
take_image rover1 waypoint0 objective0 camera1 colour (1)
sample_rock rover1 rover1store waypoint0 (1)
navigate rover1 waypoint0 waypoint3 (1)
navigate rover1 waypoint3 waypoint2 (1)
communicate_image_data rover1 general objective0 colour waypoint2 waypoint0 (1)
communicate_rock_data rover1 general waypoint0 waypoint2 waypoint0 (1)
drop rover1 rover1store (1)
sample_soil rover1 rover1store waypoint2 (1)
communicate_soil_data rover1 general waypoint2 waypoint2 waypoint0 (1)"
rovers,"(define (domain Rover)
(:requirements :typing)
(:types rover waypoint store camera mode lander objective)

(:predicates (at ?x - rover ?y - waypoint) 
             (at_lander ?x - lander ?y - waypoint)
             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)
             (equipped_for_soil_analysis ?r - rover)
             (equipped_for_rock_analysis ?r - rover)
             (equipped_for_imaging ?r - rover)
             (empty ?s - store)
             (have_rock_analysis ?r - rover ?w - waypoint)
             (have_soil_analysis ?r - rover ?w - waypoint)
             (full ?s - store)
             (calibrated ?c - camera ?r - rover) 
             (supports ?c - camera ?m - mode)
             (available ?r - rover)
             (visible ?w - waypoint ?p - waypoint)
             (have_image ?r - rover ?o - objective ?m - mode)
             (communicated_soil_data ?w - waypoint)
             (communicated_rock_data ?w - waypoint)
             (communicated_image_data ?o - objective ?m - mode)
             (at_soil_sample ?w - waypoint)
             (at_rock_sample ?w - waypoint)
             (visible_from ?o - objective ?w - waypoint)
             (store_of ?s - store ?r - rover)
             (calibration_target ?i - camera ?o - objective)
             (on_board ?i - camera ?r - rover)
             (channel_free ?l - lander)

)

        
(:action navigate
:parameters (?x - rover ?y - waypoint ?z - waypoint) 
:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) 
                (visible ?y ?z)
            )
:effect (and (not (at ?x ?y)) (at ?x ?z)
                )
)

(:action sample_soil
:parameters (?x - rover ?s - store ?p - waypoint)
:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)
                )
:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))
                )
)

(:action sample_rock
:parameters (?x - rover ?s - store ?p - waypoint)
:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)
                )
:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))
                )
)

(:action drop
:parameters (?x - rover ?y - store)
:precondition (and (store_of ?y ?x) (full ?y)
                )
:effect (and (not (full ?y)) (empty ?y)
        )
)

(:action calibrate
 :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)
 :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)
                )
 :effect (calibrated ?i ?r) 
)




(:action take_image
 :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)
 :precondition (and (calibrated ?i ?r)
                         (on_board ?i ?r)
                      (equipped_for_imaging ?r)
                      (supports ?i ?m)
                          (visible_from ?o ?p)
                     (at ?r ?p)
               )
 :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))
                )
)


(:action communicate_soil_data
 :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) 
                   (visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)
                (communicated_soil_data ?p)(available ?r)
        )
)

(:action communicate_rock_data
 :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)
                   (visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)
          )
)


(:action communicate_image_data
 :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)
          )
)

)
","(define (problem roverprob6232) (:domain Rover)
(:objects
        general - Lander
        colour high_res low_res - Mode
        rover0 rover1 - Rover
        rover0store rover1store - Store
        waypoint0 waypoint1 waypoint2 waypoint3 - Waypoint
        camera0 camera1 camera2 - Camera
        objective0 objective1 objective2 - Objective
        )
(:init
        (visible waypoint1 waypoint0)
        (visible waypoint0 waypoint1)
        (visible waypoint2 waypoint1)
        (visible waypoint1 waypoint2)
        (visible waypoint2 waypoint3)
        (visible waypoint3 waypoint2)
        (visible waypoint3 waypoint1)
        (visible waypoint1 waypoint3)
        (at_rock_sample waypoint1)
        (at_soil_sample waypoint2)
        (at_soil_sample waypoint3)
        (at_rock_sample waypoint3)
        (at_lander general waypoint2)
        (channel_free general)
        (at rover0 waypoint3)
        (available rover0)
        (store_of rover0store rover0)
        (empty rover0store)
        (equipped_for_soil_analysis rover0)
        (equipped_for_imaging rover0)
        (can_traverse rover0 waypoint3 waypoint1)
        (can_traverse rover0 waypoint1 waypoint3)
        (at rover1 waypoint2)
        (available rover1)
        (store_of rover1store rover1)
        (empty rover1store)
        (equipped_for_soil_analysis rover1)
        (equipped_for_rock_analysis rover1)
        (equipped_for_imaging rover1)
        (can_traverse rover1 waypoint2 waypoint1)
        (can_traverse rover1 waypoint1 waypoint2)
        (can_traverse rover1 waypoint2 waypoint3)
        (can_traverse rover1 waypoint3 waypoint2)
        (can_traverse rover1 waypoint1 waypoint0)
        (can_traverse rover1 waypoint0 waypoint1)
        (on_board camera0 rover1)
        (calibration_target camera0 objective0)
        (supports camera0 colour)
        (supports camera0 high_res)
        (on_board camera1 rover0)
        (calibration_target camera1 objective0)
        (supports camera1 colour)
        (supports camera1 low_res)
        (on_board camera2 rover0)
        (calibration_target camera2 objective1)
        (supports camera2 low_res)
        (visible_from objective0 waypoint0)
        (visible_from objective0 waypoint1)
        (visible_from objective0 waypoint2)
        (visible_from objective0 waypoint3)
        (visible_from objective1 waypoint0)
        (visible_from objective1 waypoint1)
        (visible_from objective2 waypoint0)
        (visible_from objective2 waypoint1)
        (visible_from objective2 waypoint2)
)

(:goal (and
(communicated_soil_data waypoint3)
(communicated_rock_data waypoint1)
(communicated_image_data objective0 high_res)
        )
)
)
","calibrate rover1 camera0 objective0 waypoint2 (1)
navigate rover1 waypoint2 waypoint1 (1)
take_image rover1 waypoint1 objective0 camera0 high_res (1)
communicate_image_data rover1 general objective0 high_res waypoint1 waypoint2 (1)
sample_rock rover1 rover1store waypoint1 (1)
communicate_rock_data rover1 general waypoint1 waypoint1 waypoint2 (1)
sample_soil rover0 rover0store waypoint3 (1)
communicate_soil_data rover0 general waypoint3 waypoint3 waypoint2 (1)"
rovers,"(define (domain Rover)
(:requirements :typing)
(:types rover waypoint store camera mode lander objective)

(:predicates (at ?x - rover ?y - waypoint) 
             (at_lander ?x - lander ?y - waypoint)
             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)
             (equipped_for_soil_analysis ?r - rover)
             (equipped_for_rock_analysis ?r - rover)
             (equipped_for_imaging ?r - rover)
             (empty ?s - store)
             (have_rock_analysis ?r - rover ?w - waypoint)
             (have_soil_analysis ?r - rover ?w - waypoint)
             (full ?s - store)
             (calibrated ?c - camera ?r - rover) 
             (supports ?c - camera ?m - mode)
             (available ?r - rover)
             (visible ?w - waypoint ?p - waypoint)
             (have_image ?r - rover ?o - objective ?m - mode)
             (communicated_soil_data ?w - waypoint)
             (communicated_rock_data ?w - waypoint)
             (communicated_image_data ?o - objective ?m - mode)
             (at_soil_sample ?w - waypoint)
             (at_rock_sample ?w - waypoint)
             (visible_from ?o - objective ?w - waypoint)
             (store_of ?s - store ?r - rover)
             (calibration_target ?i - camera ?o - objective)
             (on_board ?i - camera ?r - rover)
             (channel_free ?l - lander)

)

        
(:action navigate
:parameters (?x - rover ?y - waypoint ?z - waypoint) 
:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) 
                (visible ?y ?z)
            )
:effect (and (not (at ?x ?y)) (at ?x ?z)
                )
)

(:action sample_soil
:parameters (?x - rover ?s - store ?p - waypoint)
:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)
                )
:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))
                )
)

(:action sample_rock
:parameters (?x - rover ?s - store ?p - waypoint)
:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)
                )
:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))
                )
)

(:action drop
:parameters (?x - rover ?y - store)
:precondition (and (store_of ?y ?x) (full ?y)
                )
:effect (and (not (full ?y)) (empty ?y)
        )
)

(:action calibrate
 :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)
 :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)
                )
 :effect (calibrated ?i ?r) 
)




(:action take_image
 :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)
 :precondition (and (calibrated ?i ?r)
                         (on_board ?i ?r)
                      (equipped_for_imaging ?r)
                      (supports ?i ?m)
                          (visible_from ?o ?p)
                     (at ?r ?p)
               )
 :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))
                )
)


(:action communicate_soil_data
 :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) 
                   (visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)
                (communicated_soil_data ?p)(available ?r)
        )
)

(:action communicate_rock_data
 :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)
                   (visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)
          )
)


(:action communicate_image_data
 :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)
 :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)
            )
 :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)
          )
)

)
","(define (problem roverprob2435) (:domain Rover)
(:objects
        general - Lander
        colour high_res low_res - Mode
        rover0 rover1 - Rover
        rover0store rover1store - Store
        waypoint0 waypoint1 waypoint2 waypoint3 - Waypoint
        camera0 camera1 camera2 - Camera
        objective0 objective1 objective2 - Objective
        )
(:init
        (visible waypoint0 waypoint2)
        (visible waypoint2 waypoint0)
        (visible waypoint1 waypoint0)
        (visible waypoint0 waypoint1)
        (visible waypoint1 waypoint3)
        (visible waypoint3 waypoint1)
        (visible waypoint2 waypoint1)
        (visible waypoint1 waypoint2)
        (visible waypoint3 waypoint0)
        (visible waypoint0 waypoint3)
        (visible waypoint3 waypoint2)
        (visible waypoint2 waypoint3)
        (at_rock_sample waypoint0)
        (at_soil_sample waypoint1)
        (at_rock_sample waypoint1)
        (at_soil_sample waypoint2)
        (at_soil_sample waypoint3)
        (at_lander general waypoint3)
        (channel_free general)
        (at rover0 waypoint0)
        (available rover0)
        (store_of rover0store rover0)
        (empty rover0store)
        (equipped_for_rock_analysis rover0)
        (equipped_for_imaging rover0)
        (can_traverse rover0 waypoint0 waypoint1)
        (can_traverse rover0 waypoint1 waypoint0)
        (can_traverse rover0 waypoint0 waypoint3)
        (can_traverse rover0 waypoint3 waypoint0)
        (at rover1 waypoint0)
        (available rover1)
        (store_of rover1store rover1)
        (empty rover1store)
        (equipped_for_soil_analysis rover1)
        (equipped_for_imaging rover1)
        (can_traverse rover1 waypoint0 waypoint1)
        (can_traverse rover1 waypoint1 waypoint0)
        (can_traverse rover1 waypoint1 waypoint2)
        (can_traverse rover1 waypoint2 waypoint1)
        (can_traverse rover1 waypoint1 waypoint3)
        (can_traverse rover1 waypoint3 waypoint1)
        (on_board camera0 rover1)
        (calibration_target camera0 objective1)
        (supports camera0 high_res)
        (supports camera0 low_res)
        (on_board camera1 rover1)
        (calibration_target camera1 objective1)
        (supports camera1 colour)
        (supports camera1 high_res)
        (on_board camera2 rover0)
        (calibration_target camera2 objective1)
        (supports camera2 colour)
        (supports camera2 high_res)
        (supports camera2 low_res)
        (visible_from objective0 waypoint0)
        (visible_from objective0 waypoint1)
        (visible_from objective0 waypoint2)
        (visible_from objective0 waypoint3)
        (visible_from objective1 waypoint0)
        (visible_from objective1 waypoint1)
        (visible_from objective1 waypoint2)
        (visible_from objective2 waypoint0)
        (visible_from objective2 waypoint1)
        (visible_from objective2 waypoint2)
)

(:goal (and
(communicated_soil_data waypoint1)
(communicated_soil_data waypoint2)
(communicated_rock_data waypoint0)
(communicated_rock_data waypoint1)
(communicated_image_data objective0 high_res)
(communicated_image_data objective2 high_res)
(communicated_image_data objective0 colour)
        )
)
)
","calibrate rover1 camera1 objective1 waypoint0 (1)
sample_rock rover0 rover0store waypoint0 (1)
navigate rover0 waypoint0 waypoint1 (1)
communicate_rock_data rover0 general waypoint0 waypoint1 waypoint3 (1)
drop rover0 rover0store (1)
sample_rock rover0 rover0store waypoint1 (1)
communicate_rock_data rover0 general waypoint1 waypoint1 waypoint3 (1)
calibrate rover1 camera0 objective1 waypoint0 (1)
take_image rover1 waypoint0 objective0 camera1 colour (1)
communicate_image_data rover1 general objective0 colour waypoint0 waypoint3 (1)
calibrate rover1 camera1 objective1 waypoint0 (1)
take_image rover1 waypoint0 objective0 camera1 high_res (1)
communicate_image_data rover1 general objective0 high_res waypoint0 waypoint3 (1)
navigate rover1 waypoint0 waypoint1 (1)
sample_soil rover1 rover1store waypoint1 (1)
communicate_soil_data rover1 general waypoint1 waypoint1 waypoint3 (1)
drop rover1 rover1store (1)
navigate rover1 waypoint1 waypoint2 (1)
take_image rover1 waypoint2 objective2 camera0 high_res (1)
communicate_image_data rover1 general objective2 high_res waypoint2 waypoint3 (1)
sample_soil rover1 rover1store waypoint2 (1)
communicate_soil_data rover1 general waypoint2 waypoint2 waypoint3 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-1)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 container-0-0 - storearea
        hoist0 - hoist
        crate0 - crate
        container0 - container
        depot0 - depot
        loadarea - transitarea)

(:init
        (in depot0-1-1 depot0)
        (on crate0 container-0-0)
        (in crate0 container0)
        (in container-0-0 container0)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)  
        (connected depot0-1-1 loadarea)
        (connected loadarea depot0-1-1)    
        (at hoist0 depot0-1-1)
        (available hoist0))

(:goal (and
        (in crate0 depot0)))
)
","go-out hoist0 depot0-1-1 loadarea (1)
lift hoist0 crate0 container-0-0 loadarea container0 (1)
drop hoist0 crate0 depot0-1-1 loadarea depot0 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-2)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 depot0-1-2 container-0-0 - storearea
        hoist0 hoist1 - hoist
        crate0 - crate
        container0 - container
        depot0 - depot
        loadarea - transitarea)

(:init
        (connected depot0-1-1 depot0-1-2)
        (connected depot0-1-2 depot0-1-1)
        (in depot0-1-1 depot0)
        (in depot0-1-2 depot0)
        (on crate0 container-0-0)
        (in crate0 container0)
        (in container-0-0 container0)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)  
        (connected depot0-1-1 loadarea)
        (connected loadarea depot0-1-1)    
        (at hoist0 depot0-1-1)
        (available hoist0)
        (at hoist1 depot0-1-2)
        (available hoist1))

(:goal (and
        (in crate0 depot0)))
)
","go-out hoist0 depot0-1-1 loadarea (1)
lift hoist0 crate0 container-0-0 loadarea container0 (1)
drop hoist0 crate0 depot0-1-1 loadarea depot0 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-3)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 depot0-1-2 depot0-1-3 container-0-0 - storearea
        hoist0 hoist1 hoist2 - hoist
        crate0 - crate
        container0 - container
        depot0 - depot
        loadarea - transitarea)

(:init
        (connected depot0-1-1 depot0-1-2)
        (connected depot0-1-2 depot0-1-3)
        (connected depot0-1-2 depot0-1-1)
        (connected depot0-1-3 depot0-1-2)
        (in depot0-1-1 depot0)
        (in depot0-1-2 depot0)
        (in depot0-1-3 depot0)
        (on crate0 container-0-0)
        (in crate0 container0)
        (in container-0-0 container0)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)  
        (connected depot0-1-2 loadarea)
        (connected loadarea depot0-1-2)    
        (at hoist0 depot0-1-2)
        (available hoist0)
        (at hoist1 depot0-1-3)
        (available hoist1)
        (at hoist2 depot0-1-1)
        (available hoist2))

(:goal (and
        (in crate0 depot0)))
)
","go-out hoist0 depot0-1-2 loadarea (1)
lift hoist0 crate0 container-0-0 loadarea container0 (1)
drop hoist0 crate0 depot0-1-2 loadarea depot0 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-4)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 depot0-1-2 depot0-2-1 depot0-2-2 container-0-0 container-0-1 - storearea
        hoist0 - hoist
        crate0 crate1 - crate
        container0 - container
        depot0 - depot
        loadarea - transitarea)

(:init
        (connected depot0-1-1 depot0-2-1)
        (connected depot0-1-1 depot0-1-2)
        (connected depot0-1-2 depot0-2-2)
        (connected depot0-1-2 depot0-1-1)
        (connected depot0-2-1 depot0-1-1)
        (connected depot0-2-1 depot0-2-2)
        (connected depot0-2-2 depot0-1-2)
        (connected depot0-2-2 depot0-2-1)
        (in depot0-1-1 depot0)
        (in depot0-1-2 depot0)
        (in depot0-2-1 depot0)
        (in depot0-2-2 depot0)
        (on crate0 container-0-0)
        (on crate1 container-0-1)
        (in crate0 container0)
        (in crate1 container0)
        (in container-0-0 container0)
        (in container-0-1 container0)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)
        (connected loadarea container-0-1) 
        (connected container-0-1 loadarea)  
        (connected depot0-2-1 loadarea)
        (connected loadarea depot0-2-1)  
        (clear depot0-2-2)
        (clear depot0-1-2)
        (clear depot0-2-1)  
        (at hoist0 depot0-1-1)
        (available hoist0))

(:goal (and
        (in crate0 depot0)
        (in crate1 depot0)))
)
","move hoist0 depot0-1-1 depot0-2-1 (1)
go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate0 container-0-0 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-1 (1)
drop hoist0 crate0 depot0-1-1 depot0-2-1 depot0 (1)
go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate1 container-0-1 loadarea container0 (1)
drop hoist0 crate1 depot0-2-1 loadarea depot0 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-5)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 depot0-1-2 depot0-2-1 depot0-2-2 container-0-0 container-0-1 - storearea
        hoist0 hoist1 - hoist
        crate0 crate1 - crate
        container0 - container
        depot0 - depot
        loadarea - transitarea)

(:init
        (connected depot0-1-1 depot0-2-1)
        (connected depot0-1-1 depot0-1-2)
        (connected depot0-1-2 depot0-2-2)
        (connected depot0-1-2 depot0-1-1)
        (connected depot0-2-1 depot0-1-1)
        (connected depot0-2-1 depot0-2-2)
        (connected depot0-2-2 depot0-1-2)
        (connected depot0-2-2 depot0-2-1)
        (in depot0-1-1 depot0)
        (in depot0-1-2 depot0)
        (in depot0-2-1 depot0)
        (in depot0-2-2 depot0)
        (on crate0 container-0-0)
        (on crate1 container-0-1)
        (in crate0 container0)
        (in crate1 container0)
        (in container-0-0 container0)
        (in container-0-1 container0)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)
        (connected loadarea container-0-1) 
        (connected container-0-1 loadarea)  
        (connected depot0-2-1 loadarea)
        (connected loadarea depot0-2-1)  
        (clear depot0-2-2)
        (clear depot0-2-1)  
        (at hoist0 depot0-1-1)
        (available hoist0)
        (at hoist1 depot0-1-2)
        (available hoist1))

(:goal (and
        (in crate0 depot0)
        (in crate1 depot0)))
)
","move hoist0 depot0-1-1 depot0-2-1 (1)
go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate0 container-0-0 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-1 (1)
drop hoist0 crate0 depot0-1-1 depot0-2-1 depot0 (1)
go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate1 container-0-1 loadarea container0 (1)
drop hoist0 crate1 depot0-2-1 loadarea depot0 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-6)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 depot0-1-2 depot0-2-1 depot0-2-2 container-0-0 container-0-1 - storearea
        hoist0 hoist1 hoist2 - hoist
        crate0 crate1 - crate
        container0 - container
        depot0 - depot
        loadarea - transitarea)

(:init
        (connected depot0-1-1 depot0-2-1)
        (connected depot0-1-1 depot0-1-2)
        (connected depot0-1-2 depot0-2-2)
        (connected depot0-1-2 depot0-1-1)
        (connected depot0-2-1 depot0-1-1)
        (connected depot0-2-1 depot0-2-2)
        (connected depot0-2-2 depot0-1-2)
        (connected depot0-2-2 depot0-2-1)
        (in depot0-1-1 depot0)
        (in depot0-1-2 depot0)
        (in depot0-2-1 depot0)
        (in depot0-2-2 depot0)
        (on crate0 container-0-0)
        (on crate1 container-0-1)
        (in crate0 container0)
        (in crate1 container0)
        (in container-0-0 container0)
        (in container-0-1 container0)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)
        (connected loadarea container-0-1) 
        (connected container-0-1 loadarea)  
        (connected depot0-2-1 loadarea)
        (connected loadarea depot0-2-1)  
        (clear depot0-2-1)  
        (at hoist0 depot0-1-1)
        (available hoist0)
        (at hoist1 depot0-1-2)
        (available hoist1)
        (at hoist2 depot0-2-2)
        (available hoist2))

(:goal (and
        (in crate0 depot0)
        (in crate1 depot0)))
)
","move hoist0 depot0-1-1 depot0-2-1 (1)
go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate0 container-0-0 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-1 (1)
drop hoist0 crate0 depot0-1-1 depot0-2-1 depot0 (1)
go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate1 container-0-1 loadarea container0 (1)
drop hoist0 crate1 depot0-2-1 loadarea depot0 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-7)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 depot0-1-2 depot0-1-3 depot0-2-1 depot0-2-2 depot0-2-3 container-0-0 container-0-1 container-0-2 - storearea
        hoist0 - hoist
        crate0 crate1 crate2 - crate
        container0 - container
        depot0 - depot
        loadarea - transitarea)

(:init
        (connected depot0-1-1 depot0-2-1)
        (connected depot0-1-1 depot0-1-2)
        (connected depot0-1-2 depot0-2-2)
        (connected depot0-1-2 depot0-1-3)
        (connected depot0-1-2 depot0-1-1)
        (connected depot0-1-3 depot0-2-3)
        (connected depot0-1-3 depot0-1-2)
        (connected depot0-2-1 depot0-1-1)
        (connected depot0-2-1 depot0-2-2)
        (connected depot0-2-2 depot0-1-2)
        (connected depot0-2-2 depot0-2-3)
        (connected depot0-2-2 depot0-2-1)
        (connected depot0-2-3 depot0-1-3)
        (connected depot0-2-3 depot0-2-2)
        (in depot0-1-1 depot0)
        (in depot0-1-2 depot0)
        (in depot0-1-3 depot0)
        (in depot0-2-1 depot0)
        (in depot0-2-2 depot0)
        (in depot0-2-3 depot0)
        (on crate0 container-0-0)
        (on crate1 container-0-1)
        (on crate2 container-0-2)
        (in crate0 container0)
        (in crate1 container0)
        (in crate2 container0)
        (in container-0-0 container0)
        (in container-0-1 container0)
        (in container-0-2 container0)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)
        (connected loadarea container-0-1) 
        (connected container-0-1 loadarea)
        (connected loadarea container-0-2) 
        (connected container-0-2 loadarea)  
        (connected depot0-2-1 loadarea)
        (connected loadarea depot0-2-1)  
        (clear depot0-1-1)
        (clear depot0-1-2)
        (clear depot0-2-3)
        (clear depot0-2-1)
        (clear depot0-2-2)  
        (at hoist0 depot0-1-3)
        (available hoist0))

(:goal (and
        (in crate0 depot0)
        (in crate1 depot0)
        (in crate2 depot0)))
)
","move hoist0 depot0-1-3 depot0-2-3 (1)
move hoist0 depot0-2-3 depot0-2-2 (1)
move hoist0 depot0-2-2 depot0-2-1 (1)
go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate0 container-0-0 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-1 (1)
drop hoist0 crate0 depot0-1-1 depot0-2-1 depot0 (1)
go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate1 container-0-1 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-1 (1)
drop hoist0 crate1 depot0-2-2 depot0-2-1 depot0 (1)
go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate2 container-0-2 loadarea container0 (1)
drop hoist0 crate2 depot0-2-1 loadarea depot0 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-8)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 depot0-1-2 depot0-1-3 depot0-2-1 depot0-2-2 depot0-2-3 container-0-0 container-0-1 container-0-2 - storearea
        hoist0 hoist1 - hoist
        crate0 crate1 crate2 - crate
        container0 - container
        depot0 - depot
        loadarea - transitarea)

(:init
        (connected depot0-1-1 depot0-2-1)
        (connected depot0-1-1 depot0-1-2)
        (connected depot0-1-2 depot0-2-2)
        (connected depot0-1-2 depot0-1-3)
        (connected depot0-1-2 depot0-1-1)
        (connected depot0-1-3 depot0-2-3)
        (connected depot0-1-3 depot0-1-2)
        (connected depot0-2-1 depot0-1-1)
        (connected depot0-2-1 depot0-2-2)
        (connected depot0-2-2 depot0-1-2)
        (connected depot0-2-2 depot0-2-3)
        (connected depot0-2-2 depot0-2-1)
        (connected depot0-2-3 depot0-1-3)
        (connected depot0-2-3 depot0-2-2)
        (in depot0-1-1 depot0)
        (in depot0-1-2 depot0)
        (in depot0-1-3 depot0)
        (in depot0-2-1 depot0)
        (in depot0-2-2 depot0)
        (in depot0-2-3 depot0)
        (on crate0 container-0-0)
        (on crate1 container-0-1)
        (on crate2 container-0-2)
        (in crate0 container0)
        (in crate1 container0)
        (in crate2 container0)
        (in container-0-0 container0)
        (in container-0-1 container0)
        (in container-0-2 container0)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)
        (connected loadarea container-0-1) 
        (connected container-0-1 loadarea)
        (connected loadarea container-0-2) 
        (connected container-0-2 loadarea)  
        (connected depot0-2-3 loadarea)
        (connected loadarea depot0-2-3)  
        (clear depot0-1-1)
        (clear depot0-1-2)
        (clear depot0-2-3)
        (clear depot0-2-1)  
        (at hoist0 depot0-2-2)
        (available hoist0)
        (at hoist1 depot0-1-3)
        (available hoist1))

(:goal (and
        (in crate0 depot0)
        (in crate1 depot0)
        (in crate2 depot0)))
)
","move hoist1 depot0-1-3 depot0-2-3 (1)
go-out hoist1 depot0-2-3 loadarea (1)
lift hoist1 crate0 container-0-0 loadarea container0 (1)
drop hoist1 crate0 depot0-2-3 loadarea depot0 (1)
lift hoist1 crate1 container-0-1 loadarea container0 (1)
lift hoist0 crate0 depot0-2-3 depot0-2-2 depot0 (1)
drop hoist0 crate0 depot0-2-1 depot0-2-2 depot0 (1)
drop hoist1 crate1 depot0-2-3 loadarea depot0 (1)
lift hoist1 crate2 container-0-2 loadarea container0 (1)
lift hoist0 crate1 depot0-2-3 depot0-2-2 depot0 (1)
drop hoist0 crate1 depot0-1-2 depot0-2-2 depot0 (1)
drop hoist1 crate2 depot0-2-3 loadarea depot0 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-9)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 depot0-1-2 depot0-1-3 depot0-2-1 depot0-2-2 depot0-2-3 container-0-0 container-0-1 container-0-2 - storearea
        hoist0 hoist1 hoist2 - hoist
        crate0 crate1 crate2 - crate
        container0 - container
        depot0 - depot
        loadarea - transitarea)

(:init
        (connected depot0-1-1 depot0-2-1)
        (connected depot0-1-1 depot0-1-2)
        (connected depot0-1-2 depot0-2-2)
        (connected depot0-1-2 depot0-1-3)
        (connected depot0-1-2 depot0-1-1)
        (connected depot0-1-3 depot0-2-3)
        (connected depot0-1-3 depot0-1-2)
        (connected depot0-2-1 depot0-1-1)
        (connected depot0-2-1 depot0-2-2)
        (connected depot0-2-2 depot0-1-2)
        (connected depot0-2-2 depot0-2-3)
        (connected depot0-2-2 depot0-2-1)
        (connected depot0-2-3 depot0-1-3)
        (connected depot0-2-3 depot0-2-2)
        (in depot0-1-1 depot0)
        (in depot0-1-2 depot0)
        (in depot0-1-3 depot0)
        (in depot0-2-1 depot0)
        (in depot0-2-2 depot0)
        (in depot0-2-3 depot0)
        (on crate0 container-0-0)
        (on crate1 container-0-1)
        (on crate2 container-0-2)
        (in crate0 container0)
        (in crate1 container0)
        (in crate2 container0)
        (in container-0-0 container0)
        (in container-0-1 container0)
        (in container-0-2 container0)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)
        (connected loadarea container-0-1) 
        (connected container-0-1 loadarea)
        (connected loadarea container-0-2) 
        (connected container-0-2 loadarea)  
        (connected depot0-2-2 loadarea)
        (connected loadarea depot0-2-2)  
        (clear depot0-2-1)
        (clear depot0-1-2)
        (clear depot0-1-3)  
        (at hoist0 depot0-2-2)
        (available hoist0)
        (at hoist1 depot0-1-1)
        (available hoist1)
        (at hoist2 depot0-2-3)
        (available hoist2))

(:goal (and
        (in crate0 depot0)
        (in crate1 depot0)
        (in crate2 depot0)))
)
","go-out hoist0 depot0-2-2 loadarea (1)
lift hoist0 crate0 container-0-0 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-2 (1)
drop hoist0 crate0 depot0-2-1 depot0-2-2 depot0 (1)
go-out hoist0 depot0-2-2 loadarea (1)
lift hoist0 crate1 container-0-1 loadarea container0 (1)
drop hoist0 crate1 depot0-2-2 loadarea depot0 (1)
lift hoist0 crate2 container-0-2 loadarea container0 (1)
lift hoist2 crate1 depot0-2-2 depot0-2-3 depot0 (1)
drop hoist0 crate2 depot0-2-2 loadarea depot0 (1)
drop hoist2 crate1 depot0-1-3 depot0-2-3 depot0 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-10)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 depot0-1-2 depot0-1-3 depot0-1-4 depot0-2-1 depot0-2-2 depot0-2-3 depot0-2-4 container-0-0 container-0-1 container-0-2 container-0-3 - storearea
        hoist0 - hoist
        crate0 crate1 crate2 crate3 - crate
        container0 - container
        depot0 - depot
        loadarea - transitarea)

(:init
        (connected depot0-1-1 depot0-2-1)
        (connected depot0-1-1 depot0-1-2)
        (connected depot0-1-2 depot0-2-2)
        (connected depot0-1-2 depot0-1-3)
        (connected depot0-1-2 depot0-1-1)
        (connected depot0-1-3 depot0-2-3)
        (connected depot0-1-3 depot0-1-4)
        (connected depot0-1-3 depot0-1-2)
        (connected depot0-1-4 depot0-2-4)
        (connected depot0-1-4 depot0-1-3)
        (connected depot0-2-1 depot0-1-1)
        (connected depot0-2-1 depot0-2-2)
        (connected depot0-2-2 depot0-1-2)
        (connected depot0-2-2 depot0-2-3)
        (connected depot0-2-2 depot0-2-1)
        (connected depot0-2-3 depot0-1-3)
        (connected depot0-2-3 depot0-2-4)
        (connected depot0-2-3 depot0-2-2)
        (connected depot0-2-4 depot0-1-4)
        (connected depot0-2-4 depot0-2-3)
        (in depot0-1-1 depot0)
        (in depot0-1-2 depot0)
        (in depot0-1-3 depot0)
        (in depot0-1-4 depot0)
        (in depot0-2-1 depot0)
        (in depot0-2-2 depot0)
        (in depot0-2-3 depot0)
        (in depot0-2-4 depot0)
        (on crate0 container-0-0)
        (on crate1 container-0-1)
        (on crate2 container-0-2)
        (on crate3 container-0-3)
        (in crate0 container0)
        (in crate1 container0)
        (in crate2 container0)
        (in crate3 container0)
        (in container-0-0 container0)
        (in container-0-1 container0)
        (in container-0-2 container0)
        (in container-0-3 container0)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)
        (connected loadarea container-0-1) 
        (connected container-0-1 loadarea)
        (connected loadarea container-0-2) 
        (connected container-0-2 loadarea)
        (connected loadarea container-0-3) 
        (connected container-0-3 loadarea)  
        (connected depot0-2-3 loadarea)
        (connected loadarea depot0-2-3)  
        (clear depot0-2-4)
        (clear depot0-1-2)
        (clear depot0-1-3)
        (clear depot0-1-4)
        (clear depot0-2-1)
        (clear depot0-2-2)
        (clear depot0-2-3)  
        (at hoist0 depot0-1-1)
        (available hoist0))

(:goal (and
        (in crate0 depot0)
        (in crate1 depot0)
        (in crate2 depot0)
        (in crate3 depot0)))
)
","move hoist0 depot0-1-1 depot0-2-1 (1)
move hoist0 depot0-2-1 depot0-2-2 (1)
move hoist0 depot0-2-2 depot0-2-3 (1)
go-out hoist0 depot0-2-3 loadarea (1)
lift hoist0 crate0 container-0-0 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-3 (1)
drop hoist0 crate0 depot0-2-4 depot0-2-3 depot0 (1)
go-out hoist0 depot0-2-3 loadarea (1)
lift hoist0 crate1 container-0-1 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-3 (1)
drop hoist0 crate1 depot0-1-3 depot0-2-3 depot0 (1)
go-out hoist0 depot0-2-3 loadarea (1)
lift hoist0 crate2 container-0-2 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-3 (1)
drop hoist0 crate2 depot0-2-2 depot0-2-3 depot0 (1)
go-out hoist0 depot0-2-3 loadarea (1)
lift hoist0 crate3 container-0-3 loadarea container0 (1)
drop hoist0 crate3 depot0-2-3 loadarea depot0 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-11)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 depot0-1-2 depot0-1-3 depot0-1-4 depot0-2-1 depot0-2-2 depot0-2-3 depot0-2-4 container-0-0 container-0-1 container-0-2 container-0-3 - storearea
        hoist0 hoist1 - hoist
        crate0 crate1 crate2 crate3 - crate
        container0 - container
        depot0 - depot
        loadarea - transitarea)

(:init
        (connected depot0-1-1 depot0-2-1)
        (connected depot0-1-1 depot0-1-2)
        (connected depot0-1-2 depot0-2-2)
        (connected depot0-1-2 depot0-1-3)
        (connected depot0-1-2 depot0-1-1)
        (connected depot0-1-3 depot0-2-3)
        (connected depot0-1-3 depot0-1-4)
        (connected depot0-1-3 depot0-1-2)
        (connected depot0-1-4 depot0-2-4)
        (connected depot0-1-4 depot0-1-3)
        (connected depot0-2-1 depot0-1-1)
        (connected depot0-2-1 depot0-2-2)
        (connected depot0-2-2 depot0-1-2)
        (connected depot0-2-2 depot0-2-3)
        (connected depot0-2-2 depot0-2-1)
        (connected depot0-2-3 depot0-1-3)
        (connected depot0-2-3 depot0-2-4)
        (connected depot0-2-3 depot0-2-2)
        (connected depot0-2-4 depot0-1-4)
        (connected depot0-2-4 depot0-2-3)
        (in depot0-1-1 depot0)
        (in depot0-1-2 depot0)
        (in depot0-1-3 depot0)
        (in depot0-1-4 depot0)
        (in depot0-2-1 depot0)
        (in depot0-2-2 depot0)
        (in depot0-2-3 depot0)
        (in depot0-2-4 depot0)
        (on crate0 container-0-0)
        (on crate1 container-0-1)
        (on crate2 container-0-2)
        (on crate3 container-0-3)
        (in crate0 container0)
        (in crate1 container0)
        (in crate2 container0)
        (in crate3 container0)
        (in container-0-0 container0)
        (in container-0-1 container0)
        (in container-0-2 container0)
        (in container-0-3 container0)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)
        (connected loadarea container-0-1) 
        (connected container-0-1 loadarea)
        (connected loadarea container-0-2) 
        (connected container-0-2 loadarea)
        (connected loadarea container-0-3) 
        (connected container-0-3 loadarea)  
        (connected depot0-2-1 loadarea)
        (connected loadarea depot0-2-1)  
        (clear depot0-1-1)
        (clear depot0-1-2)
        (clear depot0-1-3)
        (clear depot0-2-3)
        (clear depot0-2-4)
        (clear depot0-2-2)  
        (at hoist0 depot0-2-1)
        (available hoist0)
        (at hoist1 depot0-1-4)
        (available hoist1))

(:goal (and
        (in crate0 depot0)
        (in crate1 depot0)
        (in crate2 depot0)
        (in crate3 depot0)))
)
","go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate0 container-0-0 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-1 (1)
move hoist0 depot0-2-1 depot0-1-1 (1)
drop hoist0 crate0 depot0-1-2 depot0-1-1 depot0 (1)
move hoist0 depot0-1-1 depot0-2-1 (1)
go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate1 container-0-1 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-1 (1)
drop hoist0 crate1 depot0-1-1 depot0-2-1 depot0 (1)
go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate2 container-0-2 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-1 (1)
drop hoist0 crate2 depot0-2-2 depot0-2-1 depot0 (1)
go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate3 container-0-3 loadarea container0 (1)
drop hoist0 crate3 depot0-2-1 loadarea depot0 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-12)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 depot0-1-2 depot0-1-3 depot0-1-4 depot0-2-1 depot0-2-2 depot0-2-3 depot0-2-4 container-0-0 container-0-1 container-0-2 container-0-3 - storearea
        hoist0 hoist1 hoist2 - hoist
        crate0 crate1 crate2 crate3 - crate
        container0 - container
        depot0 - depot
        loadarea - transitarea)

(:init
        (connected depot0-1-1 depot0-2-1)
        (connected depot0-1-1 depot0-1-2)
        (connected depot0-1-2 depot0-2-2)
        (connected depot0-1-2 depot0-1-3)
        (connected depot0-1-2 depot0-1-1)
        (connected depot0-1-3 depot0-2-3)
        (connected depot0-1-3 depot0-1-4)
        (connected depot0-1-3 depot0-1-2)
        (connected depot0-1-4 depot0-2-4)
        (connected depot0-1-4 depot0-1-3)
        (connected depot0-2-1 depot0-1-1)
        (connected depot0-2-1 depot0-2-2)
        (connected depot0-2-2 depot0-1-2)
        (connected depot0-2-2 depot0-2-3)
        (connected depot0-2-2 depot0-2-1)
        (connected depot0-2-3 depot0-1-3)
        (connected depot0-2-3 depot0-2-4)
        (connected depot0-2-3 depot0-2-2)
        (connected depot0-2-4 depot0-1-4)
        (connected depot0-2-4 depot0-2-3)
        (in depot0-1-1 depot0)
        (in depot0-1-2 depot0)
        (in depot0-1-3 depot0)
        (in depot0-1-4 depot0)
        (in depot0-2-1 depot0)
        (in depot0-2-2 depot0)
        (in depot0-2-3 depot0)
        (in depot0-2-4 depot0)
        (on crate0 container-0-0)
        (on crate1 container-0-1)
        (on crate2 container-0-2)
        (on crate3 container-0-3)
        (in crate0 container0)
        (in crate1 container0)
        (in crate2 container0)
        (in crate3 container0)
        (in container-0-0 container0)
        (in container-0-1 container0)
        (in container-0-2 container0)
        (in container-0-3 container0)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)
        (connected loadarea container-0-1) 
        (connected container-0-1 loadarea)
        (connected loadarea container-0-2) 
        (connected container-0-2 loadarea)
        (connected loadarea container-0-3) 
        (connected container-0-3 loadarea)  
        (connected depot0-2-1 loadarea)
        (connected loadarea depot0-2-1)  
        (clear depot0-1-1)
        (clear depot0-2-3)
        (clear depot0-2-2)
        (clear depot0-1-4)
        (clear depot0-2-4)  
        (at hoist0 depot0-2-1)
        (available hoist0)
        (at hoist1 depot0-1-2)
        (available hoist1)
        (at hoist2 depot0-1-3)
        (available hoist2))

(:goal (and
        (in crate0 depot0)
        (in crate1 depot0)
        (in crate2 depot0)
        (in crate3 depot0)))
)
","go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate0 container-0-0 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-1 (1)
drop hoist0 crate0 depot0-1-1 depot0-2-1 depot0 (1)
go-out hoist0 depot0-2-1 loadarea (1)
lift hoist0 crate1 container-0-1 loadarea container0 (1)
drop hoist0 crate1 depot0-2-1 loadarea depot0 (1)
lift hoist0 crate2 container-0-2 loadarea container0 (1)
move hoist1 depot0-1-2 depot0-2-2 (1)
lift hoist1 crate1 depot0-2-1 depot0-2-2 depot0 (1)
drop hoist1 crate1 depot0-1-2 depot0-2-2 depot0 (1)
drop hoist0 crate2 depot0-2-1 loadarea depot0 (1)
lift hoist0 crate3 container-0-3 loadarea container0 (1)
lift hoist1 crate2 depot0-2-1 depot0-2-2 depot0 (1)
drop hoist0 crate3 depot0-2-1 loadarea depot0 (1)
drop hoist1 crate2 depot0-2-3 depot0-2-2 depot0 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-13)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 depot0-1-2 depot0-1-3 depot0-2-1 depot0-2-3 depot1-1-1 depot1-1-2 depot1-1-3 depot1-2-1 depot1-2-2 container-0-0 container-0-1 container-0-2 container-0-3 container-1-0 - storearea
        hoist0 - hoist
        crate0 crate1 crate2 crate3 crate4 - crate
        container0 container1 - container
        depot0 depot1 - depot
        loadarea transit0 - transitarea)

(:init
        (connected depot0-1-1 depot0-2-1)
        (connected depot0-1-1 depot0-1-2)
        (connected depot0-1-2 depot0-1-3)
        (connected depot0-1-2 depot0-1-1)
        (connected depot0-1-3 depot0-2-3)
        (connected depot0-1-3 depot0-1-2)
        (connected depot0-2-1 depot0-1-1)
        (connected depot0-2-3 depot0-1-3)
        (connected depot1-1-1 depot1-2-1)
        (connected depot1-1-1 depot1-1-2)
        (connected depot1-1-2 depot1-2-2)
        (connected depot1-1-2 depot1-1-3)
        (connected depot1-1-2 depot1-1-1)
        (connected depot1-1-3 depot1-1-2)
        (connected depot1-2-1 depot1-1-1)
        (connected depot1-2-1 depot1-2-2)
        (connected depot1-2-2 depot1-1-2)
        (connected depot1-2-2 depot1-2-1)
        (connected transit0 depot0-1-3)
        (connected transit0 depot1-1-1)
        (in depot0-1-1 depot0)
        (in depot0-1-2 depot0)
        (in depot0-1-3 depot0)
        (in depot0-2-1 depot0)
        (in depot0-2-3 depot0)
        (in depot1-1-1 depot1)
        (in depot1-1-2 depot1)
        (in depot1-1-3 depot1)
        (in depot1-2-1 depot1)
        (in depot1-2-2 depot1)
        (on crate0 container-0-0)
        (on crate1 container-0-1)
        (on crate2 container-0-2)
        (on crate3 container-0-3)
        (on crate4 container-1-0)
        (in crate0 container0)
        (in crate1 container0)
        (in crate2 container0)
        (in crate3 container0)
        (in crate4 container1)
        (in container-0-0 container0)
        (in container-0-1 container0)
        (in container-0-2 container0)
        (in container-0-3 container0)
        (in container-1-0 container1)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)
        (connected loadarea container-0-1) 
        (connected container-0-1 loadarea)
        (connected loadarea container-0-2) 
        (connected container-0-2 loadarea)
        (connected loadarea container-0-3) 
        (connected container-0-3 loadarea)
        (connected loadarea container-1-0) 
        (connected container-1-0 loadarea)  
        (connected depot0-2-3 loadarea)
        (connected loadarea depot0-2-3)
        (connected depot1-2-2 loadarea)
        (connected loadarea depot1-2-2)  
        (clear depot0-1-1)
        (clear depot0-1-2)
        (clear depot0-2-3)
        (clear depot0-2-1)
        (clear depot1-1-1)
        (clear depot1-1-2)
        (clear depot1-1-3)
        (clear depot1-2-1)
        (clear depot1-2-2)  
        (at hoist0 depot0-1-3)
        (available hoist0))

(:goal (and
        (in crate0 depot0)
        (in crate1 depot0)
        (in crate2 depot1)
        (in crate3 depot1)
        (in crate4 depot1)))
)
","move hoist0 depot0-1-3 depot0-2-3 (1)
go-out hoist0 depot0-2-3 loadarea (1)
lift hoist0 crate0 container-0-0 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-3 (1)
drop hoist0 crate0 depot0-1-3 depot0-2-3 depot0 (1)
go-out hoist0 depot0-2-3 loadarea (1)
lift hoist0 crate1 container-0-1 loadarea container0 (1)
drop hoist0 crate1 depot0-2-3 loadarea depot0 (1)
lift hoist0 crate2 container-0-2 loadarea container0 (1)
go-in hoist0 loadarea depot1-2-2 (1)
drop hoist0 crate2 depot1-2-1 depot1-2-2 depot1 (1)
go-out hoist0 depot1-2-2 loadarea (1)
lift hoist0 crate3 container-0-3 loadarea container0 (1)
go-in hoist0 loadarea depot1-2-2 (1)
drop hoist0 crate3 depot1-1-2 depot1-2-2 depot1 (1)
go-out hoist0 depot1-2-2 loadarea (1)
lift hoist0 crate4 container-1-0 loadarea container1 (1)
drop hoist0 crate4 depot1-2-2 loadarea depot1 (1)"
storage,"(define (domain Storage-Propositional)
(:requirements :typing)
(:types hoist surface place area - object
        container depot - place
        storearea transitarea - area
        area crate - surface)

(:predicates (clear ?s - storearea)
             (in ?x - (either storearea crate) ?p - place)
             (available ?h - hoist) 
             (lifting ?h - hoist ?c - crate) 
             (at ?h - hoist ?a - area)
             (on ?c - crate ?s - storearea) 
             (connected ?a1 ?a2 - area)
             (compatible ?c1 ?c2 - crate)) 

(:action lift
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (available ?h) 
                    (on ?c ?a1) (in ?a1 ?p))
 :effect (and (not (on ?c ?a1)) (clear ?a1)
              (not (available ?h)) (lifting ?h ?c) (not (in ?c ?p))))
                                
(:action drop
 :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
 :precondition (and (connected ?a1 ?a2) (at ?h ?a2) (lifting ?h ?c) 
                    (clear ?a1) (in ?a1 ?p))
 :effect (and (not (lifting ?h ?c)) (available ?h)
              (not (clear ?a1)) (on ?c ?a1) (in ?c ?p)))

(:action move
 :parameters (?h - hoist ?from ?to - storearea)
 :precondition (and (at ?h ?from) (clear ?to) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to)) (clear ?from)))

(:action go-out
 :parameters (?h - hoist ?from - storearea ?to - transitarea)
 :precondition (and (at ?h ?from) (connected ?from ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (clear ?from)))

(:action go-in
 :parameters (?h - hoist ?from - transitarea ?to - storearea)
 :precondition (and (at ?h ?from) (connected ?from ?to) (clear ?to))
 :effect (and (not (at ?h ?from)) (at ?h ?to) (not (clear ?to))))
)

","(define (problem storage-14)
(:domain Storage-Propositional)
(:objects
        depot0-1-1 depot0-1-2 depot0-1-3 depot0-2-1 depot0-2-2 depot1-1-1 depot1-1-2 depot1-1-3 depot1-2-1 depot1-2-3 container-0-0 container-0-1 container-0-2 container-0-3 container-1-0 - storearea
        hoist0 hoist1 - hoist
        crate0 crate1 crate2 crate3 crate4 - crate
        container0 container1 - container
        depot0 depot1 - depot
        loadarea transit0 - transitarea)

(:init
        (connected depot0-1-1 depot0-2-1)
        (connected depot0-1-1 depot0-1-2)
        (connected depot0-1-2 depot0-2-2)
        (connected depot0-1-2 depot0-1-3)
        (connected depot0-1-2 depot0-1-1)
        (connected depot0-1-3 depot0-1-2)
        (connected depot0-2-1 depot0-1-1)
        (connected depot0-2-1 depot0-2-2)
        (connected depot0-2-2 depot0-1-2)
        (connected depot0-2-2 depot0-2-1)
        (connected depot1-1-1 depot1-2-1)
        (connected depot1-1-1 depot1-1-2)
        (connected depot1-1-2 depot1-1-3)
        (connected depot1-1-2 depot1-1-1)
        (connected depot1-1-3 depot1-2-3)
        (connected depot1-1-3 depot1-1-2)
        (connected depot1-2-1 depot1-1-1)
        (connected depot1-2-3 depot1-1-3)
        (connected transit0 depot0-1-3)
        (connected transit0 depot1-1-1)
        (in depot0-1-1 depot0)
        (in depot0-1-2 depot0)
        (in depot0-1-3 depot0)
        (in depot0-2-1 depot0)
        (in depot0-2-2 depot0)
        (in depot1-1-1 depot1)
        (in depot1-1-2 depot1)
        (in depot1-1-3 depot1)
        (in depot1-2-1 depot1)
        (in depot1-2-3 depot1)
        (on crate0 container-0-0)
        (on crate1 container-0-1)
        (on crate2 container-0-2)
        (on crate3 container-0-3)
        (on crate4 container-1-0)
        (in crate0 container0)
        (in crate1 container0)
        (in crate2 container0)
        (in crate3 container0)
        (in crate4 container1)
        (in container-0-0 container0)
        (in container-0-1 container0)
        (in container-0-2 container0)
        (in container-0-3 container0)
        (in container-1-0 container1)
        (connected loadarea container-0-0) 
        (connected container-0-0 loadarea)
        (connected loadarea container-0-1) 
        (connected container-0-1 loadarea)
        (connected loadarea container-0-2) 
        (connected container-0-2 loadarea)
        (connected loadarea container-0-3) 
        (connected container-0-3 loadarea)
        (connected loadarea container-1-0) 
        (connected container-1-0 loadarea)  
        (connected depot0-2-2 loadarea)
        (connected loadarea depot0-2-2)
        (connected depot1-2-3 loadarea)
        (connected loadarea depot1-2-3)  
        (clear depot0-2-2)
        (clear depot0-1-2)
        (clear depot0-1-3)
        (clear depot0-2-1)
        (clear depot1-1-1)
        (clear depot1-2-3)
        (clear depot1-1-3)
        (clear depot1-2-1)  
        (at hoist0 depot0-1-1)
        (available hoist0)
        (at hoist1 depot1-1-2)
        (available hoist1))

(:goal (and
        (in crate0 depot0)
        (in crate1 depot0)
        (in crate2 depot0)
        (in crate3 depot1)
        (in crate4 depot1)))
)
","move hoist0 depot0-1-1 depot0-2-1 (1)
move hoist0 depot0-2-1 depot0-2-2 (1)
go-out hoist0 depot0-2-2 loadarea (1)
lift hoist0 crate3 container-0-3 loadarea container0 (1)
go-in hoist0 loadarea depot1-2-3 (1)
drop hoist0 crate3 depot1-1-3 depot1-2-3 depot1 (1)
go-out hoist0 depot1-2-3 loadarea (1)
lift hoist0 crate4 container-1-0 loadarea container1 (1)
drop hoist0 crate4 depot1-2-3 loadarea depot1 (1)
lift hoist0 crate0 container-0-0 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-2 (1)
drop hoist0 crate0 depot0-2-1 depot0-2-2 depot0 (1)
go-out hoist0 depot0-2-2 loadarea (1)
lift hoist0 crate1 container-0-1 loadarea container0 (1)
go-in hoist0 loadarea depot0-2-2 (1)
drop hoist0 crate1 depot0-1-2 depot0-2-2 depot0 (1)
go-out hoist0 depot0-2-2 loadarea (1)
lift hoist0 crate2 container-0-2 loadarea container0 (1)
drop hoist0 crate2 depot0-2-2 loadarea depot0 (1)"
tpp,"(define (domain TPP-Propositional)
(:requirements :strips :typing)
(:types place locatable level - object
        depot market - place
        truck goods - locatable)

(:predicates (loaded ?g - goods ?t - truck ?l - level)
             (ready-to-load ?g - goods ?m - market ?l - level) 
             (stored ?g - goods ?l - level) 
             (on-sale ?g - goods ?m -  market ?l - level)
             (next ?l1 ?l2 - level)
             (at ?t - truck ?p - place)
             (connected ?p1 ?p2 - place))

(:action drive
 :parameters (?t - truck ?from ?to - place)
 :precondition (and (at ?t ?from) (connected ?from ?to))
 :effect (and (not (at ?t ?from)) (at ?t ?to)))

(:action load
 :parameters (?g - goods ?t - truck ?m - market ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?m) (loaded ?g ?t ?l3)
                    (ready-to-load ?g ?m ?l2) (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (loaded ?g ?t ?l4) (not (loaded ?g ?t ?l3)) 
              (ready-to-load ?g ?m ?l1) (not (ready-to-load ?g ?m ?l2))))

(:action unload
 :parameters (?g - goods ?t - truck ?d - depot ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?d) (loaded ?g ?t ?l2)
                    (stored ?g ?l3) (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (loaded ?g ?t ?l1) (not (loaded ?g ?t ?l2)) 
              (stored ?g ?l4) (not (stored ?g ?l3))))

(:action buy
 :parameters (?t - truck ?g - goods ?m - market ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?m) (on-sale ?g ?m ?l2) (ready-to-load ?g ?m ?l3)
                    (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (on-sale ?g ?m ?l1) (not (on-sale ?g ?m ?l2)) 
              (ready-to-load ?g ?m ?l4) (not (ready-to-load ?g ?m ?l3))))

)","(define (problem TPP)
(:domain TPP-Propositional)
(:objects
        goods1 - goods
        truck1 - truck
        market1 - market
        depot1 - depot
        level0 level1 - level)

(:init
        (next level1 level0)
        (ready-to-load goods1 market1 level0)
        (stored goods1 level0)
        (loaded goods1 truck1 level0)
        (connected depot1 market1)
        (connected market1 depot1)
        (on-sale goods1 market1 level1)
        (at truck1 depot1))

(:goal (and
        (stored goods1 level1)))

)
","drive truck1 depot1 market1 (1)
buy truck1 goods1 market1 level0 level1 level0 level1 (1)
load goods1 truck1 market1 level0 level1 level0 level1 (1)
drive truck1 market1 depot1 (1)
unload goods1 truck1 depot1 level0 level1 level0 level1 (1)"
tpp,"(define (domain TPP-Propositional)
(:requirements :strips :typing)
(:types place locatable level - object
        depot market - place
        truck goods - locatable)

(:predicates (loaded ?g - goods ?t - truck ?l - level)
             (ready-to-load ?g - goods ?m - market ?l - level) 
             (stored ?g - goods ?l - level) 
             (on-sale ?g - goods ?m -  market ?l - level)
             (next ?l1 ?l2 - level)
             (at ?t - truck ?p - place)
             (connected ?p1 ?p2 - place))

(:action drive
 :parameters (?t - truck ?from ?to - place)
 :precondition (and (at ?t ?from) (connected ?from ?to))
 :effect (and (not (at ?t ?from)) (at ?t ?to)))

(:action load
 :parameters (?g - goods ?t - truck ?m - market ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?m) (loaded ?g ?t ?l3)
                    (ready-to-load ?g ?m ?l2) (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (loaded ?g ?t ?l4) (not (loaded ?g ?t ?l3)) 
              (ready-to-load ?g ?m ?l1) (not (ready-to-load ?g ?m ?l2))))

(:action unload
 :parameters (?g - goods ?t - truck ?d - depot ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?d) (loaded ?g ?t ?l2)
                    (stored ?g ?l3) (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (loaded ?g ?t ?l1) (not (loaded ?g ?t ?l2)) 
              (stored ?g ?l4) (not (stored ?g ?l3))))

(:action buy
 :parameters (?t - truck ?g - goods ?m - market ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?m) (on-sale ?g ?m ?l2) (ready-to-load ?g ?m ?l3)
                    (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (on-sale ?g ?m ?l1) (not (on-sale ?g ?m ?l2)) 
              (ready-to-load ?g ?m ?l4) (not (ready-to-load ?g ?m ?l3))))

)","(define (problem TPP)
(:domain TPP-Propositional)
(:objects
        goods1 goods2 - goods
        truck1 - truck
        market1 - market
        depot1 - depot
        level0 level1 - level)

(:init
        (next level1 level0)
        (ready-to-load goods1 market1 level0)
        (ready-to-load goods2 market1 level0)
        (stored goods1 level0)
        (stored goods2 level0)
        (loaded goods1 truck1 level0)
        (loaded goods2 truck1 level0)
        (connected depot1 market1)
        (connected market1 depot1)
        (on-sale goods1 market1 level1)
        (on-sale goods2 market1 level1)
        (at truck1 depot1))

(:goal (and
        (stored goods1 level1)
        (stored goods2 level1)))

)
","drive truck1 depot1 market1 (1)
buy truck1 goods2 market1 level0 level1 level0 level1 (1)
load goods2 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods1 market1 level0 level1 level0 level1 (1)
load goods1 truck1 market1 level0 level1 level0 level1 (1)
drive truck1 market1 depot1 (1)
unload goods2 truck1 depot1 level0 level1 level0 level1 (1)
unload goods1 truck1 depot1 level0 level1 level0 level1 (1)"
tpp,"(define (domain TPP-Propositional)
(:requirements :strips :typing)
(:types place locatable level - object
        depot market - place
        truck goods - locatable)

(:predicates (loaded ?g - goods ?t - truck ?l - level)
             (ready-to-load ?g - goods ?m - market ?l - level) 
             (stored ?g - goods ?l - level) 
             (on-sale ?g - goods ?m -  market ?l - level)
             (next ?l1 ?l2 - level)
             (at ?t - truck ?p - place)
             (connected ?p1 ?p2 - place))

(:action drive
 :parameters (?t - truck ?from ?to - place)
 :precondition (and (at ?t ?from) (connected ?from ?to))
 :effect (and (not (at ?t ?from)) (at ?t ?to)))

(:action load
 :parameters (?g - goods ?t - truck ?m - market ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?m) (loaded ?g ?t ?l3)
                    (ready-to-load ?g ?m ?l2) (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (loaded ?g ?t ?l4) (not (loaded ?g ?t ?l3)) 
              (ready-to-load ?g ?m ?l1) (not (ready-to-load ?g ?m ?l2))))

(:action unload
 :parameters (?g - goods ?t - truck ?d - depot ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?d) (loaded ?g ?t ?l2)
                    (stored ?g ?l3) (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (loaded ?g ?t ?l1) (not (loaded ?g ?t ?l2)) 
              (stored ?g ?l4) (not (stored ?g ?l3))))

(:action buy
 :parameters (?t - truck ?g - goods ?m - market ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?m) (on-sale ?g ?m ?l2) (ready-to-load ?g ?m ?l3)
                    (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (on-sale ?g ?m ?l1) (not (on-sale ?g ?m ?l2)) 
              (ready-to-load ?g ?m ?l4) (not (ready-to-load ?g ?m ?l3))))

)","(define (problem TPP)
(:domain TPP-Propositional)
(:objects
        goods1 goods2 goods3 - goods
        truck1 - truck
        market1 - market
        depot1 - depot
        level0 level1 - level)

(:init
        (next level1 level0)
        (ready-to-load goods1 market1 level0)
        (ready-to-load goods2 market1 level0)
        (ready-to-load goods3 market1 level0)
        (stored goods1 level0)
        (stored goods2 level0)
        (stored goods3 level0)
        (loaded goods1 truck1 level0)
        (loaded goods2 truck1 level0)
        (loaded goods3 truck1 level0)
        (connected depot1 market1)
        (connected market1 depot1)
        (on-sale goods1 market1 level1)
        (on-sale goods2 market1 level1)
        (on-sale goods3 market1 level1)
        (at truck1 depot1))

(:goal (and
        (stored goods1 level1)
        (stored goods2 level1)
        (stored goods3 level1)))

)
","drive truck1 depot1 market1 (1)
buy truck1 goods3 market1 level0 level1 level0 level1 (1)
load goods3 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods2 market1 level0 level1 level0 level1 (1)
load goods2 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods1 market1 level0 level1 level0 level1 (1)
load goods1 truck1 market1 level0 level1 level0 level1 (1)
drive truck1 market1 depot1 (1)
unload goods3 truck1 depot1 level0 level1 level0 level1 (1)
unload goods2 truck1 depot1 level0 level1 level0 level1 (1)
unload goods1 truck1 depot1 level0 level1 level0 level1 (1)"
tpp,"(define (domain TPP-Propositional)
(:requirements :strips :typing)
(:types place locatable level - object
        depot market - place
        truck goods - locatable)

(:predicates (loaded ?g - goods ?t - truck ?l - level)
             (ready-to-load ?g - goods ?m - market ?l - level) 
             (stored ?g - goods ?l - level) 
             (on-sale ?g - goods ?m -  market ?l - level)
             (next ?l1 ?l2 - level)
             (at ?t - truck ?p - place)
             (connected ?p1 ?p2 - place))

(:action drive
 :parameters (?t - truck ?from ?to - place)
 :precondition (and (at ?t ?from) (connected ?from ?to))
 :effect (and (not (at ?t ?from)) (at ?t ?to)))

(:action load
 :parameters (?g - goods ?t - truck ?m - market ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?m) (loaded ?g ?t ?l3)
                    (ready-to-load ?g ?m ?l2) (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (loaded ?g ?t ?l4) (not (loaded ?g ?t ?l3)) 
              (ready-to-load ?g ?m ?l1) (not (ready-to-load ?g ?m ?l2))))

(:action unload
 :parameters (?g - goods ?t - truck ?d - depot ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?d) (loaded ?g ?t ?l2)
                    (stored ?g ?l3) (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (loaded ?g ?t ?l1) (not (loaded ?g ?t ?l2)) 
              (stored ?g ?l4) (not (stored ?g ?l3))))

(:action buy
 :parameters (?t - truck ?g - goods ?m - market ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?m) (on-sale ?g ?m ?l2) (ready-to-load ?g ?m ?l3)
                    (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (on-sale ?g ?m ?l1) (not (on-sale ?g ?m ?l2)) 
              (ready-to-load ?g ?m ?l4) (not (ready-to-load ?g ?m ?l3))))

)","(define (problem TPP)
(:domain TPP-Propositional)
(:objects
        goods1 goods2 goods3 goods4 - goods
        truck1 - truck
        market1 - market
        depot1 - depot
        level0 level1 - level)

(:init
        (next level1 level0)
        (ready-to-load goods1 market1 level0)
        (ready-to-load goods2 market1 level0)
        (ready-to-load goods3 market1 level0)
        (ready-to-load goods4 market1 level0)
        (stored goods1 level0)
        (stored goods2 level0)
        (stored goods3 level0)
        (stored goods4 level0)
        (loaded goods1 truck1 level0)
        (loaded goods2 truck1 level0)
        (loaded goods3 truck1 level0)
        (loaded goods4 truck1 level0)
        (connected depot1 market1)
        (connected market1 depot1)
        (on-sale goods1 market1 level1)
        (on-sale goods2 market1 level1)
        (on-sale goods3 market1 level1)
        (on-sale goods4 market1 level1)
        (at truck1 depot1))

(:goal (and
        (stored goods1 level1)
        (stored goods2 level1)
        (stored goods3 level1)
        (stored goods4 level1)))

)
","drive truck1 depot1 market1 (1)
buy truck1 goods4 market1 level0 level1 level0 level1 (1)
load goods4 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods3 market1 level0 level1 level0 level1 (1)
load goods3 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods2 market1 level0 level1 level0 level1 (1)
load goods2 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods1 market1 level0 level1 level0 level1 (1)
load goods1 truck1 market1 level0 level1 level0 level1 (1)
drive truck1 market1 depot1 (1)
unload goods4 truck1 depot1 level0 level1 level0 level1 (1)
unload goods3 truck1 depot1 level0 level1 level0 level1 (1)
unload goods2 truck1 depot1 level0 level1 level0 level1 (1)
unload goods1 truck1 depot1 level0 level1 level0 level1 (1)"
tpp,"(define (domain TPP-Propositional)
(:requirements :strips :typing)
(:types place locatable level - object
        depot market - place
        truck goods - locatable)

(:predicates (loaded ?g - goods ?t - truck ?l - level)
             (ready-to-load ?g - goods ?m - market ?l - level) 
             (stored ?g - goods ?l - level) 
             (on-sale ?g - goods ?m -  market ?l - level)
             (next ?l1 ?l2 - level)
             (at ?t - truck ?p - place)
             (connected ?p1 ?p2 - place))

(:action drive
 :parameters (?t - truck ?from ?to - place)
 :precondition (and (at ?t ?from) (connected ?from ?to))
 :effect (and (not (at ?t ?from)) (at ?t ?to)))

(:action load
 :parameters (?g - goods ?t - truck ?m - market ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?m) (loaded ?g ?t ?l3)
                    (ready-to-load ?g ?m ?l2) (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (loaded ?g ?t ?l4) (not (loaded ?g ?t ?l3)) 
              (ready-to-load ?g ?m ?l1) (not (ready-to-load ?g ?m ?l2))))

(:action unload
 :parameters (?g - goods ?t - truck ?d - depot ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?d) (loaded ?g ?t ?l2)
                    (stored ?g ?l3) (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (loaded ?g ?t ?l1) (not (loaded ?g ?t ?l2)) 
              (stored ?g ?l4) (not (stored ?g ?l3))))

(:action buy
 :parameters (?t - truck ?g - goods ?m - market ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?m) (on-sale ?g ?m ?l2) (ready-to-load ?g ?m ?l3)
                    (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (on-sale ?g ?m ?l1) (not (on-sale ?g ?m ?l2)) 
              (ready-to-load ?g ?m ?l4) (not (ready-to-load ?g ?m ?l3))))

)","(define (problem TPP)
(:domain TPP-Propositional)
(:objects
        goods1 goods2 goods3 goods4 goods5 - goods
        truck1 truck2 - truck
        market1 market2 - market
        depot1 - depot
        level0 level1 - level)

(:init
        (next level1 level0)
        (ready-to-load goods1 market1 level0)
        (ready-to-load goods1 market2 level0)
        (ready-to-load goods2 market1 level0)
        (ready-to-load goods2 market2 level0)
        (ready-to-load goods3 market1 level0)
        (ready-to-load goods3 market2 level0)
        (ready-to-load goods4 market1 level0)
        (ready-to-load goods4 market2 level0)
        (ready-to-load goods5 market1 level0)
        (ready-to-load goods5 market2 level0)
        (stored goods1 level0)
        (stored goods2 level0)
        (stored goods3 level0)
        (stored goods4 level0)
        (stored goods5 level0)
        (loaded goods1 truck1 level0)
        (loaded goods1 truck2 level0)
        (loaded goods2 truck1 level0)
        (loaded goods2 truck2 level0)
        (loaded goods3 truck1 level0)
        (loaded goods3 truck2 level0)
        (loaded goods4 truck1 level0)
        (loaded goods4 truck2 level0)
        (loaded goods5 truck1 level0)
        (loaded goods5 truck2 level0)
        (connected market1 market2)
        (connected market2 market1)
        (connected depot1 market2)
        (connected market2 depot1)
        (on-sale goods1 market1 level1)
        (on-sale goods2 market1 level1)
        (on-sale goods3 market1 level1)
        (on-sale goods4 market1 level1)
        (on-sale goods5 market1 level1)
        (on-sale goods1 market2 level0)
        (on-sale goods2 market2 level0)
        (on-sale goods3 market2 level0)
        (on-sale goods4 market2 level0)
        (on-sale goods5 market2 level0)
        (at truck1 depot1)
        (at truck2 depot1))

(:goal (and
        (stored goods1 level1)
        (stored goods2 level1)
        (stored goods3 level1)
        (stored goods4 level1)
        (stored goods5 level1)))

)
","drive truck1 depot1 market2 (1)
drive truck1 market2 market1 (1)
buy truck1 goods5 market1 level0 level1 level0 level1 (1)
buy truck1 goods4 market1 level0 level1 level0 level1 (1)
load goods4 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods3 market1 level0 level1 level0 level1 (1)
load goods3 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods2 market1 level0 level1 level0 level1 (1)
load goods5 truck1 market1 level0 level1 level0 level1 (1)
load goods2 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods1 market1 level0 level1 level0 level1 (1)
load goods1 truck1 market1 level0 level1 level0 level1 (1)
drive truck1 market1 market2 (1)
drive truck1 market2 depot1 (1)
unload goods5 truck1 depot1 level0 level1 level0 level1 (1)
unload goods4 truck1 depot1 level0 level1 level0 level1 (1)
unload goods3 truck1 depot1 level0 level1 level0 level1 (1)
unload goods2 truck1 depot1 level0 level1 level0 level1 (1)
unload goods1 truck1 depot1 level0 level1 level0 level1 (1)"
tpp,"(define (domain TPP-Propositional)
(:requirements :strips :typing)
(:types place locatable level - object
        depot market - place
        truck goods - locatable)

(:predicates (loaded ?g - goods ?t - truck ?l - level)
             (ready-to-load ?g - goods ?m - market ?l - level) 
             (stored ?g - goods ?l - level) 
             (on-sale ?g - goods ?m -  market ?l - level)
             (next ?l1 ?l2 - level)
             (at ?t - truck ?p - place)
             (connected ?p1 ?p2 - place))

(:action drive
 :parameters (?t - truck ?from ?to - place)
 :precondition (and (at ?t ?from) (connected ?from ?to))
 :effect (and (not (at ?t ?from)) (at ?t ?to)))

(:action load
 :parameters (?g - goods ?t - truck ?m - market ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?m) (loaded ?g ?t ?l3)
                    (ready-to-load ?g ?m ?l2) (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (loaded ?g ?t ?l4) (not (loaded ?g ?t ?l3)) 
              (ready-to-load ?g ?m ?l1) (not (ready-to-load ?g ?m ?l2))))

(:action unload
 :parameters (?g - goods ?t - truck ?d - depot ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?d) (loaded ?g ?t ?l2)
                    (stored ?g ?l3) (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (loaded ?g ?t ?l1) (not (loaded ?g ?t ?l2)) 
              (stored ?g ?l4) (not (stored ?g ?l3))))

(:action buy
 :parameters (?t - truck ?g - goods ?m - market ?l1 ?l2 ?l3 ?l4 - level)
 :precondition (and (at ?t ?m) (on-sale ?g ?m ?l2) (ready-to-load ?g ?m ?l3)
                    (next ?l2 ?l1) (next ?l4 ?l3))
 :effect (and (on-sale ?g ?m ?l1) (not (on-sale ?g ?m ?l2)) 
              (ready-to-load ?g ?m ?l4) (not (ready-to-load ?g ?m ?l3))))

)","(define (problem TPP)
(:domain TPP-Propositional)
(:objects
        goods1 goods2 goods3 goods4 goods5 goods6 - goods
        truck1 truck2 - truck
        market1 market2 - market
        depot1 - depot
        level0 level1 level2 - level)

(:init
        (next level1 level0)
        (next level2 level1)
        (ready-to-load goods1 market1 level0)
        (ready-to-load goods1 market2 level0)
        (ready-to-load goods2 market1 level0)
        (ready-to-load goods2 market2 level0)
        (ready-to-load goods3 market1 level0)
        (ready-to-load goods3 market2 level0)
        (ready-to-load goods4 market1 level0)
        (ready-to-load goods4 market2 level0)
        (ready-to-load goods5 market1 level0)
        (ready-to-load goods5 market2 level0)
        (ready-to-load goods6 market1 level0)
        (ready-to-load goods6 market2 level0)
        (stored goods1 level0)
        (stored goods2 level0)
        (stored goods3 level0)
        (stored goods4 level0)
        (stored goods5 level0)
        (stored goods6 level0)
        (loaded goods1 truck1 level0)
        (loaded goods1 truck2 level0)
        (loaded goods2 truck1 level0)
        (loaded goods2 truck2 level0)
        (loaded goods3 truck1 level0)
        (loaded goods3 truck2 level0)
        (loaded goods4 truck1 level0)
        (loaded goods4 truck2 level0)
        (loaded goods5 truck1 level0)
        (loaded goods5 truck2 level0)
        (loaded goods6 truck1 level0)
        (loaded goods6 truck2 level0)
        (connected market1 market2)
        (connected market2 market1)
        (connected depot1 market2)
        (connected market2 depot1)
        (on-sale goods1 market1 level1)
        (on-sale goods2 market1 level2)
        (on-sale goods3 market1 level1)
        (on-sale goods4 market1 level2)
        (on-sale goods5 market1 level2)
        (on-sale goods6 market1 level2)
        (on-sale goods1 market2 level0)
        (on-sale goods2 market2 level0)
        (on-sale goods3 market2 level1)
        (on-sale goods4 market2 level0)
        (on-sale goods5 market2 level0)
        (on-sale goods6 market2 level0)
        (at truck1 depot1)
        (at truck2 depot1))

(:goal (and
        (stored goods1 level1)
        (stored goods2 level2)
        (stored goods3 level1)
        (stored goods4 level1)
        (stored goods5 level1)
        (stored goods6 level1)))

)
","drive truck1 depot1 market2 (1)
drive truck1 market2 market1 (1)
buy truck1 goods6 market1 level1 level2 level0 level1 (1)
buy truck1 goods5 market1 level1 level2 level0 level1 (1)
load goods5 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods4 market1 level1 level2 level0 level1 (1)
load goods4 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods3 market1 level0 level1 level0 level1 (1)
load goods3 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods2 market1 level1 level2 level0 level1 (1)
load goods2 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods1 market1 level0 level1 level0 level1 (1)
load goods6 truck1 market1 level0 level1 level0 level1 (1)
buy truck1 goods2 market1 level0 level1 level0 level1 (1)
load goods2 truck1 market1 level0 level1 level1 level2 (1)
load goods1 truck1 market1 level0 level1 level0 level1 (1)
drive truck1 market1 market2 (1)
drive truck1 market2 depot1 (1)
unload goods6 truck1 depot1 level0 level1 level0 level1 (1)
unload goods5 truck1 depot1 level0 level1 level0 level1 (1)
unload goods4 truck1 depot1 level0 level1 level0 level1 (1)
unload goods3 truck1 depot1 level0 level1 level0 level1 (1)
unload goods2 truck1 depot1 level1 level2 level0 level1 (1)
unload goods2 truck1 depot1 level0 level1 level1 level2 (1)
unload goods1 truck1 depot1 level0 level1 level0 level1 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-1)
(:domain tsp)
(:objects p1 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
)
)
)


",move p1 p1 (1)
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-2)
(:domain tsp)
(:objects p1 p2 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
)
)
)


","move p1 p1 (1)
move p1 p2 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-3)
(:domain tsp)
(:objects p1 p2 p3 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
)
)
)


","move p1 p1 (1)
move p1 p2 (1)
move p2 p3 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-4)
(:domain tsp)
(:objects p1 p2 p3 p4 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
)
)
)


","move p1 p1 (1)
move p1 p2 (1)
move p2 p3 (1)
move p3 p4 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-5)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
)
)
)


","move p1 p1 (1)
move p1 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-6)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
)
)
)


","move p1 p1 (1)
move p1 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-7)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
)
)
)


","move p1 p1 (1)
move p1 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-8)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 p8 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
(visited p8)
)
)
)


","move p1 p1 (1)
move p1 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)
move p7 p8 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-9)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 p8 p9 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
(visited p8)
(visited p9)
)
)
)


","move p1 p1 (1)
move p1 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)
move p7 p8 (1)
move p8 p9 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-10)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
(visited p8)
(visited p9)
(visited p10)
)
)
)


","move p1 p1 (1)
move p1 p10 (1)
move p10 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)
move p7 p8 (1)
move p8 p9 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-11)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
(visited p8)
(visited p9)
(visited p10)
(visited p11)
)
)
)


","move p1 p1 (1)
move p1 p10 (1)
move p10 p11 (1)
move p11 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)
move p7 p8 (1)
move p8 p9 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-12)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
(visited p8)
(visited p9)
(visited p10)
(visited p11)
(visited p12)
)
)
)


","move p1 p1 (1)
move p1 p10 (1)
move p10 p11 (1)
move p11 p12 (1)
move p12 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)
move p7 p8 (1)
move p8 p9 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-13)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
(visited p8)
(visited p9)
(visited p10)
(visited p11)
(visited p12)
(visited p13)
)
)
)


","move p1 p1 (1)
move p1 p10 (1)
move p10 p11 (1)
move p11 p12 (1)
move p12 p13 (1)
move p13 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)
move p7 p8 (1)
move p8 p9 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-14)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
(visited p8)
(visited p9)
(visited p10)
(visited p11)
(visited p12)
(visited p13)
(visited p14)
)
)
)


","move p1 p1 (1)
move p1 p10 (1)
move p10 p11 (1)
move p11 p12 (1)
move p12 p13 (1)
move p13 p14 (1)
move p14 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)
move p7 p8 (1)
move p8 p9 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-15)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
(visited p8)
(visited p9)
(visited p10)
(visited p11)
(visited p12)
(visited p13)
(visited p14)
(visited p15)
)
)
)


","move p1 p1 (1)
move p1 p10 (1)
move p10 p11 (1)
move p11 p12 (1)
move p12 p13 (1)
move p13 p14 (1)
move p14 p15 (1)
move p15 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)
move p7 p8 (1)
move p8 p9 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-16)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
(visited p8)
(visited p9)
(visited p10)
(visited p11)
(visited p12)
(visited p13)
(visited p14)
(visited p15)
(visited p16)
)
)
)


","move p1 p1 (1)
move p1 p10 (1)
move p10 p11 (1)
move p11 p12 (1)
move p12 p13 (1)
move p13 p14 (1)
move p14 p15 (1)
move p15 p16 (1)
move p16 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)
move p7 p8 (1)
move p8 p9 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-17)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
(visited p8)
(visited p9)
(visited p10)
(visited p11)
(visited p12)
(visited p13)
(visited p14)
(visited p15)
(visited p16)
(visited p17)
)
)
)


","move p1 p1 (1)
move p1 p10 (1)
move p10 p11 (1)
move p11 p12 (1)
move p12 p13 (1)
move p13 p14 (1)
move p14 p15 (1)
move p15 p16 (1)
move p16 p17 (1)
move p17 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)
move p7 p8 (1)
move p8 p9 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-18)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
(visited p8)
(visited p9)
(visited p10)
(visited p11)
(visited p12)
(visited p13)
(visited p14)
(visited p15)
(visited p16)
(visited p17)
(visited p18)
)
)
)


","move p1 p1 (1)
move p1 p10 (1)
move p10 p11 (1)
move p11 p12 (1)
move p12 p13 (1)
move p13 p14 (1)
move p14 p15 (1)
move p15 p16 (1)
move p16 p17 (1)
move p17 p18 (1)
move p18 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)
move p7 p8 (1)
move p8 p9 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-19)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
(visited p8)
(visited p9)
(visited p10)
(visited p11)
(visited p12)
(visited p13)
(visited p14)
(visited p15)
(visited p16)
(visited p17)
(visited p18)
(visited p19)
)
)
)


","move p1 p1 (1)
move p1 p10 (1)
move p10 p11 (1)
move p11 p12 (1)
move p12 p13 (1)
move p13 p14 (1)
move p14 p15 (1)
move p15 p16 (1)
move p16 p17 (1)
move p17 p18 (1)
move p18 p19 (1)
move p19 p2 (1)
move p2 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)
move p7 p8 (1)
move p8 p9 (1)"
tsp,"(define (domain tsp)
  (:predicates
     (at ?x)
     (visited ?x))

  (:action move
        :parameters (?x ?y)
        :precondition (at ?x)
        :effect (and (at ?y) (visited ?y) (not (at ?x)))))
","


(define (problem tsp-20)
(:domain tsp)
(:objects p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19 p20 )
(:init
(at p1)
)
(:goal
(and
(visited p1)
(visited p2)
(visited p3)
(visited p4)
(visited p5)
(visited p6)
(visited p7)
(visited p8)
(visited p9)
(visited p10)
(visited p11)
(visited p12)
(visited p13)
(visited p14)
(visited p15)
(visited p16)
(visited p17)
(visited p18)
(visited p19)
(visited p20)
)
)
)


","move p1 p1 (1)
move p1 p10 (1)
move p10 p11 (1)
move p11 p12 (1)
move p12 p13 (1)
move p13 p14 (1)
move p14 p15 (1)
move p15 p16 (1)
move p16 p17 (1)
move p17 p18 (1)
move p18 p19 (1)
move p19 p2 (1)
move p2 p20 (1)
move p20 p3 (1)
move p3 p4 (1)
move p4 p5 (1)
move p5 p6 (1)
move p6 p7 (1)
move p7 p8 (1)
move p8 p9 (1)"
tyreworld,"(define (domain tyreworld)
  (:types obj - object
	  tool wheel nut - obj
	  container hub - object)
(:predicates (open ?x)
             (closed ?x)
             (have ?x)
             (in ?x ?y)
             (loose ?x ?y)
             (tight ?x ?y)
             (unlocked ?x)
             (on-ground ?x)
             (not-on-ground ?x)
             (inflated ?x)
             (not-inflated ?x)
             (fastened ?x)
             (unfastened ?x)
             (free ?x)
             (on ?x ?y)
             (intact ?x))


(:action open
:parameters (?x - container)
:precondition (and (unlocked ?x) 
                   (closed ?x))
:effect (and (open ?x)
   (not (closed ?x))))

(:action close
:parameters (?x - container)
:precondition (open ?x)
:effect (and (closed ?x)
   (not (open ?x))))

(:action fetch
:parameters (?x - obj  ?y - container)
:precondition (and (in ?x ?y) (open ?y))
:effect (and (have ?x)
   (not (in ?x ?y))))

(:action put-away
:parameters (?x - obj ?y - container)
:precondition (and (have ?x) (open ?y))
:effect (and (in ?x ?y)  
   (not (have ?x))))

(:action loosen 
:parameters (?x - nut ?y - hub)
:precondition (and (have wrench) (tight ?x ?y) (on-ground ?y))
:effect (and (loose ?x ?y) 
   (not (tight ?x ?y))))

(:action tighten
:parameters (?x - nut ?y - hub)
:precondition (and (have wrench) (loose ?x ?y) (on-ground ?y))
:effect (and (tight ?x ?y) 
   (not (loose ?x ?y))))

(:action jack-up
:parameters (?y - hub)
:precondition (and (on-ground ?y) (have jack))
:effect (and (not-on-ground ?y) 
   (not (on-ground ?y))  (not (have jack))))

(:action jack-down
:parameters (?y - hub)
:precondition (not-on-ground ?y)
:effect (and (on-ground ?y)  (have jack)
   (not (not-on-ground ?y))))

(:action undo
:parameters (?x - nut ?y - hub)
:precondition (and (not-on-ground ?y) (fastened ?y) (have wrench) (loose ?x ?y))
:effect (and (have ?x) (unfastened ?y) 
   (not (fastened ?y)) (not (loose ?x ?y))))

(:action do-up
:parameters (?x - nut ?y - hub)
:precondition (and (have wrench) (unfastened ?y) (not-on-ground ?y) (have ?x))
:effect (and (loose ?x ?y) (fastened ?y) 
   (not (unfastened ?y)) (not (have ?x))))

(:action remove-wheel
:parameters (?x - wheel ?y - hub)
:precondition (and (not-on-ground ?y) (on ?x ?y) (unfastened ?y))
:effect (and (have ?x) (free ?y) 
   (not (on ?x ?y))))

(:action put-on-wheel
:parameters (?x - wheel ?y - hub)
:precondition (and (have ?x) (free ?y) (unfastened ?y) (not-on-ground ?y))
:effect (and (on ?x ?y) 
   (not (free ?y)) (not (have ?x))))

(:action inflate
:parameters (?x - wheel)
:precondition (and (have pump) (not-inflated ?x) (intact ?x))
:effect (and (inflated ?x)
   (not (not-inflated ?x)))))


","


(define (problem tireworld-1)
(:domain tyreworld)
(:objects 
wrench jack pump - tool
the-hub1 
- hub
nuts1 
- nut

boot - container
r1 w1 
- wheel
)
(:init
(in jack boot)
(in pump boot)
(in wrench boot)
(unlocked boot)
(closed boot)
(intact r1)
(in r1 boot)
(not-inflated r1)
(on w1 the-hub1)
(on-ground the-hub1)
(tight nuts1 the-hub1)
(fastened the-hub1)
)
(:goal
(and
(on r1 the-hub1)
(inflated r1)
(tight nuts1 the-hub1)
(in w1 boot)
(in wrench boot)
(in jack boot)
(in pump boot)
(closed boot)
)
)
)

","open boot (1)
fetch r1 boot (1)
fetch wrench boot (1)
fetch jack boot (1)
loosen nuts1 the-hub1 (1)
jack-up the-hub1 (1)
undo nuts1 the-hub1 (1)
remove-wheel w1 the-hub1 (1)
put-away w1 boot (1)
put-on-wheel r1 the-hub1 (1)
do-up nuts1 the-hub1 (1)
jack-down the-hub1 (1)
put-away jack boot (1)
tighten nuts1 the-hub1 (1)
put-away wrench boot (1)
fetch pump boot (1)
inflate r1 (1)
put-away pump boot (1)
close boot (1)"
tyreworld,"(define (domain tyreworld)
  (:types obj - object
	  tool wheel nut - obj
	  container hub - object)
(:predicates (open ?x)
             (closed ?x)
             (have ?x)
             (in ?x ?y)
             (loose ?x ?y)
             (tight ?x ?y)
             (unlocked ?x)
             (on-ground ?x)
             (not-on-ground ?x)
             (inflated ?x)
             (not-inflated ?x)
             (fastened ?x)
             (unfastened ?x)
             (free ?x)
             (on ?x ?y)
             (intact ?x))


(:action open
:parameters (?x - container)
:precondition (and (unlocked ?x) 
                   (closed ?x))
:effect (and (open ?x)
   (not (closed ?x))))

(:action close
:parameters (?x - container)
:precondition (open ?x)
:effect (and (closed ?x)
   (not (open ?x))))

(:action fetch
:parameters (?x - obj  ?y - container)
:precondition (and (in ?x ?y) (open ?y))
:effect (and (have ?x)
   (not (in ?x ?y))))

(:action put-away
:parameters (?x - obj ?y - container)
:precondition (and (have ?x) (open ?y))
:effect (and (in ?x ?y)  
   (not (have ?x))))

(:action loosen 
:parameters (?x - nut ?y - hub)
:precondition (and (have wrench) (tight ?x ?y) (on-ground ?y))
:effect (and (loose ?x ?y) 
   (not (tight ?x ?y))))

(:action tighten
:parameters (?x - nut ?y - hub)
:precondition (and (have wrench) (loose ?x ?y) (on-ground ?y))
:effect (and (tight ?x ?y) 
   (not (loose ?x ?y))))

(:action jack-up
:parameters (?y - hub)
:precondition (and (on-ground ?y) (have jack))
:effect (and (not-on-ground ?y) 
   (not (on-ground ?y))  (not (have jack))))

(:action jack-down
:parameters (?y - hub)
:precondition (not-on-ground ?y)
:effect (and (on-ground ?y)  (have jack)
   (not (not-on-ground ?y))))

(:action undo
:parameters (?x - nut ?y - hub)
:precondition (and (not-on-ground ?y) (fastened ?y) (have wrench) (loose ?x ?y))
:effect (and (have ?x) (unfastened ?y) 
   (not (fastened ?y)) (not (loose ?x ?y))))

(:action do-up
:parameters (?x - nut ?y - hub)
:precondition (and (have wrench) (unfastened ?y) (not-on-ground ?y) (have ?x))
:effect (and (loose ?x ?y) (fastened ?y) 
   (not (unfastened ?y)) (not (have ?x))))

(:action remove-wheel
:parameters (?x - wheel ?y - hub)
:precondition (and (not-on-ground ?y) (on ?x ?y) (unfastened ?y))
:effect (and (have ?x) (free ?y) 
   (not (on ?x ?y))))

(:action put-on-wheel
:parameters (?x - wheel ?y - hub)
:precondition (and (have ?x) (free ?y) (unfastened ?y) (not-on-ground ?y))
:effect (and (on ?x ?y) 
   (not (free ?y)) (not (have ?x))))

(:action inflate
:parameters (?x - wheel)
:precondition (and (have pump) (not-inflated ?x) (intact ?x))
:effect (and (inflated ?x)
   (not (not-inflated ?x)))))


","


(define (problem tireworld-2)
(:domain tyreworld)
(:objects 
wrench jack pump - tool
the-hub1 the-hub2 
- hub
nuts1 nuts2 
- nut

boot - container
r1 w1 r2 w2 
- wheel
)
(:init
(in jack boot)
(in pump boot)
(in wrench boot)
(unlocked boot)
(closed boot)
(intact r1)
(in r1 boot)
(not-inflated r1)
(intact r2)
(in r2 boot)
(not-inflated r2)
(on w1 the-hub1)
(on-ground the-hub1)
(tight nuts1 the-hub1)
(fastened the-hub1)
(on w2 the-hub2)
(on-ground the-hub2)
(tight nuts2 the-hub2)
(fastened the-hub2)
)
(:goal
(and
(on r1 the-hub1)
(inflated r1)
(tight nuts1 the-hub1)
(in w1 boot)
(on r2 the-hub2)
(inflated r2)
(tight nuts2 the-hub2)
(in w2 boot)
(in wrench boot)
(in jack boot)
(in pump boot)
(closed boot)
)
)
)


","open boot (1)
fetch r2 boot (1)
fetch r1 boot (1)
fetch wrench boot (1)
fetch jack boot (1)
loosen nuts1 the-hub1 (1)
jack-up the-hub1 (1)
undo nuts1 the-hub1 (1)
remove-wheel w1 the-hub1 (1)
put-away w1 boot (1)
put-on-wheel r1 the-hub1 (1)
do-up nuts1 the-hub1 (1)
jack-down the-hub1 (1)
tighten nuts1 the-hub1 (1)
loosen nuts2 the-hub2 (1)
jack-up the-hub2 (1)
undo nuts2 the-hub2 (1)
remove-wheel w2 the-hub2 (1)
put-away w2 boot (1)
put-on-wheel r2 the-hub2 (1)
do-up nuts2 the-hub2 (1)
jack-down the-hub2 (1)
put-away jack boot (1)
tighten nuts2 the-hub2 (1)
put-away wrench boot (1)
fetch pump boot (1)
inflate r2 (1)
inflate r1 (1)
put-away pump boot (1)
close boot (1)"
tyreworld,"(define (domain tyreworld)
  (:types obj - object
	  tool wheel nut - obj
	  container hub - object)
(:predicates (open ?x)
             (closed ?x)
             (have ?x)
             (in ?x ?y)
             (loose ?x ?y)
             (tight ?x ?y)
             (unlocked ?x)
             (on-ground ?x)
             (not-on-ground ?x)
             (inflated ?x)
             (not-inflated ?x)
             (fastened ?x)
             (unfastened ?x)
             (free ?x)
             (on ?x ?y)
             (intact ?x))


(:action open
:parameters (?x - container)
:precondition (and (unlocked ?x) 
                   (closed ?x))
:effect (and (open ?x)
   (not (closed ?x))))

(:action close
:parameters (?x - container)
:precondition (open ?x)
:effect (and (closed ?x)
   (not (open ?x))))

(:action fetch
:parameters (?x - obj  ?y - container)
:precondition (and (in ?x ?y) (open ?y))
:effect (and (have ?x)
   (not (in ?x ?y))))

(:action put-away
:parameters (?x - obj ?y - container)
:precondition (and (have ?x) (open ?y))
:effect (and (in ?x ?y)  
   (not (have ?x))))

(:action loosen 
:parameters (?x - nut ?y - hub)
:precondition (and (have wrench) (tight ?x ?y) (on-ground ?y))
:effect (and (loose ?x ?y) 
   (not (tight ?x ?y))))

(:action tighten
:parameters (?x - nut ?y - hub)
:precondition (and (have wrench) (loose ?x ?y) (on-ground ?y))
:effect (and (tight ?x ?y) 
   (not (loose ?x ?y))))

(:action jack-up
:parameters (?y - hub)
:precondition (and (on-ground ?y) (have jack))
:effect (and (not-on-ground ?y) 
   (not (on-ground ?y))  (not (have jack))))

(:action jack-down
:parameters (?y - hub)
:precondition (not-on-ground ?y)
:effect (and (on-ground ?y)  (have jack)
   (not (not-on-ground ?y))))

(:action undo
:parameters (?x - nut ?y - hub)
:precondition (and (not-on-ground ?y) (fastened ?y) (have wrench) (loose ?x ?y))
:effect (and (have ?x) (unfastened ?y) 
   (not (fastened ?y)) (not (loose ?x ?y))))

(:action do-up
:parameters (?x - nut ?y - hub)
:precondition (and (have wrench) (unfastened ?y) (not-on-ground ?y) (have ?x))
:effect (and (loose ?x ?y) (fastened ?y) 
   (not (unfastened ?y)) (not (have ?x))))

(:action remove-wheel
:parameters (?x - wheel ?y - hub)
:precondition (and (not-on-ground ?y) (on ?x ?y) (unfastened ?y))
:effect (and (have ?x) (free ?y) 
   (not (on ?x ?y))))

(:action put-on-wheel
:parameters (?x - wheel ?y - hub)
:precondition (and (have ?x) (free ?y) (unfastened ?y) (not-on-ground ?y))
:effect (and (on ?x ?y) 
   (not (free ?y)) (not (have ?x))))

(:action inflate
:parameters (?x - wheel)
:precondition (and (have pump) (not-inflated ?x) (intact ?x))
:effect (and (inflated ?x)
   (not (not-inflated ?x)))))


","


(define (problem tireworld-3)
(:domain tyreworld)
(:objects 
wrench jack pump - tool
the-hub1 the-hub2 the-hub3 
- hub
nuts1 nuts2 nuts3 
- nut

boot - container
r1 w1 r2 w2 r3 w3 
- wheel
)
(:init
(in jack boot)
(in pump boot)
(in wrench boot)
(unlocked boot)
(closed boot)
(intact r1)
(in r1 boot)
(not-inflated r1)
(intact r2)
(in r2 boot)
(not-inflated r2)
(intact r3)
(in r3 boot)
(not-inflated r3)
(on w1 the-hub1)
(on-ground the-hub1)
(tight nuts1 the-hub1)
(fastened the-hub1)
(on w2 the-hub2)
(on-ground the-hub2)
(tight nuts2 the-hub2)
(fastened the-hub2)
(on w3 the-hub3)
(on-ground the-hub3)
(tight nuts3 the-hub3)
(fastened the-hub3)
)
(:goal
(and
(on r1 the-hub1)
(inflated r1)
(tight nuts1 the-hub1)
(in w1 boot)
(on r2 the-hub2)
(inflated r2)
(tight nuts2 the-hub2)
(in w2 boot)
(on r3 the-hub3)
(inflated r3)
(tight nuts3 the-hub3)
(in w3 boot)
(in wrench boot)
(in jack boot)
(in pump boot)
(closed boot)
)
)
)


","open boot (1)
fetch r3 boot (1)
fetch r2 boot (1)
fetch r1 boot (1)
fetch wrench boot (1)
fetch jack boot (1)
loosen nuts1 the-hub1 (1)
jack-up the-hub1 (1)
undo nuts1 the-hub1 (1)
remove-wheel w1 the-hub1 (1)
put-away w1 boot (1)
put-on-wheel r1 the-hub1 (1)
do-up nuts1 the-hub1 (1)
jack-down the-hub1 (1)
tighten nuts1 the-hub1 (1)
loosen nuts2 the-hub2 (1)
jack-up the-hub2 (1)
undo nuts2 the-hub2 (1)
remove-wheel w2 the-hub2 (1)
put-away w2 boot (1)
put-on-wheel r2 the-hub2 (1)
do-up nuts2 the-hub2 (1)
jack-down the-hub2 (1)
tighten nuts2 the-hub2 (1)
loosen nuts3 the-hub3 (1)
jack-up the-hub3 (1)
undo nuts3 the-hub3 (1)
remove-wheel w3 the-hub3 (1)
put-away w3 boot (1)
put-on-wheel r3 the-hub3 (1)
do-up nuts3 the-hub3 (1)
jack-down the-hub3 (1)
put-away jack boot (1)
tighten nuts3 the-hub3 (1)
put-away wrench boot (1)
fetch pump boot (1)
inflate r3 (1)
inflate r2 (1)
inflate r1 (1)
put-away pump boot (1)
close boot (1)"
zenotravel,"(define (domain zeno-travel)
(:predicates
         (at ?x ?c) (in ?p ?a) (fuel-level ?a ?l) (next ?l1 ?l2)(aircraft ?p) (person ?x) (city ?x) (flevel ?x) )
(:action board
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (at ?p ?c) (at ?a ?c))
 :effect
        (and (in ?p ?a) (not (at ?p ?c))))

(:action debark
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (in ?p ?a) (at ?a ?c))
 :effect
        (and (at ?p ?c) (not (in ?p ?a))))

(:action fly
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l2) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action zoom
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2 ?l3)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2) (flevel ?l3)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1) (next ?l3 ?l2))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l3) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action refuel
 :parameters ( ?a ?c ?l ?l1)
 :precondition
        (and (aircraft?a) (city ?c) (flevel ?l) (flevel ?l1)  (fuel-level ?a ?l) (next ?l ?l1) (at ?a ?c))
 :effect
        (and (fuel-level ?a ?l1) (not (fuel-level ?a ?l))))

)
","(define (problem ZTRAVEL-1-2)
(:domain zeno-travel)
(:objects
        plane1
        person1
        person2
        city0
        city1
        city2
        fl0
        fl1
        fl2
        fl3
        fl4
        fl5
        fl6
        )
(:init
        (at plane1 city0)
        (aircraft plane1)
        (fuel-level plane1 fl1)
        (at person1 city0)
        (person person1)
        (at person2 city2)
        (person person2)
        (city city0)
        (city city1)
        (city city2)
        (next fl0 fl1)
        (next fl1 fl2)
        (next fl2 fl3)
        (next fl3 fl4)
        (next fl4 fl5)
        (next fl5 fl6)
        (flevel fl0)
        (flevel fl1)
        (flevel fl2)
        (flevel fl3)
        (flevel fl4)
        (flevel fl5)
        (flevel fl6)
)
(:goal (and
        (at plane1 city1)
        (at person1 city0)
        (at person2 city2)
        ))

)
",fly plane1 city0 city1 fl1 fl0 (1)
zenotravel,"(define (domain zeno-travel)
(:predicates
         (at ?x ?c) (in ?p ?a) (fuel-level ?a ?l) (next ?l1 ?l2)(aircraft ?p) (person ?x) (city ?x) (flevel ?x) )
(:action board
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (at ?p ?c) (at ?a ?c))
 :effect
        (and (in ?p ?a) (not (at ?p ?c))))

(:action debark
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (in ?p ?a) (at ?a ?c))
 :effect
        (and (at ?p ?c) (not (in ?p ?a))))

(:action fly
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l2) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action zoom
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2 ?l3)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2) (flevel ?l3)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1) (next ?l3 ?l2))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l3) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action refuel
 :parameters ( ?a ?c ?l ?l1)
 :precondition
        (and (aircraft?a) (city ?c) (flevel ?l) (flevel ?l1)  (fuel-level ?a ?l) (next ?l ?l1) (at ?a ?c))
 :effect
        (and (fuel-level ?a ?l1) (not (fuel-level ?a ?l))))

)
","(define (problem ZTRAVEL-1-3)
(:domain zeno-travel)
(:objects
        plane1
        person1
        person2
        person3
        city0
        city1
        city2
        fl0
        fl1
        fl2
        fl3
        fl4
        fl5
        fl6
        )
(:init
        (at plane1 city0)
        (aircraft plane1)
        (fuel-level plane1 fl2)
        (at person1 city2)
        (person person1)
        (at person2 city1)
        (person person2)
        (at person3 city2)
        (person person3)
        (city city0)
        (city city1)
        (city city2)
        (next fl0 fl1)
        (next fl1 fl2)
        (next fl2 fl3)
        (next fl3 fl4)
        (next fl4 fl5)
        (next fl5 fl6)
        (flevel fl0)
        (flevel fl1)
        (flevel fl2)
        (flevel fl3)
        (flevel fl4)
        (flevel fl5)
        (flevel fl6)
)
(:goal (and
        (at plane1 city2)
        (at person1 city1)
        (at person3 city2)
        ))

)
","fly plane1 city0 city2 fl2 fl1 (1)
board person1 plane1 city2 (1)
refuel plane1 city2 fl1 fl2 (1)
fly plane1 city2 city1 fl2 fl1 (1)
debark person1 plane1 city1 (1)
fly plane1 city1 city2 fl1 fl0 (1)"
zenotravel,"(define (domain zeno-travel)
(:predicates
         (at ?x ?c) (in ?p ?a) (fuel-level ?a ?l) (next ?l1 ?l2)(aircraft ?p) (person ?x) (city ?x) (flevel ?x) )
(:action board
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (at ?p ?c) (at ?a ?c))
 :effect
        (and (in ?p ?a) (not (at ?p ?c))))

(:action debark
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (in ?p ?a) (at ?a ?c))
 :effect
        (and (at ?p ?c) (not (in ?p ?a))))

(:action fly
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l2) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action zoom
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2 ?l3)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2) (flevel ?l3)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1) (next ?l3 ?l2))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l3) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action refuel
 :parameters ( ?a ?c ?l ?l1)
 :precondition
        (and (aircraft?a) (city ?c) (flevel ?l) (flevel ?l1)  (fuel-level ?a ?l) (next ?l ?l1) (at ?a ?c))
 :effect
        (and (fuel-level ?a ?l1) (not (fuel-level ?a ?l))))

)
","(define (problem ZTRAVEL-2-4)
(:domain zeno-travel)
(:objects
        plane1
        plane2
        person1
        person2
        person3
        person4
        city0
        city1
        city2
        fl0
        fl1
        fl2
        fl3
        fl4
        fl5
        fl6
        )
(:init
        (at plane1 city0)
        (aircraft plane1)
        (fuel-level plane1 fl4)
        (at plane2 city2)
        (aircraft plane2)
        (fuel-level plane2 fl5)
        (at person1 city0)
        (person person1)
        (at person2 city0)
        (person person2)
        (at person3 city1)
        (person person3)
        (at person4 city1)
        (person person4)
        (city city0)
        (city city1)
        (city city2)
        (next fl0 fl1)
        (next fl1 fl2)
        (next fl2 fl3)
        (next fl3 fl4)
        (next fl4 fl5)
        (next fl5 fl6)
        (flevel fl0)
        (flevel fl1)
        (flevel fl2)
        (flevel fl3)
        (flevel fl4)
        (flevel fl5)
        (flevel fl6)
)
(:goal (and
        (at plane2 city2)
        (at person1 city1)
        (at person2 city0)
        (at person3 city0)
        (at person4 city1)
        ))

)
","board person1 plane1 city0 (1)
fly plane1 city0 city1 fl4 fl3 (1)
board person3 plane1 city1 (1)
debark person1 plane1 city1 (1)
fly plane1 city1 city0 fl3 fl2 (1)
debark person3 plane1 city0 (1)"
zenotravel,"(define (domain zeno-travel)
(:predicates
         (at ?x ?c) (in ?p ?a) (fuel-level ?a ?l) (next ?l1 ?l2)(aircraft ?p) (person ?x) (city ?x) (flevel ?x) )
(:action board
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (at ?p ?c) (at ?a ?c))
 :effect
        (and (in ?p ?a) (not (at ?p ?c))))

(:action debark
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (in ?p ?a) (at ?a ?c))
 :effect
        (and (at ?p ?c) (not (in ?p ?a))))

(:action fly
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l2) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action zoom
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2 ?l3)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2) (flevel ?l3)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1) (next ?l3 ?l2))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l3) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action refuel
 :parameters ( ?a ?c ?l ?l1)
 :precondition
        (and (aircraft?a) (city ?c) (flevel ?l) (flevel ?l1)  (fuel-level ?a ?l) (next ?l ?l1) (at ?a ?c))
 :effect
        (and (fuel-level ?a ?l1) (not (fuel-level ?a ?l))))

)
","(define (problem ZTRAVEL-2-5)
(:domain zeno-travel)
(:objects
        plane1
        plane2
        person1
        person2
        person3
        person4
        person5
        city0
        city1
        city2
        fl0
        fl1
        fl2
        fl3
        fl4
        fl5
        fl6
        )
(:init
        (at plane1 city2)
        (aircraft plane1)
        (fuel-level plane1 fl5)
        (at plane2 city2)
        (aircraft plane2)
        (fuel-level plane2 fl0)
        (at person1 city0)
        (person person1)
        (at person2 city1)
        (person person2)
        (at person3 city0)
        (person person3)
        (at person4 city0)
        (person person4)
        (at person5 city2)
        (person person5)
        (city city0)
        (city city1)
        (city city2)
        (next fl0 fl1)
        (next fl1 fl2)
        (next fl2 fl3)
        (next fl3 fl4)
        (next fl4 fl5)
        (next fl5 fl6)
        (flevel fl0)
        (flevel fl1)
        (flevel fl2)
        (flevel fl3)
        (flevel fl4)
        (flevel fl5)
        (flevel fl6)
)
(:goal (and
        (at plane1 city0)
        (at person2 city2)
        (at person3 city0)
        (at person4 city1)
        (at person5 city2)
        ))

)
","fly plane1 city2 city0 fl5 fl4 (1)
board person4 plane1 city0 (1)
fly plane1 city0 city1 fl4 fl3 (1)
debark person4 plane1 city1 (1)
board person2 plane1 city1 (1)
fly plane1 city1 city2 fl3 fl2 (1)
debark person2 plane1 city2 (1)
fly plane1 city2 city0 fl2 fl1 (1)"
zenotravel,"(define (domain zeno-travel)
(:predicates
         (at ?x ?c) (in ?p ?a) (fuel-level ?a ?l) (next ?l1 ?l2)(aircraft ?p) (person ?x) (city ?x) (flevel ?x) )
(:action board
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (at ?p ?c) (at ?a ?c))
 :effect
        (and (in ?p ?a) (not (at ?p ?c))))

(:action debark
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (in ?p ?a) (at ?a ?c))
 :effect
        (and (at ?p ?c) (not (in ?p ?a))))

(:action fly
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l2) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action zoom
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2 ?l3)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2) (flevel ?l3)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1) (next ?l3 ?l2))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l3) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action refuel
 :parameters ( ?a ?c ?l ?l1)
 :precondition
        (and (aircraft?a) (city ?c) (flevel ?l) (flevel ?l1)  (fuel-level ?a ?l) (next ?l ?l1) (at ?a ?c))
 :effect
        (and (fuel-level ?a ?l1) (not (fuel-level ?a ?l))))

)
","(define (problem ZTRAVEL-2-4)
(:domain zeno-travel)
(:objects
        plane1
        plane2
        person1
        person2
        person3
        person4
        city0
        city1
        city2
        city3
        fl0
        fl1
        fl2
        fl3
        fl4
        fl5
        fl6
        )
(:init
        (at plane1 city1)
        (aircraft plane1)
        (fuel-level plane1 fl6)
        (at plane2 city2)
        (aircraft plane2)
        (fuel-level plane2 fl0)
        (at person1 city3)
        (person person1)
        (at person2 city0)
        (person person2)
        (at person3 city0)
        (person person3)
        (at person4 city1)
        (person person4)
        (city city0)
        (city city1)
        (city city2)
        (city city3)
        (next fl0 fl1)
        (next fl1 fl2)
        (next fl2 fl3)
        (next fl3 fl4)
        (next fl4 fl5)
        (next fl5 fl6)
        (flevel fl0)
        (flevel fl1)
        (flevel fl2)
        (flevel fl3)
        (flevel fl4)
        (flevel fl5)
        (flevel fl6)
)
(:goal (and
        (at person1 city2)
        (at person2 city3)
        (at person3 city3)
        (at person4 city3)
        ))

)
","board person4 plane1 city1 (1)
fly plane1 city1 city0 fl6 fl5 (1)
board person3 plane1 city0 (1)
board person2 plane1 city0 (1)
fly plane1 city0 city3 fl5 fl4 (1)
debark person4 plane1 city3 (1)
debark person3 plane1 city3 (1)
debark person2 plane1 city3 (1)
board person1 plane1 city3 (1)
fly plane1 city3 city2 fl4 fl3 (1)
debark person1 plane1 city2 (1)"
zenotravel,"(define (domain zeno-travel)
(:predicates
         (at ?x ?c) (in ?p ?a) (fuel-level ?a ?l) (next ?l1 ?l2)(aircraft ?p) (person ?x) (city ?x) (flevel ?x) )
(:action board
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (at ?p ?c) (at ?a ?c))
 :effect
        (and (in ?p ?a) (not (at ?p ?c))))

(:action debark
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (in ?p ?a) (at ?a ?c))
 :effect
        (and (at ?p ?c) (not (in ?p ?a))))

(:action fly
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l2) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action zoom
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2 ?l3)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2) (flevel ?l3)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1) (next ?l3 ?l2))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l3) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action refuel
 :parameters ( ?a ?c ?l ?l1)
 :precondition
        (and (aircraft?a) (city ?c) (flevel ?l) (flevel ?l1)  (fuel-level ?a ?l) (next ?l ?l1) (at ?a ?c))
 :effect
        (and (fuel-level ?a ?l1) (not (fuel-level ?a ?l))))

)
","(define (problem ZTRAVEL-2-5)
(:domain zeno-travel)
(:objects
        plane1
        plane2
        person1
        person2
        person3
        person4
        person5
        city0
        city1
        city2
        city3
        fl0
        fl1
        fl2
        fl3
        fl4
        fl5
        fl6
        )
(:init
        (at plane1 city2)
        (aircraft plane1)
        (fuel-level plane1 fl5)
        (at plane2 city1)
        (aircraft plane2)
        (fuel-level plane2 fl3)
        (at person1 city0)
        (person person1)
        (at person2 city0)
        (person person2)
        (at person3 city3)
        (person person3)
        (at person4 city1)
        (person person4)
        (at person5 city2)
        (person person5)
        (city city0)
        (city city1)
        (city city2)
        (city city3)
        (next fl0 fl1)
        (next fl1 fl2)
        (next fl2 fl3)
        (next fl3 fl4)
        (next fl4 fl5)
        (next fl5 fl6)
        (flevel fl0)
        (flevel fl1)
        (flevel fl2)
        (flevel fl3)
        (flevel fl4)
        (flevel fl5)
        (flevel fl6)
)
(:goal (and
        (at person1 city3)
        (at person2 city1)
        (at person3 city3)
        (at person4 city3)
        (at person5 city1)
        ))

)
","board person5 plane1 city2 (1)
fly plane1 city2 city0 fl5 fl4 (1)
board person2 plane1 city0 (1)
board person1 plane1 city0 (1)
fly plane1 city0 city1 fl4 fl3 (1)
debark person5 plane1 city1 (1)
board person4 plane1 city1 (1)
debark person2 plane1 city1 (1)
fly plane1 city1 city3 fl3 fl2 (1)
debark person4 plane1 city3 (1)
debark person1 plane1 city3 (1)"
zenotravel,"(define (domain zeno-travel)
(:predicates
         (at ?x ?c) (in ?p ?a) (fuel-level ?a ?l) (next ?l1 ?l2)(aircraft ?p) (person ?x) (city ?x) (flevel ?x) )
(:action board
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (at ?p ?c) (at ?a ?c))
 :effect
        (and (in ?p ?a) (not (at ?p ?c))))

(:action debark
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (in ?p ?a) (at ?a ?c))
 :effect
        (and (at ?p ?c) (not (in ?p ?a))))

(:action fly
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l2) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action zoom
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2 ?l3)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2) (flevel ?l3)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1) (next ?l3 ?l2))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l3) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action refuel
 :parameters ( ?a ?c ?l ?l1)
 :precondition
        (and (aircraft?a) (city ?c) (flevel ?l) (flevel ?l1)  (fuel-level ?a ?l) (next ?l ?l1) (at ?a ?c))
 :effect
        (and (fuel-level ?a ?l1) (not (fuel-level ?a ?l))))

)
","(define (problem ZTRAVEL-2-6)
(:domain zeno-travel)
(:objects
        plane1
        plane2
        person1
        person2
        person3
        person4
        person5
        person6
        city0
        city1
        city2
        city3
        fl0
        fl1
        fl2
        fl3
        fl4
        fl5
        fl6
        )
(:init
        (at plane1 city2)
        (aircraft plane1)
        (fuel-level plane1 fl1)
        (at plane2 city1)
        (aircraft plane2)
        (fuel-level plane2 fl1)
        (at person1 city3)
        (person person1)
        (at person2 city3)
        (person person2)
        (at person3 city3)
        (person person3)
        (at person4 city1)
        (person person4)
        (at person5 city3)
        (person person5)
        (at person6 city0)
        (person person6)
        (city city0)
        (city city1)
        (city city2)
        (city city3)
        (next fl0 fl1)
        (next fl1 fl2)
        (next fl2 fl3)
        (next fl3 fl4)
        (next fl4 fl5)
        (next fl5 fl6)
        (flevel fl0)
        (flevel fl1)
        (flevel fl2)
        (flevel fl3)
        (flevel fl4)
        (flevel fl5)
        (flevel fl6)
)
(:goal (and
        (at plane2 city1)
        (at person1 city2)
        (at person3 city3)
        (at person4 city3)
        (at person5 city2)
        (at person6 city2)
        ))

)
","board person4 plane2 city1 (1)
refuel plane2 city1 fl1 fl2 (1)
fly plane2 city1 city3 fl2 fl1 (1)
board person5 plane2 city3 (1)
debark person4 plane2 city3 (1)
board person1 plane2 city3 (1)
fly plane2 city3 city0 fl1 fl0 (1)
refuel plane2 city0 fl0 fl1 (1)
board person6 plane2 city0 (1)
fly plane2 city0 city2 fl1 fl0 (1)
refuel plane2 city2 fl0 fl1 (1)
debark person6 plane2 city2 (1)
debark person5 plane2 city2 (1)
debark person1 plane2 city2 (1)
fly plane2 city2 city1 fl1 fl0 (1)"
zenotravel,"(define (domain zeno-travel)
(:predicates
         (at ?x ?c) (in ?p ?a) (fuel-level ?a ?l) (next ?l1 ?l2)(aircraft ?p) (person ?x) (city ?x) (flevel ?x) )
(:action board
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (at ?p ?c) (at ?a ?c))
 :effect
        (and (in ?p ?a) (not (at ?p ?c))))

(:action debark
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (in ?p ?a) (at ?a ?c))
 :effect
        (and (at ?p ?c) (not (in ?p ?a))))

(:action fly
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l2) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action zoom
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2 ?l3)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2) (flevel ?l3)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1) (next ?l3 ?l2))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l3) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action refuel
 :parameters ( ?a ?c ?l ?l1)
 :precondition
        (and (aircraft?a) (city ?c) (flevel ?l) (flevel ?l1)  (fuel-level ?a ?l) (next ?l ?l1) (at ?a ?c))
 :effect
        (and (fuel-level ?a ?l1) (not (fuel-level ?a ?l))))

)
","(define (problem ZTRAVEL-3-6)
(:domain zeno-travel)
(:objects
        plane1
        plane2
        plane3
        person1
        person2
        person3
        person4
        person5
        person6
        city0
        city1
        city2
        city3
        city4
        fl0
        fl1
        fl2
        fl3
        fl4
        fl5
        fl6
        )
(:init
        (at plane1 city0)
        (aircraft plane1)
        (fuel-level plane1 fl6)
        (at plane2 city3)
        (aircraft plane2)
        (fuel-level plane2 fl0)
        (at plane3 city0)
        (aircraft plane3)
        (fuel-level plane3 fl3)
        (at person1 city1)
        (person person1)
        (at person2 city0)
        (person person2)
        (at person3 city2)
        (person person3)
        (at person4 city0)
        (person person4)
        (at person5 city3)
        (person person5)
        (at person6 city4)
        (person person6)
        (city city0)
        (city city1)
        (city city2)
        (city city3)
        (city city4)
        (next fl0 fl1)
        (next fl1 fl2)
        (next fl2 fl3)
        (next fl3 fl4)
        (next fl4 fl5)
        (next fl5 fl6)
        (flevel fl0)
        (flevel fl1)
        (flevel fl2)
        (flevel fl3)
        (flevel fl4)
        (flevel fl5)
        (flevel fl6)
)
(:goal (and
        (at plane1 city3)
        (at person1 city0)
        (at person2 city0)
        (at person3 city1)
        (at person4 city0)
        (at person5 city3)
        (at person6 city2)
        ))

)
","fly plane1 city0 city4 fl6 fl5 (1)
board person6 plane1 city4 (1)
fly plane1 city4 city2 fl5 fl4 (1)
debark person6 plane1 city2 (1)
board person3 plane1 city2 (1)
fly plane1 city2 city1 fl4 fl3 (1)
debark person3 plane1 city1 (1)
board person1 plane1 city1 (1)
fly plane1 city1 city0 fl3 fl2 (1)
debark person1 plane1 city0 (1)
fly plane1 city0 city3 fl2 fl1 (1)"
zenotravel,"(define (domain zeno-travel)
(:predicates
         (at ?x ?c) (in ?p ?a) (fuel-level ?a ?l) (next ?l1 ?l2)(aircraft ?p) (person ?x) (city ?x) (flevel ?x) )
(:action board
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (at ?p ?c) (at ?a ?c))
 :effect
        (and (in ?p ?a) (not (at ?p ?c))))

(:action debark
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (in ?p ?a) (at ?a ?c))
 :effect
        (and (at ?p ?c) (not (in ?p ?a))))

(:action fly
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l2) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action zoom
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2 ?l3)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2) (flevel ?l3)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1) (next ?l3 ?l2))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l3) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action refuel
 :parameters ( ?a ?c ?l ?l1)
 :precondition
        (and (aircraft?a) (city ?c) (flevel ?l) (flevel ?l1)  (fuel-level ?a ?l) (next ?l ?l1) (at ?a ?c))
 :effect
        (and (fuel-level ?a ?l1) (not (fuel-level ?a ?l))))

)
","(define (problem ZTRAVEL-3-7)
(:domain zeno-travel)
(:objects
        plane1
        plane2
        plane3
        person1
        person2
        person3
        person4
        person5
        person6
        person7
        city0
        city1
        city2
        city3
        city4
        fl0
        fl1
        fl2
        fl3
        fl4
        fl5
        fl6
        )
(:init
        (at plane1 city2)
        (aircraft plane1)
        (fuel-level plane1 fl5)
        (at plane2 city2)
        (aircraft plane2)
        (fuel-level plane2 fl2)
        (at plane3 city1)
        (aircraft plane3)
        (fuel-level plane3 fl0)
        (at person1 city4)
        (person person1)
        (at person2 city1)
        (person person2)
        (at person3 city2)
        (person person3)
        (at person4 city0)
        (person person4)
        (at person5 city4)
        (person person5)
        (at person6 city3)
        (person person6)
        (at person7 city3)
        (person person7)
        (city city0)
        (city city1)
        (city city2)
        (city city3)
        (city city4)
        (next fl0 fl1)
        (next fl1 fl2)
        (next fl2 fl3)
        (next fl3 fl4)
        (next fl4 fl5)
        (next fl5 fl6)
        (flevel fl0)
        (flevel fl1)
        (flevel fl2)
        (flevel fl3)
        (flevel fl4)
        (flevel fl5)
        (flevel fl6)
)
(:goal (and
        (at person1 city2)
        (at person2 city0)
        (at person3 city4)
        (at person4 city3)
        (at person5 city1)
        (at person6 city4)
        (at person7 city4)
        ))

)
","board person3 plane1 city2 (1)
fly plane1 city2 city1 fl5 fl4 (1)
board person2 plane1 city1 (1)
fly plane1 city1 city0 fl4 fl3 (1)
board person4 plane1 city0 (1)
debark person2 plane1 city0 (1)
fly plane1 city0 city3 fl3 fl2 (1)
board person7 plane1 city3 (1)
board person6 plane1 city3 (1)
debark person4 plane1 city3 (1)
fly plane1 city3 city4 fl2 fl1 (1)
debark person7 plane1 city4 (1)
debark person6 plane1 city4 (1)
board person5 plane1 city4 (1)
debark person3 plane1 city4 (1)
fly plane1 city4 city1 fl1 fl0 (1)
debark person5 plane1 city1 (1)
fly plane2 city2 city4 fl2 fl1 (1)
board person1 plane2 city4 (1)
fly plane2 city4 city2 fl1 fl0 (1)
debark person1 plane2 city2 (1)"
zenotravel,"(define (domain zeno-travel)
(:predicates
         (at ?x ?c) (in ?p ?a) (fuel-level ?a ?l) (next ?l1 ?l2)(aircraft ?p) (person ?x) (city ?x) (flevel ?x) )
(:action board
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (at ?p ?c) (at ?a ?c))
 :effect
        (and (in ?p ?a) (not (at ?p ?c))))

(:action debark
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (in ?p ?a) (at ?a ?c))
 :effect
        (and (at ?p ?c) (not (in ?p ?a))))

(:action fly
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l2) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action zoom
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2 ?l3)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2) (flevel ?l3)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1) (next ?l3 ?l2))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l3) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action refuel
 :parameters ( ?a ?c ?l ?l1)
 :precondition
        (and (aircraft?a) (city ?c) (flevel ?l) (flevel ?l1)  (fuel-level ?a ?l) (next ?l ?l1) (at ?a ?c))
 :effect
        (and (fuel-level ?a ?l1) (not (fuel-level ?a ?l))))

)
","(define (problem ZTRAVEL-3-8)
(:domain zeno-travel)
(:objects
        plane1
        plane2
        plane3
        person1
        person2
        person3
        person4
        person5
        person6
        person7
        person8
        city0
        city1
        city2
        city3
        city4
        fl0
        fl1
        fl2
        fl3
        fl4
        fl5
        fl6
        )
(:init
        (at plane1 city0)
        (aircraft plane1)
        (fuel-level plane1 fl2)
        (at plane2 city4)
        (aircraft plane2)
        (fuel-level plane2 fl5)
        (at plane3 city2)
        (aircraft plane3)
        (fuel-level plane3 fl2)
        (at person1 city3)
        (person person1)
        (at person2 city3)
        (person person2)
        (at person3 city4)
        (person person3)
        (at person4 city4)
        (person person4)
        (at person5 city1)
        (person person5)
        (at person6 city0)
        (person person6)
        (at person7 city1)
        (person person7)
        (at person8 city0)
        (person person8)
        (city city0)
        (city city1)
        (city city2)
        (city city3)
        (city city4)
        (next fl0 fl1)
        (next fl1 fl2)
        (next fl2 fl3)
        (next fl3 fl4)
        (next fl4 fl5)
        (next fl5 fl6)
        (flevel fl0)
        (flevel fl1)
        (flevel fl2)
        (flevel fl3)
        (flevel fl4)
        (flevel fl5)
        (flevel fl6)
)
(:goal (and
        (at plane1 city2)
        (at person1 city1)
        (at person2 city2)
        (at person3 city3)
        (at person4 city1)
        (at person5 city0)
        (at person6 city3)
        (at person7 city4)
        (at person8 city3)
        ))

)
","board person4 plane2 city4 (1)
board person3 plane2 city4 (1)
board person8 plane1 city0 (1)
board person6 plane1 city0 (1)
fly plane1 city0 city3 fl2 fl1 (1)
debark person8 plane1 city3 (1)
debark person6 plane1 city3 (1)
board person2 plane1 city3 (1)
fly plane1 city3 city2 fl1 fl0 (1)
debark person2 plane1 city2 (1)
fly plane2 city4 city3 fl5 fl4 (1)
debark person3 plane2 city3 (1)
board person1 plane2 city3 (1)
fly plane2 city3 city1 fl4 fl3 (1)
board person7 plane2 city1 (1)
board person5 plane2 city1 (1)
debark person4 plane2 city1 (1)
debark person1 plane2 city1 (1)
fly plane2 city1 city0 fl3 fl2 (1)
debark person5 plane2 city0 (1)
fly plane2 city0 city4 fl2 fl1 (1)
debark person7 plane2 city4 (1)"
zenotravel,"(define (domain zeno-travel)
(:predicates
         (at ?x ?c) (in ?p ?a) (fuel-level ?a ?l) (next ?l1 ?l2)(aircraft ?p) (person ?x) (city ?x) (flevel ?x) )
(:action board
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (at ?p ?c) (at ?a ?c))
 :effect
        (and (in ?p ?a) (not (at ?p ?c))))

(:action debark
 :parameters ( ?p ?a ?c)
 :precondition
        (and (person ?p) (aircraft ?a) (city ?c)  (in ?p ?a) (at ?a ?c))
 :effect
        (and (at ?p ?c) (not (in ?p ?a))))

(:action fly
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l2) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action zoom
 :parameters ( ?a ?c1 ?c2 ?l1 ?l2 ?l3)
 :precondition
        (and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2) (flevel ?l3)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1) (next ?l3 ?l2))
 :effect
        (and (at ?a ?c2) (fuel-level ?a ?l3) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action refuel
 :parameters ( ?a ?c ?l ?l1)
 :precondition
        (and (aircraft?a) (city ?c) (flevel ?l) (flevel ?l1)  (fuel-level ?a ?l) (next ?l ?l1) (at ?a ?c))
 :effect
        (and (fuel-level ?a ?l1) (not (fuel-level ?a ?l))))

)
","(define (problem ZTRAVEL-3-7)
(:domain zeno-travel)
(:objects
        plane1
        plane2
        plane3
        person1
        person2
        person3
        person4
        person5
        person6
        person7
        city0
        city1
        city2
        city3
        city4
        city5
        fl0
        fl1
        fl2
        fl3
        fl4
        fl5
        fl6
        )
(:init
        (at plane1 city4)
        (aircraft plane1)
        (fuel-level plane1 fl4)
        (at plane2 city4)
        (aircraft plane2)
        (fuel-level plane2 fl3)
        (at plane3 city1)
        (aircraft plane3)
        (fuel-level plane3 fl5)
        (at person1 city4)
        (person person1)
        (at person2 city2)
        (person person2)
        (at person3 city2)
        (person person3)
        (at person4 city0)
        (person person4)
        (at person5 city2)
        (person person5)
        (at person6 city2)
        (person person6)
        (at person7 city5)
        (person person7)
        (city city0)
        (city city1)
        (city city2)
        (city city3)
        (city city4)
        (city city5)
        (next fl0 fl1)
        (next fl1 fl2)
        (next fl2 fl3)
        (next fl3 fl4)
        (next fl4 fl5)
        (next fl5 fl6)
        (flevel fl0)
        (flevel fl1)
        (flevel fl2)
        (flevel fl3)
        (flevel fl4)
        (flevel fl5)
        (flevel fl6)
)
(:goal (and
        (at plane1 city1)
        (at person1 city4)
        (at person2 city1)
        (at person3 city2)
        (at person4 city2)
        (at person5 city2)
        (at person6 city4)
        (at person7 city0)
        ))

)
","fly plane1 city4 city5 fl4 fl3 (1)
board person7 plane1 city5 (1)
fly plane1 city5 city0 fl3 fl2 (1)
debark person7 plane1 city0 (1)
board person4 plane1 city0 (1)
fly plane1 city0 city2 fl2 fl1 (1)
debark person4 plane1 city2 (1)
board person2 plane1 city2 (1)
fly plane1 city2 city1 fl1 fl0 (1)
debark person2 plane1 city1 (1)
fly plane3 city1 city2 fl5 fl4 (1)
board person6 plane3 city2 (1)
fly plane3 city2 city4 fl4 fl3 (1)
debark person6 plane3 city4 (1)"